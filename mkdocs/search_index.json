{
    "docs": [
        {
            "location": "/",
            "text": "taskcat\n\u00b6\n\n\n\n\nversion = '0.1.76'\nThis program requires python3 \n\n\n\n\nCurrently in beta release\n\u00b6\n\n\nPlease report bugs here \nhttps://github.com/aws-quickstart/taskcat/issues\n\n\nWhat is taskcat?\n\u00b6\n\n\nTaskCat is a tool that tests AWS CloudFormation templates. It deploys your AWS CloudFormation template in multiple AWS Regions and generates a report with a pass/fail grade for each region. You can specify the regions and number of Availability Zones you want to include in the test, and pass in parameter values from your AWS CloudFormation template. TaskCat is implemented as a Python class that you import, instantiate, and run.\n\n\nTestCat was developed by the AWS Quick Start team to test AWS CloudFormation templates that automatically deploy workloads on AWS. We\u2019re pleased to make the tool available to all developers who want to validate their custom AWS CloudFormation \ntemplates across AWS Regions\n\n\nFiles you\u2019ll need\n\u00b6\n\n\nconfig.yml\n - This file contains the test cases\n\nJSON input\n - This file contains the imputs that you want to pass to AWS CloudFormation template that is being tested\n\n\n\n\nStep 1 Building your configuration file \n\n\nStep 2 Building your JSON input file.\n\n\n\n\nStep 1 Creating a config.ymal\n\u00b6\n\n\nYou can generate a sample config.ymal by running \ntaskcat -ey\n\nThe followup's command will create a sample config.yml\n\n1\n./taskcat -ey | egrep -v '#|^$'  >config.yml\n\n\n\n\nOpen the config.yml file with and editor and update the filenames to match your need. \n\n\nExample of config.yml\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nglobal\n:\n\n  \nowner\n:\n \nowner\n@\ncompany\n.\ncom\n\n  \nproject\n:\n \nsample\n-\ncloudformation\n-\nproject\n \n<-\n \nMust\n \nmatch\n \nthe\n \nroot\n \ndirectory\n \nof\n \nproject\n \n(\nusually\n \nthe\n \nname\n \nof\n \ngit\n \nrepo\n)\n\n  \n#\ns3bucket\n:\n \nprojectx\n-\ntemplates\n \n<-\n \n(\nOptional\n)\n \nOnly\n \nneeded\n \nif\n \nyou\n \nwant\n \nto\n \nuse\n \na\n \nspecific\n \nbucket\n \n  \nregions\n:\n\n    \n-\n \nus\n-\neast\n-\n1\n\n    \n-\n \nus\n-\neast\n-\n2\n\n    \n-\n \nus\n-\nwest\n-\n1\n\n    \n-\n \nus\n-\nwest\n-\n2\n\n\ntests\n:\n\n  \n#\n \nThe\n \nfollowing\n \ntest\n \nwill\n \ntest\n \nin\n \nboth\n \nus\n-\nwest\n-\n1\n \nand\n \nus\n-\neast\n-\n1\n \nusing\n \nsample\n-\ncloudformation\n-\ninput\n.\njson\n \nas\n \ninputs\n\n  \nsenario\n-\n1\n:\n\n    \nregions\n:\n\n      \n-\n \nus\n-\nwest\n-\n1\n\n      \n-\n \nus\n-\neast\n-\n1\n\n    \ntemplate_file\n:\n \nsample\n-\ncloudformation\n-\nproject\n-\nnovpc\n.\ntemplate\n\n    \nparameter_input\n:\n \nsample\n-\ncloudformation\n-\ninput\n-\nnovpc\n.\njson\n\n  \n#\n \nThe\n \nfollowing\n \ntest\n \nwill\n \ntest\n \nin\n \nboth\n \nall\n \n4\n \nregion\n \ndefined\n \nin\n \nthe\n \nglobal\n \nregion\n \nsection\n \nusing\n \nsample\n-\ncloudformation\n-\ninput\n.\njson\n \nas\n \ninputs\n\n      \nsenario\n-\nall\n-\nregions\n:\n\n    \nparameter_input\n:\n \nsample\n-\ncloudformation\n-\ninput\n-\nwithvpc\n.\njson\n\n    \ntemplate_file\n:\n \nsample\n-\ncloudformation\n-\nproject\n-\nwithvpc\n.\ntemplate\n\n\n\n\n\n\n\nExample of project directory structure\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nsample\n-\ncloudformation\n-\nproject\n/\n\n\n\u251c\u2500\u2500\n \nLICENSE\n.\ntxt\n\n\n\u251c\u2500\u2500\n \nREADME\n.\nmd\n\n\n\u2514\u2500\u2500\n \nci\n\n\u00a0\u00a0 \n\u251c\u2500\u2500\n \nconfig\n.\nyml\n \n<-\n \nThis\n \nthe\n \nconfig\n \nfile\n \nthat\n \nwill\n \nhold\n \nall\n \nthe\n \ntest\n \ndefinitions\n \n\u00a0\u00a0 \n\u251c\u2500\u2500\n  \nsample\n-\ncloudformation\n-\ninput\n-\nnovpc\n.\njson\n \n<-\n  \nThis\n \nfile\n \ncontain\n \ninput\n \nthat\n \nwill\n \npass\n \nin\n \nduring\n \nstack\n \ncreation\n \n[\nvpc\n \nversion\n]\n \n(\nSee\n \nauto\n \nparms\n \nfor\n \nmore\n \ninfo\n)\n\n\u00a0\u00a0 \n\u251c\u2500\u2500\n  \nsample\n-\ncloudformation\n-\ninput\n-\nwithvpc\n.\njson\n \n<-\n  \nThis\n \nfile\n \ncontain\n \ninput\n \nthat\n \nwill\n \npass\n \nin\n \nduring\n \nstack\n \ncreation\n \n[\nno\n-\nvpc\n \nversion\n](\nSee\n \nauto\n \nparms\n \nfor\n \nmore\n \ninfo\n)\n\n   \n\u251c\u2500\u2500\n \nscripts\n\n   \n\u2502\n\u00a0\u00a0 \n\u2514\u2500\u2500\n \nuserdata\n.\nsh\n \n<-\n \nIf\n \nyou\n \nhave\n \nuserdata\n \nscripts\n \nyou\n \ncan\n \nload\n \nthen\n \nin\n \nthe\n \nscripts\n \ndirectory\n\n   \n\u251c\u2500\u2500\n \nsubmodules\n  \n<-\n \nIf\n \nyou\n \nhave\n \ngit\n \nsubmodules\n \nyou\n \ncan\n \nload\n \nthem\n \nin\n \nthe\n \nsubmodules\n \ndirectory\n\n   \n\u2502\n\u00a0\u00a0 \n\u2514\u2500\u2500\n \nquickstart\n-\naws\n-\nvpc\n\n   \n\u2502\n\u00a0\u00a0     \n\u2514\u2500\u2500\n \ntemplates\n\n   \n\u2502\n\u00a0\u00a0         \n\u2514\u2500\u2500\n \naws\n-\nvpc\n.\ntemplate\n\n   \n\u2514\u2500\u2500\n \ntemplates\n\n       \n\u251c\u2500\u2500\n \nsample\n-\ncloudformation\n-\nproject\n-\nnovpc\n.\ntemplate\n \n       \n\u2514\u2500\u2500\n \nsample\n-\ncloudformation\n-\nproject\n-\nwithvpc\n.\ntemplate\n \n<-\n \nSecond\n \nversion\n \non\n \ntemplate\n \nthat\n \nwill\n \ncreate\n \na\n \nvpc\n \nwith\n \nthe\n \nworklo\n    \nad\n\n\n\n\n\n\n\nStep 2 Building a json input file\n\u00b6\n\n\nThe example below shows an input file for a stack that requires four parameters \nKeyPair\n,\nInstanceType\n, \nAvailablityZones\n and \nPassword\n\n\nNote: you can auto generate values at runtime using special tokens (see example below).\n\n\n\n\nThe following json will evaluate\n\n\n\n\nFrom:\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n[\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"$[taskcat_genaz_2]\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"$[taskcat_genpass_8A]\"\n    }, \n]\n\n\n\n\n\n\nTo:\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n[\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"us-east-1a, us-east1b\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"tI8zN3iX8\"\n    }, \n]\n\n\n\n\n\n\nMore information on Auto-generated stack inputs\n\u00b6\n\n\n(Passwords)\n\u00b6\n\n\nValue that matches the following pattern will be replaced\n\n\n\n\nParameters must start with $[\n\n\nParameters must end with ]\n\n\ngenpass in invoked when _genpass_X is found\n\n\nX is lengeth of the string\n\n\n\n\n(Optionally - you can specify the type of password by adding A or S)\n\n\n\n\nA aplha-numeric passwords\n\n\nS passwords with special characters\n\n\n\n\n\n\nExample: $[taskcat_genpass_8A]\nGenerates: \ntI8zN3iX8\n\nExample: $[taskcat_genpass_8S]\nGenerates: mA5@cB5!\n\n\n\n\n(Availablity Zones)\n\u00b6\n\n\nValue that matches the following pattern will be replaced\n\n\n\n\nParameters must start with $[\n\n\nParameters must end with ]\n\n\ngenaz in invoked when _genaz_X is found\n\n\nA number of AZ's will be selected from the region the stack is attempting to launch\n\n\n\n\n\n\nExample: $[taskcat_genaz_2]\n\nGenerates: us-east-1a, us-east-2b\n(if the region is us-east-1)\n\n\n\n\nInstalling TaskCat\n\u00b6\n\n\nInstalling TaskCat (Option 1)\n\u00b6\n\n\n\n\nPrerequisites: Python 3.5+ and pip\n\n1\ncurl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| python -E\n\n\n\n\n\n\n\nInstalling TaskCat via docker (Option 2)\n\u00b6\n\n\n\n\nPrerequisites: docker\n\n1\ncurl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| sudo python -E\n\n\n\n\nNote: (If you do not have root privileges taskcat will install in the current directory)\n\n\n\n\nRunning TaskCat\n\u00b6\n\n\nIf you have AWS credentials sourced \n\n1\n     taskcat -c sample-cloudformation-project/ci/config.yml\n\n\n\n\nIf you need to pass ACCESS and SECRET keys\n\n1\ntaskcat -c sample-cloudformation-project/ci/config.yml -A YOUR_ACCESS_KEY -S YOUR_SECRET_KEY\n\n\n\n\nIf you want to use a different account or profile\n\n1\ntaskcat -c sample-cloudformation-project/ci/config.yml -P boto-profile-name",
            "title": "Home"
        },
        {
            "location": "/#taskcat",
            "text": "version = '0.1.76'\nThis program requires python3",
            "title": "taskcat"
        },
        {
            "location": "/#currently-in-beta-release",
            "text": "Please report bugs here  https://github.com/aws-quickstart/taskcat/issues",
            "title": "Currently in beta release"
        },
        {
            "location": "/#what-is-taskcat",
            "text": "TaskCat is a tool that tests AWS CloudFormation templates. It deploys your AWS CloudFormation template in multiple AWS Regions and generates a report with a pass/fail grade for each region. You can specify the regions and number of Availability Zones you want to include in the test, and pass in parameter values from your AWS CloudFormation template. TaskCat is implemented as a Python class that you import, instantiate, and run.  TestCat was developed by the AWS Quick Start team to test AWS CloudFormation templates that automatically deploy workloads on AWS. We\u2019re pleased to make the tool available to all developers who want to validate their custom AWS CloudFormation \ntemplates across AWS Regions",
            "title": "What is taskcat?"
        },
        {
            "location": "/#files-youll-need",
            "text": "config.yml  - This file contains the test cases JSON input  - This file contains the imputs that you want to pass to AWS CloudFormation template that is being tested   Step 1 Building your configuration file   Step 2 Building your JSON input file.",
            "title": "Files you\u2019ll need"
        },
        {
            "location": "/#step-1-creating-a-configymal",
            "text": "You can generate a sample config.ymal by running  taskcat -ey \nThe followup's command will create a sample config.yml 1 ./taskcat -ey | egrep -v '#|^$'  >config.yml  \nOpen the config.yml file with and editor and update the filenames to match your need.",
            "title": "Step 1 Creating a config.ymal"
        },
        {
            "location": "/#example-of-configyml",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 global : \n   owner :   owner @ company . com \n   project :   sample - cloudformation - project   <-   Must   match   the   root   directory   of   project   ( usually   the   name   of   git   repo ) \n   # s3bucket :   projectx - templates   <-   ( Optional )   Only   needed   if   you   want   to   use   a   specific   bucket  \n   regions : \n     -   us - east - 1 \n     -   us - east - 2 \n     -   us - west - 1 \n     -   us - west - 2  tests : \n   #   The   following   test   will   test   in   both   us - west - 1   and   us - east - 1   using   sample - cloudformation - input . json   as   inputs \n   senario - 1 : \n     regions : \n       -   us - west - 1 \n       -   us - east - 1 \n     template_file :   sample - cloudformation - project - novpc . template \n     parameter_input :   sample - cloudformation - input - novpc . json \n   #   The   following   test   will   test   in   both   all   4   region   defined   in   the   global   region   section   using   sample - cloudformation - input . json   as   inputs \n       senario - all - regions : \n     parameter_input :   sample - cloudformation - input - withvpc . json \n     template_file :   sample - cloudformation - project - withvpc . template",
            "title": "Example of config.yml"
        },
        {
            "location": "/#example-of-project-directory-structure",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 sample - cloudformation - project /  \u251c\u2500\u2500   LICENSE . txt  \u251c\u2500\u2500   README . md  \u2514\u2500\u2500   ci \n\u00a0\u00a0  \u251c\u2500\u2500   config . yml   <-   This   the   config   file   that   will   hold   all   the   test   definitions  \n\u00a0\u00a0  \u251c\u2500\u2500    sample - cloudformation - input - novpc . json   <-    This   file   contain   input   that   will   pass   in   during   stack   creation   [ vpc   version ]   ( See   auto   parms   for   more   info ) \n\u00a0\u00a0  \u251c\u2500\u2500    sample - cloudformation - input - withvpc . json   <-    This   file   contain   input   that   will   pass   in   during   stack   creation   [ no - vpc   version ]( See   auto   parms   for   more   info ) \n    \u251c\u2500\u2500   scripts \n    \u2502 \u00a0\u00a0  \u2514\u2500\u2500   userdata . sh   <-   If   you   have   userdata   scripts   you   can   load   then   in   the   scripts   directory \n    \u251c\u2500\u2500   submodules    <-   If   you   have   git   submodules   you   can   load   them   in   the   submodules   directory \n    \u2502 \u00a0\u00a0  \u2514\u2500\u2500   quickstart - aws - vpc \n    \u2502 \u00a0\u00a0      \u2514\u2500\u2500   templates \n    \u2502 \u00a0\u00a0          \u2514\u2500\u2500   aws - vpc . template \n    \u2514\u2500\u2500   templates \n        \u251c\u2500\u2500   sample - cloudformation - project - novpc . template  \n        \u2514\u2500\u2500   sample - cloudformation - project - withvpc . template   <-   Second   version   on   template   that   will   create   a   vpc   with   the   worklo      ad",
            "title": "Example of project directory structure"
        },
        {
            "location": "/#step-2-building-a-json-input-file",
            "text": "The example below shows an input file for a stack that requires four parameters  KeyPair , InstanceType ,  AvailablityZones  and  Password  Note: you can auto generate values at runtime using special tokens (see example below).   The following json will evaluate",
            "title": "Step 2 Building a json input file"
        },
        {
            "location": "/#from",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 [\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"$[taskcat_genaz_2]\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"$[taskcat_genpass_8A]\"\n    }, \n]",
            "title": "From:"
        },
        {
            "location": "/#to",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 [\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"us-east-1a, us-east1b\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"tI8zN3iX8\"\n    }, \n]",
            "title": "To:"
        },
        {
            "location": "/#more-information-on-auto-generated-stack-inputs",
            "text": "",
            "title": "More information on Auto-generated stack inputs"
        },
        {
            "location": "/#passwords",
            "text": "Value that matches the following pattern will be replaced   Parameters must start with $[  Parameters must end with ]  genpass in invoked when _genpass_X is found  X is lengeth of the string   (Optionally - you can specify the type of password by adding A or S)   A aplha-numeric passwords  S passwords with special characters    Example: $[taskcat_genpass_8A]\nGenerates:  tI8zN3iX8 \nExample: $[taskcat_genpass_8S]\nGenerates: mA5@cB5!",
            "title": "(Passwords)"
        },
        {
            "location": "/#availablity-zones",
            "text": "Value that matches the following pattern will be replaced   Parameters must start with $[  Parameters must end with ]  genaz in invoked when _genaz_X is found  A number of AZ's will be selected from the region the stack is attempting to launch    Example: $[taskcat_genaz_2] \nGenerates: us-east-1a, us-east-2b\n(if the region is us-east-1)",
            "title": "(Availablity Zones)"
        },
        {
            "location": "/#installing-taskcat",
            "text": "",
            "title": "Installing TaskCat"
        },
        {
            "location": "/#installing-taskcat-option-1",
            "text": "Prerequisites: Python 3.5+ and pip 1 curl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| python -E",
            "title": "Installing TaskCat (Option 1)"
        },
        {
            "location": "/#installing-taskcat-via-docker-option-2",
            "text": "Prerequisites: docker 1 curl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| sudo python -E  \nNote: (If you do not have root privileges taskcat will install in the current directory)",
            "title": "Installing TaskCat via docker (Option 2)"
        },
        {
            "location": "/#running-taskcat",
            "text": "If you have AWS credentials sourced  1      taskcat -c sample-cloudformation-project/ci/config.yml  \nIf you need to pass ACCESS and SECRET keys 1 taskcat -c sample-cloudformation-project/ci/config.yml -A YOUR_ACCESS_KEY -S YOUR_SECRET_KEY  \nIf you want to use a different account or profile 1 taskcat -c sample-cloudformation-project/ci/config.yml -P boto-profile-name",
            "title": "Running TaskCat"
        },
        {
            "location": "/pip/taskcat.m/",
            "text": "Module taskcat\n\u00b6\n\n\nClasses\n\u00b6\n\n\nTaskCat \n    Ancestors (in MRO)\n    ------------------\n    taskcat.TaskCat\n    builtins.object\n\n\n  1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312\nStatic\n \nmethods\n\n\n--------------\n\n\n__init__\n(\nself\n,\n \nnametag\n=\n'[taskcat]'\n)\n\n    \nInitialize\n \nself\n.\n  \nSee\n \nhelp\n(\ntype\n(\nself\n))\n \nfor\n \naccurate\n \nsignature\n.\n\n\n\naws_api_init\n(\nself\n,\n \nargs\n)\n\n    \nThis\n \nfunction\n \nreads\n \nthe\n \nAWS\n \ncredentials\n \nfrom\n \nvarious\n \nsources\n \nto\n \nensure\n\n    \nthat\n \nthe\n \nclient\n \nhas\n \nright\n \ncredentials\n \ndefined\n \nto\n \nsuccessfully\n \nrun\n\n    \nTaskCat\n \nagainst\n \nan\n \nAWS\n \naccount.\n\n\n    :\nparam\n \nargs\n: \nCommand\n \nline\n \narguments\n \nfor\n \nAWS\n \ncredentials\n.\n \nIt\n \ncould\n \nbe\n\n        \neither\n \nprofile\n \nname\n,\n \naccess\n \nkey\n \nand\n \nsecret\n \nkey\n \nor\n \nnone\n.\n\n\n\ncleanup\n(\nself\n,\n \ntestdata_list\n,\n \nspeed\n)\n\n    \nThis\n \nfunction\n \ndeletes\n \nthe\n \nCloudFormation\n \nstacks\n \nof\n \nthe\n \ngiven\n \ntests.\n\n\n    :\nparam\n \ntestdata_list\n: \nList\n \nof\n \nTestData\n \nobjects\n\n    :\nparam\n \nspeed\n: \nInterval\n \n(\nin\n \nseconds\n)\n \nin\n \nwhich\n \nthe\n \nstatus\n \nhas\n \nto\n \nbe\n \nchecked\n\n        \nwhile\n \ndeleting\n \nthe\n \nstacks\n.\n\n\n\ncollect_resources\n(\nself\n,\n \ntestdata_list\n,\n \nlogpath\n)\n\n    \nThis\n \nfunction\n \ncollects\n \nthe\n \nAWS\n \nresources\n \ninformation\n \ncreated\n \nby\n \nthe\n\n    \nCloudFormation\n \nstack\n \nfor\n \ngenerating\n \nthe\n \nreport.\n\n\n    :\nparam\n \ntestdata_list\n: \nList\n \nof\n \nTestData\n \nobject\n\n    :\nparam\n \nlogpath\n: \nLog\n \nfile\n \npath\n\n\n\ncreatecfnlogs\n(\nself\n,\n \ntestdata_list\n,\n \nlogpath\n)\n\n    \nThis\n \nfunction\n \ncreates\n \nthe\n \nCloudFormation\n \nlog\n \nfiles.\n\n\n    :\nparam\n \ntestdata_list\n: \nList\n \nof\n \nTestData\n \nobjects\n\n    :\nparam\n \nlogpath\n: \nLog\n \nfile\n \npath\n\n    :\nreturn\n:\n\n\n\ncreatereport\n(\nself\n,\n \ntestdata_list\n,\n \nfilename\n)\n\n    \nThis\n \nfunction\n \ncreates\n \nthe\n \ntest\n \nreport.\n\n\n    :\nparam\n \ntestdata_list\n: \nList\n \nof\n \nTestData\n \nobjects\n\n    :\nparam\n \nfilename\n: \nReport\n \nfile\n \nname\n\n    :\nreturn\n:\n\n\n\ndeep_cleanup\n(\nself\n,\n \ntestdata_list\n)\n\n    \nThis\n \nfunction\n \ndeletes\n \nthe\n \nAWS\n \nresources\n \nwhich\n \nwere\n \nnot\n \ndeleted\n\n    \nby\n \ndeleting\n \nCloudFormation\n \nstacks.\n\n\n    :\nparam\n \ntestdata_list\n: \nList\n \nof\n \nTestData\n \nobjects\n\n\n\ndefine_tests\n(\nself\n,\n \nyamlc\n,\n \ntest\n)\n\n    \nThis\n \nfunction\n \nreads\n \nthe\n \ngiven\n \ntest\n \nconfig\n \nyaml\n \nobject\n \nand\n \ndefines\n\n    \nthe\n \ntests\n \nas\n \nper\n \nthe\n \ngiven\n \nconfig\n \nobject.\n\n\n    :\nparam\n \nyamlc\n: \nTaskCat\n \nconfig\n \nyaml\n \nobject\n\n    :\nparam\n \ntest\n: \nTest\n \nscenarios\n\n\n\ngenpassword\n(\nself\n,\n \npass_length\n,\n \npass_type\n)\n\n    \nReturns\n \na\n \npassword\n \nof\n \ngiven\n \nlength\n \nand\n \ntype.\n\n\n    :\nparam\n \npass_length\n: \nLength\n \nof\n \nthe\n \ndesired\n \npassword\n\n    :\nparam\n \npass_type\n: \nType\n \nof\n \nthe\n \ndesired\n \npassword\n \n-\n \nString\n \nonly\n \nOR\n \nAlphanumeric\n\n        \n*\n \nA\n \n=\n \nAlphaNumeric\n,\n \nExample\n \n'vGceIP8EHC'\n\n    \n:\nreturn\n:\n \nPassword\n \nof\n \ngiven\n \nlength\n \nand\n \ntype\n\n\n\ngenreport\n(\nself\n,\n \ntestdata_list\n,\n \ndashboard_filename\n)\n\n    \nThis\n \nfunction\n \ngenerates\n \nthe\n \ntest\n \nreport.\n\n\n    :\nparam\n \ntestdata_list\n: \nList\n \nof\n \nTestData\n \nobjects\n\n    :\nparam\n \ndashboard_filename\n: \nReport\n \nfile\n \nname\n\n\n\nget_all_resources\n(\nself\n,\n \nstackids\n,\n \nregion\n)\n\n    \nGiven\n \na\n \nlist\n \nof\n \nstackids\n,\n \nfunction\n \nreturns\n \nthe\n \nlist\n \nof\n \ndictionary\n \nitems\n,\n \nwhere\n \neach\n\n    \nitem\n \nconsist\n \nof\n \nstackId\n \nand\n \nthe\n \nresources\n \nassociated\n \nwith\n \nthat\n \nstack.\n\n\n    :\nparam\n \nstackids\n: \nList\n \nof\n \nStack\n \nIds\n\n    :\nparam\n \nregion\n: \nAWS\n \nregion\n\n    :\nreturn\n:\n \nA\n \nlist\n \nof\n \ndictionary\n \nobject\n \nin\n \nthe\n \nfollowing\n \nformat\n\n            \n[\n\n                \n{\n\n                    \n'stackId'\n:\n \n'string'\n,\n\n                    \n'resources'\n:\n \n[\n\n                        \n{\n\n                           \n'logicalId'\n:\n \n'string'\n,\n\n                           \n'physicalId'\n:\n \n'string'\n,\n\n                           \n'resourceType'\n:\n \n'String'\n\n                        \n},\n\n                    \n]\n\n                \n},\n\n            \n]\n\n\n\nget_available_azs\n(\nregion\n,\n \ncount\n)\n\n    \nReturns\n \na\n \nlist\n \nof\n \navailability\n \nzones\n \nin\n \na\n \ngiven\n \nregion.\n\n\n    :\nparam\n \nregion\n: \nRegion\n \nfor\n \nthe\n \navailability\n \nzones\n\n    :\nparam\n \ncount\n: \nMinimum\n \nnumber\n \nof\n \navailability\n \nzones\n \nneeded\n\n\n    :\nreturn\n:\n \nList\n \nof\n \navailability\n \nzones\n \nin\n \na\n \ngiven\n \nregion\n\n\n\nget_capabilities\n(\nself\n)\n\n\n\nget_cfnlogs\n(\nstackname\n,\n \nregion\n)\n\n    \nThis\n \nfunction\n \nreturns\n \nthe\n \nevent\n \nlogs\n \nof\n \nthe\n \ngiven\n \nstack\n \nin\n \na\n \nspecific\n \nformat.\n\n    :\nparam\n \nstackname\n: \nName\n \nof\n \nthe\n \nstack\n\n    :\nparam\n \nregion\n: \nRegion\n \nstack\n \nbelongs\n \nto\n\n    :\nreturn\n:\n \nEvent\n \nlogs\n \nof\n \nthe\n \nstack\n\n\n\nget_config\n(\nself\n)\n\n\n\nget_default_region\n(\nself\n)\n\n\n\nget_docleanup\n(\nself\n)\n\n\n\nget_global_region\n(\nself\n,\n \nyamlcfg\n)\n\n    \nReturns\n \na\n \nlist\n \nof\n \nregions\n \ndefined\n \nunder\n \nglobal\n \nregion\n \nin\n \nthe\n \nyml\n \nconfig\n \nfile.\n\n\n    :\nparam\n \nyamlcfg\n: \nContent\n \nof\n \nthe\n \nyml\n \nconfig\n \nfile\n\n    :\nreturn\n:\n \nList\n \nof\n \nregions\n\n\n\nget_parameter_file\n(\nself\n)\n\n\n\nget_parameter_path\n(\nself\n)\n\n\n\nget_password\n(\nself\n)\n\n\n\nget_project\n(\nself\n)\n\n\n\nget_resources\n(\nself\n,\n \nstackname\n,\n \nregion\n,\n \ninclude_stacks\n=\nFalse\n)\n\n    \nGiven\n \na\n \nstackname\n,\n \nand\n \nregion\n \nfunction\n \nreturns\n \nthe\n \nlist\n \nof\n \ndictionary\n \nitems\n,\n \nwhere\n \neach\n \nitem\n\n    \nconsist\n \nof\n \nlogicalId\n,\n \nphysicalId\n \nand\n \nresourceType\n \nof\n \nthe\n \naws\n \nresource\n \nassociated\n\n    \nwith\n \nthe\n \nstack.\n\n\n    :\nparam\n \ninclude_stacks\n:\n \n    \n:\nparam\n \nstackname\n: \nCloudFormation\n \nstack\n \nname\n\n    :\nparam\n \nregion\n: \nAWS\n \nregion\n\n    :\nreturn\n:\n \nList\n \nof\n \nobjects\n \nin\n \nthe\n \nfollowing\n \nformat\n\n         \n[\n\n             \n{\n\n                 \n'logicalId'\n:\n \n'string'\n,\n\n                 \n'physicalId'\n:\n \n'string'\n,\n\n                 \n'resourceType'\n:\n \n'String'\n\n             \n},\n\n         \n]\n\n\n\nget_resources_helper\n(\nself\n,\n \nstackname\n,\n \nregion\n,\n \nl_resources\n,\n \ninclude_stacks\n)\n\n    \nThis\n \nis\n \na\n \nhelper\n \nfunction\n \nof\n \nget_resources\n \nfunction\n.\n \nCheck\n \nget_resources\n \nfunction\n \nfor\n \ndetails\n.\n\n\n\nget_s3_url\n(\nself\n,\n \nkey\n)\n\n    \nReturns\n \nS3\n \nurl\n \nof\n \na\n \ngiven\n \nobject.\n\n\n    :\nparam\n \nkey\n: \nName\n \nof\n \nthe\n \nobject\n \nwhose\n \nS3\n \nurl\n \nis\n \nbeing\n \nreturned\n\n    :\nreturn\n:\n \nS3\n \nurl\n \nof\n \nthe\n \ngiven\n \nkey\n\n\n\nget_s3bucket\n(\nself\n)\n\n\n\nget_s3contents\n(\nurl\n)\n\n\n\nget_stackstatus\n(\nself\n,\n \ntestdata_list\n,\n \nspeed\n)\n\n    \nGiven\n \na\n \nlist\n \nof\n \nTestData\n \nobjects\n,\n \nthis\n \nfunction\n \nchecks\n \nthe\n \nstack\n \nstatus\n\n    \nof\n \neach\n \nCloudFormation\n \nstack\n \nand\n \nupdates\n \nthe\n \ncorresponding\n \nTestData\n \nobject\n\n    \nwith\n \nthe\n \nstatus.\n\n\n    :\nparam\n \ntestdata_list\n: \nList\n \nof\n \nTestData\n \nobject\n\n    :\nparam\n \nspeed\n: \nInterval\n \n(\nin\n \nseconds\n)\n \nin\n \nwhich\n \nthe\n \nstatus\n \nhas\n \nto\n \nbe\n \nchecked\n \nin\n \nloop\n\n\n\nget_template_file\n(\nself\n)\n\n\n\nget_template_path\n(\nself\n)\n\n\n\nget_test_region\n(\nself\n)\n\n\n\nif_stackexists\n(\nself\n,\n \nstackname\n,\n \nregion\n)\n\n    \nThis\n \nfunction\n \nchecks\n \nif\n \na\n \nstack\n \nexist\n \nwith\n \nthe\n \ngiven\n \nstack\n \nname\n.\n\n    \nReturns\n \n\"yes\"\n \nif\n \nexist\n,\n \notherwise\n \n\"no\"\n.\n\n\n    \n:\nparam\n \nstackname\n: \nStack\n \nname\n\n    :\nparam\n \nregion\n: \nAWS\n \nregion\n\n\n    :\nreturn\n:\n \n\"yes\"\n \nif\n \nstack\n \nexist\n,\n \notherwise\n \n\"no\"\n\n\n\nparse_stack_info\n(\nself\n,\n \nstack_name\n)\n\n    \nReturns\n \na\n \ndictionary\n \nobject\n \ncontaining\n \nthe\n \nregion\n \nand\n \nstack\n \nname.\n\n\n    :\nparam\n \nstack_name\n: \nFull\n \nstack\n \nname\n \narn\n\n    :\nreturn\n:\n \nDictionary\n \nobject\n \ncontaining\n \nthe\n \nregion\n \nand\n \nstack\n \nname\n\n\n\nregxfind\n(\nre_object\n,\n \ndata_line\n)\n\n    \nReturns\n \nthe\n \nmatching\n \nstring\n.\n\n\n    \n:\nparam\n \nre_object\n: \nRegex\n \nobject\n\n    :\nparam\n \ndata_line\n: \nString\n \nto\n \nbe\n \nsearched\n\n\n    :\nreturn\n:\n \nMatching\n \nString\n \nif\n \nfound\n,\n \notherwise\n \nreturn\n \n'Not-found'\n\n\n\nset_capabilities\n(\nself\n,\n \nability\n)\n\n\n\nset_config\n(\nself\n,\n \nconfig_yml\n)\n\n\n\nset_default_region\n(\nself\n,\n \nregion\n)\n\n\n\nset_docleanup\n(\nself\n,\n \ncleanup_value\n)\n\n\n\nset_parameter_file\n(\nself\n,\n \nparameter\n)\n\n\n\nset_parameter_path\n(\nself\n,\n \nparameter\n)\n\n\n\nset_password\n(\nself\n,\n \npassword\n)\n\n\n\nset_project\n(\nself\n,\n \nproject\n)\n\n\n\nset_s3bucket\n(\nself\n,\n \nbucket\n)\n\n\n\nset_template_file\n(\nself\n,\n \ntemplate\n)\n\n\n\nset_template_path\n(\nself\n,\n \ntemplate\n)\n\n\n\nset_test_region\n(\nself\n,\n \nregion_list\n)\n\n\n\nstackcheck\n(\nself\n,\n \nstack_id\n)\n\n    \nGiven\n \nthe\n \nstack\n \nid\n,\n \nthis\n \nfunction\n \nreturns\n \nthe\n \nstatus\n \nof\n \nthe\n \nstack\n \nas\n\n    \na\n \nlist\n \nwith\n \nstack\n \nname\n,\n \nregion\n,\n \nand\n \nstatus\n \nas\n \nlist\n \nitems\n,\n \nin\n \nthe\n \nrespective\n\n    \norder.\n\n\n    :\nparam\n \nstack_id\n: \nCloudFormation\n \nstack\n \nid\n\n\n    :\nreturn\n:\n \nList\n \ncontaining\n \nthe\n \nstack\n \nname\n,\n \nregion\n \nand\n \nstack\n \nstatus\n \nin\n \nthe\n\n        \nrespective\n \norder\n.\n\n\n\nstackcreate\n(\nself\n,\n \ntaskcat_cfg\n,\n \ntest_list\n,\n \nsprefix\n)\n\n    \nThis\n \nfunction\n \ncreates\n \nCloudFormation\n \nstack\n \nfor\n \nthe\n \ngiven\n \ntests.\n\n\n    :\nparam\n \ntaskcat_cfg\n: \nTaskCat\n \nconfig\n \nas\n \nyaml\n \nobject\n\n    :\nparam\n \ntest_list\n: \nList\n \nof\n \ntests\n\n    :\nparam\n \nsprefix\n: \nSpecial\n \nprefix\n \nas\n \nstring\n.\n \nPurpose\n \nof\n \nthis\n \nparam\n \nis\n \nto\n \nuse\n \nit\n \nfor\n \ntagging\n\n        \nthe\n \nstack.\n\n\n    :\nreturn\n:\n \nList\n \nof\n \nTestData\n \nobjects\n\n\n\nstackdelete\n(\nself\n,\n \ntestdata_list\n)\n\n    \nThis\n \nfunction\n \ndeletes\n \nthe\n \nCloudFormation\n \nstacks\n \nof\n \nthe\n \ngiven\n \ntests.\n\n\n    :\nparam\n \ntestdata_list\n: \nList\n \nof\n \nTestData\n \nobjects\n\n\n\nstage_in_s3\n(\nself\n,\n \ntaskcat_cfg\n)\n\n    \nUpload\n \ntemplates\n \nand\n \nother\n \nartifacts\n \nto\n \ns3\n.\n\n\n    \nThis\n \nfunction\n \ncreates\n \nthe\n \ns3\n \nbucket\n \nwith\n \nname\n \nprovided\n \nin\n \nthe\n \nconfig\n \nyml\n \nfile\n.\n \nIf\n\n    \nno\n \nbucket\n \nname\n \nprovided\n,\n \nit\n \ncreates\n \nthe\n \ns3\n \nbucket\n \nusing\n \nproject\n \nname\n \nprovided\n \nin\n\n    \nconfig\n \nyml\n \nfile\n.\n \nAnd\n \nuploads\n \nthe\n \ntemplates\n \nand\n \nother\n \nartifacts\n \nto\n \nthe\n \ns3\n \nbucket.\n\n\n    :\nparam\n \ntaskcat_cfg\n: \nTaskcat\n \nconfiguration\n \nprovided\n \nin\n \nyml\n \nfile\n\n\n\nvalidate_json\n(\nself\n,\n \njsonin\n)\n\n    \nThis\n \nfunction\n \nvalidates\n \nthe\n \ngiven\n \nJSON.\n\n\n    :\nparam\n \njsonin\n: \nJson\n \nobject\n \nto\n \nbe\n \nvalidated\n\n\n    :\nreturn\n:\n \nTRUE\n \nif\n \ngiven\n \nJson\n \nis\n \nvalid\n,\n \nFALSE\n \notherwise\n.\n\n\n\nvalidate_parameters\n(\nself\n,\n \ntaskcat_cfg\n,\n \ntest_list\n)\n\n    \nThis\n \nfunction\n \nvalidates\n \nthe\n \nparameters\n \nfile\n \nof\n \nthe\n \nCloudFormation\n \ntemplate.\n\n\n    :\nparam\n \ntaskcat_cfg\n: \nTaskCat\n \nconfig\n \nyaml\n \nobject\n\n    :\nparam\n \ntest_list\n: \nList\n \nof\n \ntests\n\n\n    :\nreturn\n:\n \nTRUE\n \nif\n \nthe\n \nparameters\n \nfile\n \nis\n \nvalid\n,\n \nelse\n \nFALSE\n\n\n\nvalidate_template\n(\nself\n,\n \ntaskcat_cfg\n,\n \ntest_list\n)\n\n    \nReturns\n \nTRUE\n \nif\n \nall\n \nthe\n \ntemplate\n \nfiles\n \nare\n \nvalid\n,\n \notherwise\n \nFALSE.\n\n\n    :\nparam\n \ntaskcat_cfg\n: \nTaskCat\n \nconfig\n \nobject\n\n    :\nparam\n \ntest_list\n: \nList\n \nof\n \ntests\n\n\n    :\nreturn\n:\n \nTRUE\n \nif\n \ntemplates\n \nare\n \nvalid\n,\n \nelse\n \nFALSE\n\n\n\nvalidate_yaml\n(\nself\n,\n \nyaml_file\n)\n\n    \nThis\n \nfunction\n \nvalidates\n \nthe\n \ngiven\n \nyaml\n \nfile.\n\n\n    :\nparam\n \nyaml_file\n: \nYaml\n \nfile\n \nname\n\n\n\nwelcome\n(\nself\n,\n \nprog_name\n=\n'taskcat.io'\n)\n\n\n\nwrite_logs\n(\nself\n,\n \nstack_id\n,\n \nlogpath\n)\n\n    \nThis\n \nfunction\n \nwrites\n \nthe\n \nevent\n \nlogs\n \nof\n \nthe\n \ngiven\n \nstack\n \nand\n \nall\n \nthe\n \nchild\n \nstacks\n \nto\n \na\n \ngiven\n \nfile.\n\n    :\nparam\n \nstack_id\n: \nStack\n \nId\n\n    :\nparam\n \nlogpath\n: \nLog\n \nfile\n \npath\n\n    :\nreturn\n:\n\n\n\nInstance\n \nvariables\n\n\n------------------\n\n\nbanner\n\n\n\ncapabilities\n\n\n\nconfig\n\n\n\ndefult_region\n\n\n\ninterface\n\n\n\nnametag\n\n\n\nparameter_path\n\n\n\nproject\n\n\n\nrun_cleanup\n\n\n\ns3bucket\n\n\n\ntemplate_path\n\n\n\ntest_region\n\n\n\nverbose",
            "title": "Pip Module (taskcat)"
        },
        {
            "location": "/pip/taskcat.m/#module-taskcat",
            "text": "",
            "title": "Module taskcat"
        },
        {
            "location": "/pip/taskcat.m/#classes",
            "text": "TaskCat \n    Ancestors (in MRO)\n    ------------------\n    taskcat.TaskCat\n    builtins.object    1\n  2\n  3\n  4\n  5\n  6\n  7\n  8\n  9\n 10\n 11\n 12\n 13\n 14\n 15\n 16\n 17\n 18\n 19\n 20\n 21\n 22\n 23\n 24\n 25\n 26\n 27\n 28\n 29\n 30\n 31\n 32\n 33\n 34\n 35\n 36\n 37\n 38\n 39\n 40\n 41\n 42\n 43\n 44\n 45\n 46\n 47\n 48\n 49\n 50\n 51\n 52\n 53\n 54\n 55\n 56\n 57\n 58\n 59\n 60\n 61\n 62\n 63\n 64\n 65\n 66\n 67\n 68\n 69\n 70\n 71\n 72\n 73\n 74\n 75\n 76\n 77\n 78\n 79\n 80\n 81\n 82\n 83\n 84\n 85\n 86\n 87\n 88\n 89\n 90\n 91\n 92\n 93\n 94\n 95\n 96\n 97\n 98\n 99\n100\n101\n102\n103\n104\n105\n106\n107\n108\n109\n110\n111\n112\n113\n114\n115\n116\n117\n118\n119\n120\n121\n122\n123\n124\n125\n126\n127\n128\n129\n130\n131\n132\n133\n134\n135\n136\n137\n138\n139\n140\n141\n142\n143\n144\n145\n146\n147\n148\n149\n150\n151\n152\n153\n154\n155\n156\n157\n158\n159\n160\n161\n162\n163\n164\n165\n166\n167\n168\n169\n170\n171\n172\n173\n174\n175\n176\n177\n178\n179\n180\n181\n182\n183\n184\n185\n186\n187\n188\n189\n190\n191\n192\n193\n194\n195\n196\n197\n198\n199\n200\n201\n202\n203\n204\n205\n206\n207\n208\n209\n210\n211\n212\n213\n214\n215\n216\n217\n218\n219\n220\n221\n222\n223\n224\n225\n226\n227\n228\n229\n230\n231\n232\n233\n234\n235\n236\n237\n238\n239\n240\n241\n242\n243\n244\n245\n246\n247\n248\n249\n250\n251\n252\n253\n254\n255\n256\n257\n258\n259\n260\n261\n262\n263\n264\n265\n266\n267\n268\n269\n270\n271\n272\n273\n274\n275\n276\n277\n278\n279\n280\n281\n282\n283\n284\n285\n286\n287\n288\n289\n290\n291\n292\n293\n294\n295\n296\n297\n298\n299\n300\n301\n302\n303\n304\n305\n306\n307\n308\n309\n310\n311\n312 Static   methods  --------------  __init__ ( self ,   nametag = '[taskcat]' ) \n     Initialize   self .    See   help ( type ( self ))   for   accurate   signature .  aws_api_init ( self ,   args ) \n     This   function   reads   the   AWS   credentials   from   various   sources   to   ensure \n     that   the   client   has   right   credentials   defined   to   successfully   run \n     TaskCat   against   an   AWS   account. \n\n    : param   args :  Command   line   arguments   for   AWS   credentials .   It   could   be \n         either   profile   name ,   access   key   and   secret   key   or   none .  cleanup ( self ,   testdata_list ,   speed ) \n     This   function   deletes   the   CloudFormation   stacks   of   the   given   tests. \n\n    : param   testdata_list :  List   of   TestData   objects \n    : param   speed :  Interval   ( in   seconds )   in   which   the   status   has   to   be   checked \n         while   deleting   the   stacks .  collect_resources ( self ,   testdata_list ,   logpath ) \n     This   function   collects   the   AWS   resources   information   created   by   the \n     CloudFormation   stack   for   generating   the   report. \n\n    : param   testdata_list :  List   of   TestData   object \n    : param   logpath :  Log   file   path  createcfnlogs ( self ,   testdata_list ,   logpath ) \n     This   function   creates   the   CloudFormation   log   files. \n\n    : param   testdata_list :  List   of   TestData   objects \n    : param   logpath :  Log   file   path \n    : return :  createreport ( self ,   testdata_list ,   filename ) \n     This   function   creates   the   test   report. \n\n    : param   testdata_list :  List   of   TestData   objects \n    : param   filename :  Report   file   name \n    : return :  deep_cleanup ( self ,   testdata_list ) \n     This   function   deletes   the   AWS   resources   which   were   not   deleted \n     by   deleting   CloudFormation   stacks. \n\n    : param   testdata_list :  List   of   TestData   objects  define_tests ( self ,   yamlc ,   test ) \n     This   function   reads   the   given   test   config   yaml   object   and   defines \n     the   tests   as   per   the   given   config   object. \n\n    : param   yamlc :  TaskCat   config   yaml   object \n    : param   test :  Test   scenarios  genpassword ( self ,   pass_length ,   pass_type ) \n     Returns   a   password   of   given   length   and   type. \n\n    : param   pass_length :  Length   of   the   desired   password \n    : param   pass_type :  Type   of   the   desired   password   -   String   only   OR   Alphanumeric \n         *   A   =   AlphaNumeric ,   Example   'vGceIP8EHC' \n     : return :   Password   of   given   length   and   type  genreport ( self ,   testdata_list ,   dashboard_filename ) \n     This   function   generates   the   test   report. \n\n    : param   testdata_list :  List   of   TestData   objects \n    : param   dashboard_filename :  Report   file   name  get_all_resources ( self ,   stackids ,   region ) \n     Given   a   list   of   stackids ,   function   returns   the   list   of   dictionary   items ,   where   each \n     item   consist   of   stackId   and   the   resources   associated   with   that   stack. \n\n    : param   stackids :  List   of   Stack   Ids \n    : param   region :  AWS   region \n    : return :   A   list   of   dictionary   object   in   the   following   format \n             [ \n                 { \n                     'stackId' :   'string' , \n                     'resources' :   [ \n                         { \n                            'logicalId' :   'string' , \n                            'physicalId' :   'string' , \n                            'resourceType' :   'String' \n                         }, \n                     ] \n                 }, \n             ]  get_available_azs ( region ,   count ) \n     Returns   a   list   of   availability   zones   in   a   given   region. \n\n    : param   region :  Region   for   the   availability   zones \n    : param   count :  Minimum   number   of   availability   zones   needed \n\n    : return :   List   of   availability   zones   in   a   given   region  get_capabilities ( self )  get_cfnlogs ( stackname ,   region ) \n     This   function   returns   the   event   logs   of   the   given   stack   in   a   specific   format. \n    : param   stackname :  Name   of   the   stack \n    : param   region :  Region   stack   belongs   to \n    : return :   Event   logs   of   the   stack  get_config ( self )  get_default_region ( self )  get_docleanup ( self )  get_global_region ( self ,   yamlcfg ) \n     Returns   a   list   of   regions   defined   under   global   region   in   the   yml   config   file. \n\n    : param   yamlcfg :  Content   of   the   yml   config   file \n    : return :   List   of   regions  get_parameter_file ( self )  get_parameter_path ( self )  get_password ( self )  get_project ( self )  get_resources ( self ,   stackname ,   region ,   include_stacks = False ) \n     Given   a   stackname ,   and   region   function   returns   the   list   of   dictionary   items ,   where   each   item \n     consist   of   logicalId ,   physicalId   and   resourceType   of   the   aws   resource   associated \n     with   the   stack. \n\n    : param   include_stacks :  \n     : param   stackname :  CloudFormation   stack   name \n    : param   region :  AWS   region \n    : return :   List   of   objects   in   the   following   format \n          [ \n              { \n                  'logicalId' :   'string' , \n                  'physicalId' :   'string' , \n                  'resourceType' :   'String' \n              }, \n          ]  get_resources_helper ( self ,   stackname ,   region ,   l_resources ,   include_stacks ) \n     This   is   a   helper   function   of   get_resources   function .   Check   get_resources   function   for   details .  get_s3_url ( self ,   key ) \n     Returns   S3   url   of   a   given   object. \n\n    : param   key :  Name   of   the   object   whose   S3   url   is   being   returned \n    : return :   S3   url   of   the   given   key  get_s3bucket ( self )  get_s3contents ( url )  get_stackstatus ( self ,   testdata_list ,   speed ) \n     Given   a   list   of   TestData   objects ,   this   function   checks   the   stack   status \n     of   each   CloudFormation   stack   and   updates   the   corresponding   TestData   object \n     with   the   status. \n\n    : param   testdata_list :  List   of   TestData   object \n    : param   speed :  Interval   ( in   seconds )   in   which   the   status   has   to   be   checked   in   loop  get_template_file ( self )  get_template_path ( self )  get_test_region ( self )  if_stackexists ( self ,   stackname ,   region ) \n     This   function   checks   if   a   stack   exist   with   the   given   stack   name . \n     Returns   \"yes\"   if   exist ,   otherwise   \"no\" . \n\n     : param   stackname :  Stack   name \n    : param   region :  AWS   region \n\n    : return :   \"yes\"   if   stack   exist ,   otherwise   \"no\"  parse_stack_info ( self ,   stack_name ) \n     Returns   a   dictionary   object   containing   the   region   and   stack   name. \n\n    : param   stack_name :  Full   stack   name   arn \n    : return :   Dictionary   object   containing   the   region   and   stack   name  regxfind ( re_object ,   data_line ) \n     Returns   the   matching   string . \n\n     : param   re_object :  Regex   object \n    : param   data_line :  String   to   be   searched \n\n    : return :   Matching   String   if   found ,   otherwise   return   'Not-found'  set_capabilities ( self ,   ability )  set_config ( self ,   config_yml )  set_default_region ( self ,   region )  set_docleanup ( self ,   cleanup_value )  set_parameter_file ( self ,   parameter )  set_parameter_path ( self ,   parameter )  set_password ( self ,   password )  set_project ( self ,   project )  set_s3bucket ( self ,   bucket )  set_template_file ( self ,   template )  set_template_path ( self ,   template )  set_test_region ( self ,   region_list )  stackcheck ( self ,   stack_id ) \n     Given   the   stack   id ,   this   function   returns   the   status   of   the   stack   as \n     a   list   with   stack   name ,   region ,   and   status   as   list   items ,   in   the   respective \n     order. \n\n    : param   stack_id :  CloudFormation   stack   id \n\n    : return :   List   containing   the   stack   name ,   region   and   stack   status   in   the \n         respective   order .  stackcreate ( self ,   taskcat_cfg ,   test_list ,   sprefix ) \n     This   function   creates   CloudFormation   stack   for   the   given   tests. \n\n    : param   taskcat_cfg :  TaskCat   config   as   yaml   object \n    : param   test_list :  List   of   tests \n    : param   sprefix :  Special   prefix   as   string .   Purpose   of   this   param   is   to   use   it   for   tagging \n         the   stack. \n\n    : return :   List   of   TestData   objects  stackdelete ( self ,   testdata_list ) \n     This   function   deletes   the   CloudFormation   stacks   of   the   given   tests. \n\n    : param   testdata_list :  List   of   TestData   objects  stage_in_s3 ( self ,   taskcat_cfg ) \n     Upload   templates   and   other   artifacts   to   s3 . \n\n     This   function   creates   the   s3   bucket   with   name   provided   in   the   config   yml   file .   If \n     no   bucket   name   provided ,   it   creates   the   s3   bucket   using   project   name   provided   in \n     config   yml   file .   And   uploads   the   templates   and   other   artifacts   to   the   s3   bucket. \n\n    : param   taskcat_cfg :  Taskcat   configuration   provided   in   yml   file  validate_json ( self ,   jsonin ) \n     This   function   validates   the   given   JSON. \n\n    : param   jsonin :  Json   object   to   be   validated \n\n    : return :   TRUE   if   given   Json   is   valid ,   FALSE   otherwise .  validate_parameters ( self ,   taskcat_cfg ,   test_list ) \n     This   function   validates   the   parameters   file   of   the   CloudFormation   template. \n\n    : param   taskcat_cfg :  TaskCat   config   yaml   object \n    : param   test_list :  List   of   tests \n\n    : return :   TRUE   if   the   parameters   file   is   valid ,   else   FALSE  validate_template ( self ,   taskcat_cfg ,   test_list ) \n     Returns   TRUE   if   all   the   template   files   are   valid ,   otherwise   FALSE. \n\n    : param   taskcat_cfg :  TaskCat   config   object \n    : param   test_list :  List   of   tests \n\n    : return :   TRUE   if   templates   are   valid ,   else   FALSE  validate_yaml ( self ,   yaml_file ) \n     This   function   validates   the   given   yaml   file. \n\n    : param   yaml_file :  Yaml   file   name  welcome ( self ,   prog_name = 'taskcat.io' )  write_logs ( self ,   stack_id ,   logpath ) \n     This   function   writes   the   event   logs   of   the   given   stack   and   all   the   child   stacks   to   a   given   file. \n    : param   stack_id :  Stack   Id \n    : param   logpath :  Log   file   path \n    : return :  Instance   variables  ------------------  banner  capabilities  config  defult_region  interface  nametag  parameter_path  project  run_cleanup  s3bucket  template_path  test_region  verbose",
            "title": "Classes"
        },
        {
            "location": "/pip/sweeper.m/",
            "text": "Module sweeper\n\u00b6\n\n\nClasses\n\u00b6\n\n\nSweeper \n    Ancestors (in MRO)\n    ------------------\n    sweeper.Sweeper\n    builtins.object\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\nStatic methods\n\n\n--------------\n\n__init__(self, session)\n    Initialize self.  See help(type(self)) for accurate signature.\n\ndelete_all(self, stack_list)\n\n\nInstance variables\n\n\n------------------\n\nsession",
            "title": "Sub Module (taskcat.sweeper)"
        },
        {
            "location": "/pip/sweeper.m/#module-sweeper",
            "text": "",
            "title": "Module sweeper"
        },
        {
            "location": "/pip/sweeper.m/#classes",
            "text": "Sweeper \n    Ancestors (in MRO)\n    ------------------\n    sweeper.Sweeper\n    builtins.object   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10 Static methods  -------------- \n__init__(self, session)\n    Initialize self.  See help(type(self)) for accurate signature.\n\ndelete_all(self, stack_list) Instance variables  ------------------ \nsession",
            "title": "Classes"
        }
    ]
}