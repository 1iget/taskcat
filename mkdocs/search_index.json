{
    "docs": [
        {
            "location": "/",
            "text": "taskcat\n\n\n\n\nversion = '0.1.76'\nThis program requires python3 \n\n\n\n\nCurrently in beta release\n\n\nPlease report bugs here https://github.com/aws-quickstart/taskcat/issues\n\n\nWhat is taskcat?\n\n\ntaskcat is a python Class that helps deploy your cloudformation templates in multiple regions. You can use taskcat by importing the module and creating a taskcat object. \n\n\nSetting up Test Cases\n\n\n\n\nStep 1 Define your test in the config.yml\n\n\nStep 2 Build a json input file for your cloudformation template.\n\n\n\n\nStep 1 Creating a config.ymal\n\n\nYou can generate a sample config.ymal by running \ntaskcat -ey\n\nThe followup's command will create a sample config.yml\n\n\n./taskcat -ey | egrep -v '#|^$'  >config.yml\n\n\n\n\nOpen the config.yml file with and editor and update the filenames to match your need. \n\n\nExample of config.yml\n\n\nglobal:\n  owner: owner@company.com\n  project: sample-cloudformation-project <- Must match the root directory of project (usually the name of git repo)\n  #s3bucket: projectx-templates <- (Optional) Only needed if you want to use a specific bucket \n  regions:\n    - us-east-1\n    - us-east-2\n    - us-west-1\n    - us-west-2\ntests:\n  # The following test will test in both us-west-1 and us-east-1 using sample-cloudformation-input.json as inputs\n  senario-1:\n    parameter_input: sample-cloudformation-input.json\n    regions:\n      - us-west-1\n      - us-east-1\n    template_file: sample-cloudformation-project-withvpc.template\n  # The following test will test in both all 4 region defined in the global region section using sample-cloudformation-input.json as inputs\n      senario-all-regions:\n    parameter_input: sample-cloudformation-input.jsonon\n    template_file: sample-cloudformation-project-withvpc.template\n\n\n\nExample of project directory structure\n\n\nsample-cloudformation-project/\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ci\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config.yml <- This the config file that will hold all the test definitions \n\u2502\u00a0\u00a0 \u2514\u2500\u2500  sample-cloudformation-input.json <-  This file contain input that will pass in during stack creation (See auto parms for more info)\n    \u251c\u2500\u2500 scripts\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 userdata.sh <- If you have userdata scripts you can load then in the scripts directory\n    \u251c\u2500\u2500 submodules  <- If you have git submodules you can load them in the submodules directory\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 quickstart-aws-vpc\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 templates\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 aws-vpc.template\n    \u2514\u2500\u2500 templates\n        \u251c\u2500\u2500 sample-cloudformation-project-novpc.template \n        \u2514\u2500\u2500 sample-cloudformation-project-withvpc.template <- Second version on template that will create a vpc with the worklo    ad\n\n\n\nStep 2 Building a json input file\n\n\nThe example below shows an input file for a stack that requires four parameters \nKeyPair\n,\nInstanceType\n, \nAvailablityZones\n and \nPassword\n\n\nNote: you can auto generate values at runtime using special tokens (see example below).\n\n\n\n\nThe following json will evaluate\n\n\n\n\nFrom:\n\n\n[\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"$[taskcat_genaz_2]\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"$[taskcat_genpass_8A]\"\n    }, \n]\n\n\n\nTo:\n\n\n[\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"us-east-1a, us-east1b\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"tI8zN3iX8\"\n    }, \n]\n\n\n\nMore information on Auto-generated stack inputs\n\n\n(Passwords)\n\n\nValue that matches the following pattern will be replaced\n\n\n\n\nParameters must start with $[\n\n\nParameters must end with ]\n\n\ngenpass in invoked when _genpass_X is found\n\n\nX is lengeth of the string\n\n\n\n\n(Optionally - you can specify the type of password by adding A or S)\n\n\n\n\nA aplha-numeric passwords\n\n\nS passwords with special characters\n\n\n\n\n\n\nExample: $[taskcat_genpass_8A]\nGenerates: \ntI8zN3iX8\n\nExample: $[taskcat_genpass_8S]\nGenerates: mA5@cB5!\n\n\n\n\n(Availablity Zones)\n\n\nValue that matches the following pattern will be replaced\n\n\n\n\nParameters must start with $[\n\n\nParameters must end with ]\n\n\ngenaz in invoked when _genaz_X is found\n\n\nA number of AZ's will be selected from the region the stack is attempting to launch\n\n\n\n\n\n\nExample: $[taskcat_genaz_2]\n\nGenerates: us-east-1a, us-east-2b\n(if the region is us-east-1)\n\n\n\n\nInstalling taskcat\n\n\nInstalling taskcat (Option 1)\n\n\n\n\nPrerequisites: Python 3.5+ and pip\n\n\n\n\ncurl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| python -E\n\n\n\nInstalling taskcat via docker (Option 2)\n\n\n\n\nPrerequisites: docker\n\n\n\n\ncurl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| sudo python -E\n\n\n\n\n\nNote: (If you do not have root privileges taskcat will install in the current directory)\n\n\n\n\nRun taskcat\n\n\nIf you have AWS credentials sourced \n\n\n taskcat -c sample-cloudformation-project/ci/config.yml\n\n\n\nIf you need to pass ACCESS and SECRET keys\n\n\ntaskcat -c sample-cloudformation-project/ci/config.yml -A YOUR_ACCESS_KEY -S YOUR_SECRET_KEY\n\n\n\nIf you want to use a different account or profile\n\n\ntaskcat -c sample-cloudformation-project/ci/config.yml -P boto-profile-name",
            "title": "Home"
        },
        {
            "location": "/#taskcat",
            "text": "version = '0.1.76'\nThis program requires python3",
            "title": "taskcat"
        },
        {
            "location": "/#currently-in-beta-release",
            "text": "Please report bugs here https://github.com/aws-quickstart/taskcat/issues",
            "title": "Currently in beta release"
        },
        {
            "location": "/#what-is-taskcat",
            "text": "taskcat is a python Class that helps deploy your cloudformation templates in multiple regions. You can use taskcat by importing the module and creating a taskcat object.",
            "title": "What is taskcat?"
        },
        {
            "location": "/#setting-up-test-cases",
            "text": "Step 1 Define your test in the config.yml  Step 2 Build a json input file for your cloudformation template.",
            "title": "Setting up Test Cases"
        },
        {
            "location": "/#step-1-creating-a-configymal",
            "text": "You can generate a sample config.ymal by running  taskcat -ey \nThe followup's command will create a sample config.yml  ./taskcat -ey | egrep -v '#|^$'  >config.yml  Open the config.yml file with and editor and update the filenames to match your need.",
            "title": "Step 1 Creating a config.ymal"
        },
        {
            "location": "/#example-of-configyml",
            "text": "global:\n  owner: owner@company.com\n  project: sample-cloudformation-project <- Must match the root directory of project (usually the name of git repo)\n  #s3bucket: projectx-templates <- (Optional) Only needed if you want to use a specific bucket \n  regions:\n    - us-east-1\n    - us-east-2\n    - us-west-1\n    - us-west-2\ntests:\n  # The following test will test in both us-west-1 and us-east-1 using sample-cloudformation-input.json as inputs\n  senario-1:\n    parameter_input: sample-cloudformation-input.json\n    regions:\n      - us-west-1\n      - us-east-1\n    template_file: sample-cloudformation-project-withvpc.template\n  # The following test will test in both all 4 region defined in the global region section using sample-cloudformation-input.json as inputs\n      senario-all-regions:\n    parameter_input: sample-cloudformation-input.jsonon\n    template_file: sample-cloudformation-project-withvpc.template",
            "title": "Example of config.yml"
        },
        {
            "location": "/#example-of-project-directory-structure",
            "text": "sample-cloudformation-project/\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ci\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config.yml <- This the config file that will hold all the test definitions \n\u2502\u00a0\u00a0 \u2514\u2500\u2500  sample-cloudformation-input.json <-  This file contain input that will pass in during stack creation (See auto parms for more info)\n    \u251c\u2500\u2500 scripts\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 userdata.sh <- If you have userdata scripts you can load then in the scripts directory\n    \u251c\u2500\u2500 submodules  <- If you have git submodules you can load them in the submodules directory\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 quickstart-aws-vpc\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 templates\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 aws-vpc.template\n    \u2514\u2500\u2500 templates\n        \u251c\u2500\u2500 sample-cloudformation-project-novpc.template \n        \u2514\u2500\u2500 sample-cloudformation-project-withvpc.template <- Second version on template that will create a vpc with the worklo    ad",
            "title": "Example of project directory structure"
        },
        {
            "location": "/#step-2-building-a-json-input-file",
            "text": "The example below shows an input file for a stack that requires four parameters  KeyPair , InstanceType ,  AvailablityZones  and  Password  Note: you can auto generate values at runtime using special tokens (see example below).   The following json will evaluate",
            "title": "Step 2 Building a json input file"
        },
        {
            "location": "/#from",
            "text": "[\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"$[taskcat_genaz_2]\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"$[taskcat_genpass_8A]\"\n    }, \n]",
            "title": "From:"
        },
        {
            "location": "/#to",
            "text": "[\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"us-east-1a, us-east1b\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"tI8zN3iX8\"\n    }, \n]",
            "title": "To:"
        },
        {
            "location": "/#more-information-on-auto-generated-stack-inputs",
            "text": "",
            "title": "More information on Auto-generated stack inputs"
        },
        {
            "location": "/#passwords",
            "text": "Value that matches the following pattern will be replaced   Parameters must start with $[  Parameters must end with ]  genpass in invoked when _genpass_X is found  X is lengeth of the string   (Optionally - you can specify the type of password by adding A or S)   A aplha-numeric passwords  S passwords with special characters    Example: $[taskcat_genpass_8A]\nGenerates:  tI8zN3iX8 \nExample: $[taskcat_genpass_8S]\nGenerates: mA5@cB5!",
            "title": "(Passwords)"
        },
        {
            "location": "/#availablity-zones",
            "text": "Value that matches the following pattern will be replaced   Parameters must start with $[  Parameters must end with ]  genaz in invoked when _genaz_X is found  A number of AZ's will be selected from the region the stack is attempting to launch    Example: $[taskcat_genaz_2] \nGenerates: us-east-1a, us-east-2b\n(if the region is us-east-1)",
            "title": "(Availablity Zones)"
        },
        {
            "location": "/#installing-taskcat",
            "text": "",
            "title": "Installing taskcat"
        },
        {
            "location": "/#installing-taskcat-option-1",
            "text": "Prerequisites: Python 3.5+ and pip   curl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| python -E",
            "title": "Installing taskcat (Option 1)"
        },
        {
            "location": "/#installing-taskcat-via-docker-option-2",
            "text": "Prerequisites: docker   curl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| sudo python -E   Note: (If you do not have root privileges taskcat will install in the current directory)",
            "title": "Installing taskcat via docker (Option 2)"
        },
        {
            "location": "/#run-taskcat",
            "text": "If you have AWS credentials sourced    taskcat -c sample-cloudformation-project/ci/config.yml  If you need to pass ACCESS and SECRET keys  taskcat -c sample-cloudformation-project/ci/config.yml -A YOUR_ACCESS_KEY -S YOUR_SECRET_KEY  If you want to use a different account or profile  taskcat -c sample-cloudformation-project/ci/config.yml -P boto-profile-name",
            "title": "Run taskcat"
        },
        {
            "location": "/pip/taskcat.m/",
            "text": "Module taskcat\n\n\nClasses\n\n\nTaskCat \n    Ancestors (in MRO)\n    ------------------\n    taskcat.TaskCat\n    builtins.object\n\n\nStatic methods\n--------------\n__init__(self, nametag='[taskcat]')\n    Initialize self.  See help(type(self)) for accurate signature.\n\naws_api_init(self, args)\n    This function reads the AWS credentials from various sources to ensure\n    that the client has right credentials defined to successfully run\n    TaskCat against an AWS account.\n\n    :param args: Command line arguments for AWS credentials. It could be\n        either profile name, access key and secret key or none.\n\ncleanup(self, testdata_list, speed)\n    This function deletes the CloudFormation stacks of the given tests.\n\n    :param testdata_list: List of TestData objects\n    :param speed: Interval (in seconds) in which the status has to be checked\n        while deleting the stacks.\n\ncollect_resources(self, testdata_list, logpath)\n    This function collects the AWS resources information created by the\n    CloudFormation stack for generating the report.\n\n    :param testdata_list: List of TestData object\n    :param logpath: Log file path\n\ncreatecfnlogs(self, testdata_list, logpath)\n    This function creates the CloudFormation log files.\n\n    :param testdata_list: List of TestData objects\n    :param logpath: Log file path\n    :return:\n\ncreatereport(self, testdata_list, filename)\n    This function creates the test report.\n\n    :param testdata_list: List of TestData objects\n    :param filename: Report file name\n    :return:\n\ndeep_cleanup(self, testdata_list)\n    This function deletes the AWS resources which couldn't be deleted\n    by deleting CloudFormation stacks.\n\n    :param testdata_list: List of TestData objects\n\ndefine_tests(self, yamlc, test)\n    This function reads the given test config yaml object and defines\n    the tests as per the given config object.\n\n    :param yamlc: TaskCat config yaml object\n    :param test: Test scenarios\n\ngenpassword(self, pass_length, pass_type)\n    Returns a password of given length and type.\n\n    :param pass_length: Length of the desired password\n    :param pass_type: Type of the desired password - String only OR Alphanumeric\n        * A = AlphaNumeric, Example 'vGceIP8EHC'\n    :return: Password of given length and type\n\ngenreport(self, testdata_list, dashboard_filename)\n    This function generates the test report.\n\n    :param testdata_list: List of TestData objects\n    :param dashboard_filename: Report file name\n\nget_all_resources(self, stackids, region)\n    Given a list of stackids, function returns the list of dictionary items, where each\n    item consist of stackId and the resources associated with that stack.\n\n    :param stackids: List of Stack Ids\n    :param region: AWS region\n    :return: A list of dictionary object in the following format\n            [\n                {\n                    'stackId': 'string',\n                    'resources': [\n                        {\n                           'logicalId': 'string',\n                           'physicalId': 'string',\n                           'resourceType': 'String'\n                        },\n                    ]\n                },\n            ]\n\nget_available_azs(region, count)\n    Returns a list of availability zones in a given region.\n\n    :param region: Region for the availability zones\n    :param count: Minimum number of availability zones needed\n\n    :return: List of availability zones in a given region\n\nget_capabilities(self)\n\nget_cfnlogs(stackname, region)\n    This function returns the event logs of the given stack in a specific format.\n    :param stackname: Name of the stack\n    :param region: Region stack belongs to\n    :return: Event logs of the stack\n\nget_config(self)\n\nget_default_region(self)\n\nget_docleanup(self)\n\nget_global_region(self, yamlcfg)\n    Returns a list of regions defined under global region in the yml config file.\n\n    :param yamlcfg: Content of the yml config file\n    :return: List of regions\n\nget_parameter_file(self)\n\nget_parameter_path(self)\n\nget_password(self)\n\nget_project(self)\n\nget_resources(self, stackname, region, include_stacks=False)\n    Given a stackname, and region function returns the list of dictionary items, where each item\n    consist of logicalId, physicalId and resourceType of the aws resource associated\n    with the stack.\n\n    :param include_stacks: \n    :param stackname: CloudFormation stack name\n    :param region: AWS region\n    :return: List of objects in the following format\n         [\n             {\n                 'logicalId': 'string',\n                 'physicalId': 'string',\n                 'resourceType': 'String'\n             },\n         ]\n\nget_resources_helper(self, stackname, region, l_resources, include_stacks)\n    This is a helper function of get_resources function. Check get_resources function for details.\n\nget_s3_url(self, key)\n    Returns S3 url of a given object.\n\n    :param key: Name of the object whose S3 url is being returned\n    :return: S3 url of the given key\n\nget_s3bucket(self)\n\nget_s3contents(url)\n\nget_stackstatus(self, testdata_list, speed)\n    Given a list of TestData objects, this function checks the stack status\n    of each CloudFormation stack and updates the corresponding TestData object\n    with the status.\n\n    :param testdata_list: List of TestData object\n    :param speed: Interval (in seconds) in which the status has to be checked in loop\n\nget_template_file(self)\n\nget_template_path(self)\n\nget_test_region(self)\n\nif_stackexists(self, stackname, region)\n    This function checks if a stack exist with the given stack name.\n    Returns \"yes\" if exist, otherwise \"no\".\n\n    :param stackname: Stack name\n    :param region: AWS region\n\n    :return: \"yes\" if stack exist, otherwise \"no\"\n\nparse_stack_info(self, stack_name)\n    Returns a dictionary object containing the region and stack name.\n\n    :param stack_name: Full stack name arn\n    :return: Dictionary object containing the region and stack name\n\nregxfind(re_object, data_line)\n    Returns the matching string.\n\n    :param re_object: Regex object\n    :param data_line: String to be searched\n\n    :return: Matching String if found, otherwise return 'Not-found'\n\nset_capabilities(self, ability)\n\nset_config(self, config_yml)\n\nset_default_region(self, region)\n\nset_docleanup(self, cleanup_value)\n\nset_parameter_file(self, parameter)\n\nset_parameter_path(self, parameter)\n\nset_password(self, password)\n\nset_project(self, project)\n\nset_s3bucket(self, bucket)\n\nset_template_file(self, template)\n\nset_template_path(self, template)\n\nset_test_region(self, region_list)\n\nstackcheck(self, stack_id)\n    Given the stack id, this function returns the status of the stack as\n    a list with stack name, region, and status as list items, in the respective\n    order.\n\n    :param stack_id: CloudFormation stack id\n\n    :return: List containing the stack name, region and stack status in the\n        respective order.\n\nstackcreate(self, taskcat_cfg, test_list, sprefix)\n    This function creates CloudFormation stack for the given tests.\n\n    :param taskcat_cfg: TaskCat config as yaml object\n    :param test_list: List of tests\n    :param sprefix: Special prefix as string. Purpose of this param is to use it for tagging\n        the stack.\n\n    :return: List of TestData objects\n\nstackdelete(self, testdata_list)\n    This function deletes the CloudFormation stacks of the given tests.\n\n    :param testdata_list: List of TestData objects\n\nstage_in_s3(self, taskcat_cfg)\n    Upload templates and other artifacts to s3.\n\n    This function creates the s3 bucket with name provided in the config yml file. If\n    no bucket name provided, it creates the s3 bucket using project name provided in\n    config yml file. And uploads the templates and other artifacts to the s3 bucket.\n\n    :param taskcat_cfg: Taskcat configuration provided in yml file\n\nvalidate_json(self, jsonin)\n    This function validates the given JSON.\n\n    :param jsonin: Json object to be validated\n\n    :return: TRUE if given Json is valid, FALSE otherwise.\n\nvalidate_parameters(self, taskcat_cfg, test_list)\n    This function validates the parameters file of the CloudFormation template.\n\n    :param taskcat_cfg: TaskCat config yaml object\n    :param test_list: List of tests\n\n    :return: TRUE if the parameters file is valid, else FALSE\n\nvalidate_template(self, taskcat_cfg, test_list)\n    Returns TRUE if all the template files are valid, otherwise FALSE.\n\n    :param taskcat_cfg: TaskCat config object\n    :param test_list: List of tests\n\n    :return: TRUE if templates are valid, else FALSE\n\nvalidate_yaml(self, yaml_file)\n    This function validates the given yaml file.\n\n    :param yaml_file: Yaml file name\n\nwelcome(self, prog_name='taskcat.io')\n\nwrite_logs(self, stack_id, logpath)\n    This function writes the event logs of the given stack and all the child stacks to a given file.\n    :param stack_id: Stack Id\n    :param logpath: Log file path\n    :return:\n\nInstance variables\n------------------\nbanner\n\ncapabilities\n\nconfig\n\ndefult_region\n\ninterface\n\nnametag\n\nparameter_path\n\nproject\n\nrun_cleanup\n\ns3bucket\n\ntemplate_path\n\ntest_region\n\nverbose",
            "title": "Pip Module (taskcat)"
        },
        {
            "location": "/pip/taskcat.m/#module-taskcat",
            "text": "",
            "title": "Module taskcat"
        },
        {
            "location": "/pip/taskcat.m/#classes",
            "text": "TaskCat \n    Ancestors (in MRO)\n    ------------------\n    taskcat.TaskCat\n    builtins.object  Static methods\n--------------\n__init__(self, nametag='[taskcat]')\n    Initialize self.  See help(type(self)) for accurate signature.\n\naws_api_init(self, args)\n    This function reads the AWS credentials from various sources to ensure\n    that the client has right credentials defined to successfully run\n    TaskCat against an AWS account.\n\n    :param args: Command line arguments for AWS credentials. It could be\n        either profile name, access key and secret key or none.\n\ncleanup(self, testdata_list, speed)\n    This function deletes the CloudFormation stacks of the given tests.\n\n    :param testdata_list: List of TestData objects\n    :param speed: Interval (in seconds) in which the status has to be checked\n        while deleting the stacks.\n\ncollect_resources(self, testdata_list, logpath)\n    This function collects the AWS resources information created by the\n    CloudFormation stack for generating the report.\n\n    :param testdata_list: List of TestData object\n    :param logpath: Log file path\n\ncreatecfnlogs(self, testdata_list, logpath)\n    This function creates the CloudFormation log files.\n\n    :param testdata_list: List of TestData objects\n    :param logpath: Log file path\n    :return:\n\ncreatereport(self, testdata_list, filename)\n    This function creates the test report.\n\n    :param testdata_list: List of TestData objects\n    :param filename: Report file name\n    :return:\n\ndeep_cleanup(self, testdata_list)\n    This function deletes the AWS resources which couldn't be deleted\n    by deleting CloudFormation stacks.\n\n    :param testdata_list: List of TestData objects\n\ndefine_tests(self, yamlc, test)\n    This function reads the given test config yaml object and defines\n    the tests as per the given config object.\n\n    :param yamlc: TaskCat config yaml object\n    :param test: Test scenarios\n\ngenpassword(self, pass_length, pass_type)\n    Returns a password of given length and type.\n\n    :param pass_length: Length of the desired password\n    :param pass_type: Type of the desired password - String only OR Alphanumeric\n        * A = AlphaNumeric, Example 'vGceIP8EHC'\n    :return: Password of given length and type\n\ngenreport(self, testdata_list, dashboard_filename)\n    This function generates the test report.\n\n    :param testdata_list: List of TestData objects\n    :param dashboard_filename: Report file name\n\nget_all_resources(self, stackids, region)\n    Given a list of stackids, function returns the list of dictionary items, where each\n    item consist of stackId and the resources associated with that stack.\n\n    :param stackids: List of Stack Ids\n    :param region: AWS region\n    :return: A list of dictionary object in the following format\n            [\n                {\n                    'stackId': 'string',\n                    'resources': [\n                        {\n                           'logicalId': 'string',\n                           'physicalId': 'string',\n                           'resourceType': 'String'\n                        },\n                    ]\n                },\n            ]\n\nget_available_azs(region, count)\n    Returns a list of availability zones in a given region.\n\n    :param region: Region for the availability zones\n    :param count: Minimum number of availability zones needed\n\n    :return: List of availability zones in a given region\n\nget_capabilities(self)\n\nget_cfnlogs(stackname, region)\n    This function returns the event logs of the given stack in a specific format.\n    :param stackname: Name of the stack\n    :param region: Region stack belongs to\n    :return: Event logs of the stack\n\nget_config(self)\n\nget_default_region(self)\n\nget_docleanup(self)\n\nget_global_region(self, yamlcfg)\n    Returns a list of regions defined under global region in the yml config file.\n\n    :param yamlcfg: Content of the yml config file\n    :return: List of regions\n\nget_parameter_file(self)\n\nget_parameter_path(self)\n\nget_password(self)\n\nget_project(self)\n\nget_resources(self, stackname, region, include_stacks=False)\n    Given a stackname, and region function returns the list of dictionary items, where each item\n    consist of logicalId, physicalId and resourceType of the aws resource associated\n    with the stack.\n\n    :param include_stacks: \n    :param stackname: CloudFormation stack name\n    :param region: AWS region\n    :return: List of objects in the following format\n         [\n             {\n                 'logicalId': 'string',\n                 'physicalId': 'string',\n                 'resourceType': 'String'\n             },\n         ]\n\nget_resources_helper(self, stackname, region, l_resources, include_stacks)\n    This is a helper function of get_resources function. Check get_resources function for details.\n\nget_s3_url(self, key)\n    Returns S3 url of a given object.\n\n    :param key: Name of the object whose S3 url is being returned\n    :return: S3 url of the given key\n\nget_s3bucket(self)\n\nget_s3contents(url)\n\nget_stackstatus(self, testdata_list, speed)\n    Given a list of TestData objects, this function checks the stack status\n    of each CloudFormation stack and updates the corresponding TestData object\n    with the status.\n\n    :param testdata_list: List of TestData object\n    :param speed: Interval (in seconds) in which the status has to be checked in loop\n\nget_template_file(self)\n\nget_template_path(self)\n\nget_test_region(self)\n\nif_stackexists(self, stackname, region)\n    This function checks if a stack exist with the given stack name.\n    Returns \"yes\" if exist, otherwise \"no\".\n\n    :param stackname: Stack name\n    :param region: AWS region\n\n    :return: \"yes\" if stack exist, otherwise \"no\"\n\nparse_stack_info(self, stack_name)\n    Returns a dictionary object containing the region and stack name.\n\n    :param stack_name: Full stack name arn\n    :return: Dictionary object containing the region and stack name\n\nregxfind(re_object, data_line)\n    Returns the matching string.\n\n    :param re_object: Regex object\n    :param data_line: String to be searched\n\n    :return: Matching String if found, otherwise return 'Not-found'\n\nset_capabilities(self, ability)\n\nset_config(self, config_yml)\n\nset_default_region(self, region)\n\nset_docleanup(self, cleanup_value)\n\nset_parameter_file(self, parameter)\n\nset_parameter_path(self, parameter)\n\nset_password(self, password)\n\nset_project(self, project)\n\nset_s3bucket(self, bucket)\n\nset_template_file(self, template)\n\nset_template_path(self, template)\n\nset_test_region(self, region_list)\n\nstackcheck(self, stack_id)\n    Given the stack id, this function returns the status of the stack as\n    a list with stack name, region, and status as list items, in the respective\n    order.\n\n    :param stack_id: CloudFormation stack id\n\n    :return: List containing the stack name, region and stack status in the\n        respective order.\n\nstackcreate(self, taskcat_cfg, test_list, sprefix)\n    This function creates CloudFormation stack for the given tests.\n\n    :param taskcat_cfg: TaskCat config as yaml object\n    :param test_list: List of tests\n    :param sprefix: Special prefix as string. Purpose of this param is to use it for tagging\n        the stack.\n\n    :return: List of TestData objects\n\nstackdelete(self, testdata_list)\n    This function deletes the CloudFormation stacks of the given tests.\n\n    :param testdata_list: List of TestData objects\n\nstage_in_s3(self, taskcat_cfg)\n    Upload templates and other artifacts to s3.\n\n    This function creates the s3 bucket with name provided in the config yml file. If\n    no bucket name provided, it creates the s3 bucket using project name provided in\n    config yml file. And uploads the templates and other artifacts to the s3 bucket.\n\n    :param taskcat_cfg: Taskcat configuration provided in yml file\n\nvalidate_json(self, jsonin)\n    This function validates the given JSON.\n\n    :param jsonin: Json object to be validated\n\n    :return: TRUE if given Json is valid, FALSE otherwise.\n\nvalidate_parameters(self, taskcat_cfg, test_list)\n    This function validates the parameters file of the CloudFormation template.\n\n    :param taskcat_cfg: TaskCat config yaml object\n    :param test_list: List of tests\n\n    :return: TRUE if the parameters file is valid, else FALSE\n\nvalidate_template(self, taskcat_cfg, test_list)\n    Returns TRUE if all the template files are valid, otherwise FALSE.\n\n    :param taskcat_cfg: TaskCat config object\n    :param test_list: List of tests\n\n    :return: TRUE if templates are valid, else FALSE\n\nvalidate_yaml(self, yaml_file)\n    This function validates the given yaml file.\n\n    :param yaml_file: Yaml file name\n\nwelcome(self, prog_name='taskcat.io')\n\nwrite_logs(self, stack_id, logpath)\n    This function writes the event logs of the given stack and all the child stacks to a given file.\n    :param stack_id: Stack Id\n    :param logpath: Log file path\n    :return:\n\nInstance variables\n------------------\nbanner\n\ncapabilities\n\nconfig\n\ndefult_region\n\ninterface\n\nnametag\n\nparameter_path\n\nproject\n\nrun_cleanup\n\ns3bucket\n\ntemplate_path\n\ntest_region\n\nverbose",
            "title": "Classes"
        },
        {
            "location": "/pip/sweeper.m/",
            "text": "Module sweeper\n\n\nClasses\n\n\nSweeper \n    Ancestors (in MRO)\n    ------------------\n    sweeper.Sweeper\n    builtins.object\n\n\nStatic methods\n--------------\n__init__(self, session)\n    Initialize self.  See help(type(self)) for accurate signature.\n\ndelete_all(self, stack_list)\n\nInstance variables\n------------------\nsession",
            "title": "Sub Module (taskcat.sweeper)"
        },
        {
            "location": "/pip/sweeper.m/#module-sweeper",
            "text": "",
            "title": "Module sweeper"
        },
        {
            "location": "/pip/sweeper.m/#classes",
            "text": "Sweeper \n    Ancestors (in MRO)\n    ------------------\n    sweeper.Sweeper\n    builtins.object  Static methods\n--------------\n__init__(self, session)\n    Initialize self.  See help(type(self)) for accurate signature.\n\ndelete_all(self, stack_list)\n\nInstance variables\n------------------\nsession",
            "title": "Classes"
        }
    ]
}