{
    "docs": [
        {
            "location": "/",
            "text": "TaskCat\n\u00b6\n\n\nversion = '2017.0528.220651'\n\n\n\n\nThis program requires python3 \n\n\n\n\nCurrently in (beta release)\n\u00b6\n\n\nReport bugs here \nWhat is TaskCat?\n\u00b6\n\n\nTaskCat is a tool that tests AWS CloudFormation templates. It deploys your AWS CloudFormation template in multiple AWS Regions and generates a report with a pass/fail grade for each region. You can specify the regions and number of Availability Zones you want to include in the test, and pass in parameter values from your AWS CloudFormation template. TaskCat is implemented as a Python class that you import, instantiate, and run.\n\n\nTestCat was developed by the AWS Quick Start team to test AWS CloudFormation templates that automatically deploy workloads on AWS. We\u2019re pleased to make the tool available to all developers who want to validate their custom AWS CloudFormation \ntemplates across AWS Regions\n\n\nFiles you\u2019ll need\n\u00b6\n\n\n\n\nconfig.yml\n - This file contains the test cases\n\n\n\n\nJSON input\n - This file contains the inputs that you want to pass to AWS CloudFormation template that is being tested\n\n\n\n\n\n\nStep 1 Building your configuration file \n\n\n\n\nStep 2 Building your JSON input file.\n\n\n\n\nStep 1 Creating a config.ymal\n\u00b6\n\n\nYou can generate a sample config.ymal by running \ntaskcat -ey\n\nThe followup's command will create a sample config.yml\n\n1\n./taskcat -ey | egrep -v '#|^$'  >config.yml\n\n\n\n\nOpen the config.yml file with and editor and update the filenames to match your need. \n\n\nExample of config.yml\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\nglobal\n:\n\n  \nowner\n:\n \nowner\n@\ncompany\n.\ncom\n\n  \nproject\n:\n \nsample\n-\ncloudformation\n-\nproject\n \n<-\n \nMust\n \nmatch\n \nthe\n \nroot\n \ndirectory\n \nof\n \nproject\n \n(\nusually\n \nthe\n \nname\n \nof\n \ngit\n \nrepo\n)\n\n  \n#\ns3bucket\n:\n \nprojectx\n-\ntemplates\n \n<-\n \n(\nOptional\n)\n \nOnly\n \nneeded\n \nif\n \nyou\n \nwant\n \nto\n \nuse\n \na\n \nspecific\n \nbucket\n \n  \nregions\n:\n\n    \n-\n \nus\n-\neast\n-\n1\n\n    \n-\n \nus\n-\neast\n-\n2\n\n    \n-\n \nus\n-\nwest\n-\n1\n\n    \n-\n \nus\n-\nwest\n-\n2\n\n\ntests\n:\n\n  \n#\n \nThe\n \nfollowing\n \ntest\n \nwill\n \ntest\n \nin\n \nboth\n \nus\n-\nwest\n-\n1\n \nand\n \nus\n-\neast\n-\n1\n \nusing\n \nsample\n-\ncloudformation\n-\ninput\n.\njson\n \nas\n \ninputs\n\n  \nscenario\n-\n1\n:\n\n    \nregions\n:\n\n      \n-\n \nus\n-\nwest\n-\n1\n\n      \n-\n \nus\n-\neast\n-\n1\n\n    \ntemplate_file\n:\n \nsample\n-\ncloudformation\n-\nproject\n-\nnovpc\n.\ntemplate\n\n    \nparameter_input\n:\n \nsample\n-\ncloudformation\n-\ninput\n-\nnovpc\n.\njson\n\n  \n#\n \nThe\n \nfollowing\n \ntest\n \nwill\n \ntest\n \nin\n \nboth\n \nall\n \n4\n \nregion\n \ndefined\n \nin\n \nthe\n \nglobal\n \nregion\n \nsection\n \nusing\n \nsample\n-\ncloudformation\n-\ninput\n.\njson\n \nas\n \ninputs\n\n      \nscenario\n-\nall\n-\nregions\n:\n\n    \nparameter_input\n:\n \nsample\n-\ncloudformation\n-\ninput\n-\nwithvpc\n.\njson\n\n    \ntemplate_file\n:\n \nsample\n-\ncloudformation\n-\nproject\n-\nwithvpc\n.\ntemplate\n\n\n\n\n\n\n\nExample of project directory structure\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\nsample\n-\ncloudformation\n-\nproject\n/\n\n\n\u251c\u2500\u2500\n \nLICENSE\n.\ntxt\n\n\n\u251c\u2500\u2500\n \nREADME\n.\nmd\n\n\n\u2514\u2500\u2500\n \nci\n\n\u00a0\u00a0 \n\u251c\u2500\u2500\n \nconfig\n.\nyml\n \n<-\n \nThis\n \nthe\n \nconfig\n \nfile\n \nthat\n \nwill\n \nhold\n \nall\n \nthe\n \ntest\n \ndefinitions\n \n\u00a0\u00a0 \n\u251c\u2500\u2500\n  \nsample\n-\ncloudformation\n-\ninput\n-\nnovpc\n.\njson\n \n<-\n  \nThis\n \nfile\n \ncontain\n \ninput\n \nthat\n \nwill\n \npass\n \nin\n \nduring\n \nstack\n \ncreation\n \n[\nvpc\n \nversion\n]\n \n(\nSee\n \nauto\n \nparms\n \nfor\n \nmore\n \ninfo\n)\n\n\u00a0\u00a0 \n\u251c\u2500\u2500\n  \nsample\n-\ncloudformation\n-\ninput\n-\nwithvpc\n.\njson\n \n<-\n  \nThis\n \nfile\n \ncontain\n \ninput\n \nthat\n \nwill\n \npass\n \nin\n \nduring\n \nstack\n \ncreation\n \n[\nno\n-\nvpc\n \nversion\n](\nSee\n \nauto\n \nparms\n \nfor\n \nmore\n \ninfo\n)\n\n   \n\u251c\u2500\u2500\n \nscripts\n\n   \n\u2502\n\u00a0\u00a0 \n\u2514\u2500\u2500\n \nuserdata\n.\nsh\n \n<-\n \nIf\n \nyou\n \nhave\n \nuserdata\n \nscripts\n \nyou\n \ncan\n \nload\n \nthen\n \nin\n \nthe\n \nscripts\n \ndirectory\n\n   \n\u251c\u2500\u2500\n \nsubmodules\n  \n<-\n \nIf\n \nyou\n \nhave\n \ngit\n \nsubmodules\n \nyou\n \ncan\n \nload\n \nthem\n \nin\n \nthe\n \nsubmodules\n \ndirectory\n\n   \n\u2502\n\u00a0\u00a0 \n\u2514\u2500\u2500\n \nquickstart\n-\naws\n-\nvpc\n\n   \n\u2502\n\u00a0\u00a0     \n\u2514\u2500\u2500\n \ntemplates\n\n   \n\u2502\n\u00a0\u00a0         \n\u2514\u2500\u2500\n \naws\n-\nvpc\n.\ntemplate\n\n   \n\u2514\u2500\u2500\n \ntemplates\n\n       \n\u251c\u2500\u2500\n \nsample\n-\ncloudformation\n-\nproject\n-\nnovpc\n.\ntemplate\n \n       \n\u2514\u2500\u2500\n \nsample\n-\ncloudformation\n-\nproject\n-\nwithvpc\n.\ntemplate\n \n<-\n \nSecond\n \nversion\n \non\n \ntemplate\n \nthat\n \nwill\n \ncreate\n \na\n \nvpc\n \nwith\n \nthe\n \nworkload\n\n\n\n\n\n\n\nStep 2 Building a json input file\n\u00b6\n\n\nThe example below shows an input file for a stack that requires four parameters \nKeyPair\n,\nInstanceType\n, \nAvailablityZones\n and \nPassword\n\n\nNote: you can auto generate values at runtime using special tokens (see example below).\n\n\n\n\nThe following json will evaluate\n\n\n\n\nFrom:\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n[\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"$[taskcat_genaz_2]\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"$[taskcat_genpass_8A]\"\n    }, \n]\n\n\n\n\n\n\nTo:\n\u00b6\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n[\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"us-east-1a, us-east1b\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"tI8zN3iX8\"\n    }, \n]\n\n\n\n\n\n\nMore information on Auto-generated stack inputs\n\u00b6\n\n\n(Passwords)\n\u00b6\n\n\nValue that matches the following pattern will be replaced\n\n\n\n\nParameters must start with $[\n\n\nParameters must end with ]\n\n\ngenpass in invoked when _genpass_X is found\n\n\nX is length of the string\n\n\n\n\n(Optionally - you can specify the type of password by adding A or S)\n\n\n\n\nA alpha-numeric passwords\n\n\nS passwords with special characters\n\n\n\n\n\n\nExample: $[taskcat_genpass_8A]\nGenerates: \ntI8zN3iX8\n\nExample: $[taskcat_genpass_8S]\nGenerates: mA5@cB5!\n\n\n\n\n(Availability Zones)\n\u00b6\n\n\nValue that matches the following pattern will be replaced\n\n\n\n\nParameters must start with $[\n\n\nParameters must end with ]\n\n\ngenaz in invoked when _genaz_X is found\n\n\nA number of AZ's will be selected from the region the stack is attempting to launch\n\n\n\n\n\n\nExample: $[taskcat_genaz_2]\n\nGenerates: us-east-1a, us-east-2b\n(if the region is us-east-1)\n\n\n\n\nInstalling TaskCat\n\u00b6\n\n\nInstalling TaskCat (Option 1)\n\u00b6\n\n\n\n\nPrerequisites: Python 3.5+ and pip3\n\n1\ncurl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/pip/pip3-install-master| python -E\n\n\n\n\n\n\n\nInstalling TaskCat via docker (Option 2)\n\u00b6\n\n\n\n\nPrerequisites: docker\n\n1\ncurl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| sudo python -E\n\n\n\n\nNote: (If you do not have root privileges taskcat will install in the current directory)\n\n\n\n\nRunning TaskCat\n\u00b6\n\n\nIf you have AWS credentials sourced \n\n1\ntaskcat -c sample-cloudformation-project/ci/config.yml\n\n\n\n\nIf you need to pass ACCESS and SECRET keys\n\n1\ntaskcat -c sample-cloudformation-project/ci/config.yml -A YOUR_ACCESS_KEY -S YOUR_SECRET_KEY\n\n\n\n\nIf you want to use a different account or profile\n\n1\ntaskcat -c sample-cloudformation-project/ci/config.yml -P boto-profile-name",
            "title": "Home"
        },
        {
            "location": "/#taskcat",
            "text": "version = '2017.0528.220651'   This program requires python3",
            "title": "TaskCat"
        },
        {
            "location": "/#currently-in-beta-release",
            "text": "Report bugs here  What is TaskCat? \u00b6  TaskCat is a tool that tests AWS CloudFormation templates. It deploys your AWS CloudFormation template in multiple AWS Regions and generates a report with a pass/fail grade for each region. You can specify the regions and number of Availability Zones you want to include in the test, and pass in parameter values from your AWS CloudFormation template. TaskCat is implemented as a Python class that you import, instantiate, and run.  TestCat was developed by the AWS Quick Start team to test AWS CloudFormation templates that automatically deploy workloads on AWS. We\u2019re pleased to make the tool available to all developers who want to validate their custom AWS CloudFormation \ntemplates across AWS Regions",
            "title": "Currently in (beta release)"
        },
        {
            "location": "/#files-youll-need",
            "text": "config.yml  - This file contains the test cases   JSON input  - This file contains the inputs that you want to pass to AWS CloudFormation template that is being tested    Step 1 Building your configuration file    Step 2 Building your JSON input file.",
            "title": "Files you\u2019ll need"
        },
        {
            "location": "/#step-1-creating-a-configymal",
            "text": "You can generate a sample config.ymal by running  taskcat -ey \nThe followup's command will create a sample config.yml 1 ./taskcat -ey | egrep -v '#|^$'  >config.yml  \nOpen the config.yml file with and editor and update the filenames to match your need.",
            "title": "Step 1 Creating a config.ymal"
        },
        {
            "location": "/#example-of-configyml",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 global : \n   owner :   owner @ company . com \n   project :   sample - cloudformation - project   <-   Must   match   the   root   directory   of   project   ( usually   the   name   of   git   repo ) \n   # s3bucket :   projectx - templates   <-   ( Optional )   Only   needed   if   you   want   to   use   a   specific   bucket  \n   regions : \n     -   us - east - 1 \n     -   us - east - 2 \n     -   us - west - 1 \n     -   us - west - 2  tests : \n   #   The   following   test   will   test   in   both   us - west - 1   and   us - east - 1   using   sample - cloudformation - input . json   as   inputs \n   scenario - 1 : \n     regions : \n       -   us - west - 1 \n       -   us - east - 1 \n     template_file :   sample - cloudformation - project - novpc . template \n     parameter_input :   sample - cloudformation - input - novpc . json \n   #   The   following   test   will   test   in   both   all   4   region   defined   in   the   global   region   section   using   sample - cloudformation - input . json   as   inputs \n       scenario - all - regions : \n     parameter_input :   sample - cloudformation - input - withvpc . json \n     template_file :   sample - cloudformation - project - withvpc . template",
            "title": "Example of config.yml"
        },
        {
            "location": "/#example-of-project-directory-structure",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16 sample - cloudformation - project /  \u251c\u2500\u2500   LICENSE . txt  \u251c\u2500\u2500   README . md  \u2514\u2500\u2500   ci \n\u00a0\u00a0  \u251c\u2500\u2500   config . yml   <-   This   the   config   file   that   will   hold   all   the   test   definitions  \n\u00a0\u00a0  \u251c\u2500\u2500    sample - cloudformation - input - novpc . json   <-    This   file   contain   input   that   will   pass   in   during   stack   creation   [ vpc   version ]   ( See   auto   parms   for   more   info ) \n\u00a0\u00a0  \u251c\u2500\u2500    sample - cloudformation - input - withvpc . json   <-    This   file   contain   input   that   will   pass   in   during   stack   creation   [ no - vpc   version ]( See   auto   parms   for   more   info ) \n    \u251c\u2500\u2500   scripts \n    \u2502 \u00a0\u00a0  \u2514\u2500\u2500   userdata . sh   <-   If   you   have   userdata   scripts   you   can   load   then   in   the   scripts   directory \n    \u251c\u2500\u2500   submodules    <-   If   you   have   git   submodules   you   can   load   them   in   the   submodules   directory \n    \u2502 \u00a0\u00a0  \u2514\u2500\u2500   quickstart - aws - vpc \n    \u2502 \u00a0\u00a0      \u2514\u2500\u2500   templates \n    \u2502 \u00a0\u00a0          \u2514\u2500\u2500   aws - vpc . template \n    \u2514\u2500\u2500   templates \n        \u251c\u2500\u2500   sample - cloudformation - project - novpc . template  \n        \u2514\u2500\u2500   sample - cloudformation - project - withvpc . template   <-   Second   version   on   template   that   will   create   a   vpc   with   the   workload",
            "title": "Example of project directory structure"
        },
        {
            "location": "/#step-2-building-a-json-input-file",
            "text": "The example below shows an input file for a stack that requires four parameters  KeyPair , InstanceType ,  AvailablityZones  and  Password  Note: you can auto generate values at runtime using special tokens (see example below).   The following json will evaluate",
            "title": "Step 2 Building a json input file"
        },
        {
            "location": "/#from",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 [\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"$[taskcat_genaz_2]\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"$[taskcat_genpass_8A]\"\n    }, \n]",
            "title": "From:"
        },
        {
            "location": "/#to",
            "text": "1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18 [\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"us-east-1a, us-east1b\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"tI8zN3iX8\"\n    }, \n]",
            "title": "To:"
        },
        {
            "location": "/#more-information-on-auto-generated-stack-inputs",
            "text": "",
            "title": "More information on Auto-generated stack inputs"
        },
        {
            "location": "/#passwords",
            "text": "Value that matches the following pattern will be replaced   Parameters must start with $[  Parameters must end with ]  genpass in invoked when _genpass_X is found  X is length of the string   (Optionally - you can specify the type of password by adding A or S)   A alpha-numeric passwords  S passwords with special characters    Example: $[taskcat_genpass_8A]\nGenerates:  tI8zN3iX8 \nExample: $[taskcat_genpass_8S]\nGenerates: mA5@cB5!",
            "title": "(Passwords)"
        },
        {
            "location": "/#availability-zones",
            "text": "Value that matches the following pattern will be replaced   Parameters must start with $[  Parameters must end with ]  genaz in invoked when _genaz_X is found  A number of AZ's will be selected from the region the stack is attempting to launch    Example: $[taskcat_genaz_2] \nGenerates: us-east-1a, us-east-2b\n(if the region is us-east-1)",
            "title": "(Availability Zones)"
        },
        {
            "location": "/#installing-taskcat",
            "text": "",
            "title": "Installing TaskCat"
        },
        {
            "location": "/#installing-taskcat-option-1",
            "text": "Prerequisites: Python 3.5+ and pip3 1 curl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/pip/pip3-install-master| python -E",
            "title": "Installing TaskCat (Option 1)"
        },
        {
            "location": "/#installing-taskcat-via-docker-option-2",
            "text": "Prerequisites: docker 1 curl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| sudo python -E  \nNote: (If you do not have root privileges taskcat will install in the current directory)",
            "title": "Installing TaskCat via docker (Option 2)"
        },
        {
            "location": "/#running-taskcat",
            "text": "If you have AWS credentials sourced  1 taskcat -c sample-cloudformation-project/ci/config.yml  \nIf you need to pass ACCESS and SECRET keys 1 taskcat -c sample-cloudformation-project/ci/config.yml -A YOUR_ACCESS_KEY -S YOUR_SECRET_KEY  \nIf you want to use a different account or profile 1 taskcat -c sample-cloudformation-project/ci/config.yml -P boto-profile-name",
            "title": "Running TaskCat"
        },
        {
            "location": "/module/",
            "text": "Python  Module documentation\n\u00b6\n\n\n[taskcat.Taskcat]\n\n\n[taskcat.Sweeper]\n\n\n[taskcat.Sweeper]\n\n\n[taskcat.Sweeper]",
            "title": "Module (taskcat)"
        },
        {
            "location": "/module/#python-module-documentation",
            "text": "[taskcat.Taskcat]  [taskcat.Sweeper]  [taskcat.Sweeper]  [taskcat.Sweeper]",
            "title": "Python  Module documentation"
        }
    ]
}