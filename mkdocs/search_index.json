{
    "docs": [
        {
            "location": "/",
            "text": "taskcat\n\n\n\n\nversion = \u20180.1.76\u2019\nThis program requires python3 \n\n\n\n\nCurrently in beta release\n\n\nPlease report bugs here https://github.com/aws-quickstart/taskcat/issues\n\n\nWhat is taskcat?\n\n\ntaskcat is a python Class that helps deploy your cloudformation templates in multiple regions. You can use taskcat by importing the module and creating a taskcat object. \n\n\nSetting up Test Cases\n\n\n\n\nStep 1 Define your test in the config.yml\n\n\nStep 2 Build a json input file for your cloudformation template.\n\n\n\n\nStep 1 Creating a config.ymal\n\n\nYou can generate a sample config.ymal by running \ntaskcat -ey\n\nThe followup\u2019s command will create a sample config.yml\n\n\n./taskcat -ey | egrep -v '#|^$'  >config.yml\n\n\n\n\nOpen the config.yml file with and editor and update the filenames to match your need. \n\n\nExample of config.yml\n\n\nglobal:\n  owner: owner@company.com\n  project: sample-cloudformation-project <- Must match the root directory of project (usually the name of git repo)\n  #s3bucket: projectx-templates <- (Optional) Only needed if you want to use a specific bucket \n  regions:\n    - us-east-1\n    - us-east-2\n    - us-west-1\n    - us-west-2\ntests:\n  # The following test will test in both us-west-1 and us-east-1 using sample-cloudformation-input.json as inputs\n  senario-1:\n    parameter_input: sample-cloudformation-input.json\n    regions:\n      - us-west-1\n      - us-east-1\n    template_file: sample-cloudformation-project-withvpc.template\n  # The following test will test in both all 4 region defined in the global region section using sample-cloudformation-input.json as inputs\n      senario-all-regions:\n    parameter_input: sample-cloudformation-input.jsonon\n    template_file: sample-cloudformation-project-withvpc.template\n\n\n\nExample of project directory structure\n\n\nsample-cloudformation-project/\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ci\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config.yml <- This the config file that will hold all the test definitions \n\u2502\u00a0\u00a0 \u2514\u2500\u2500  sample-cloudformation-input.json <-  This file contain input that will pass in during stack creation (See auto parms for more info)\n    \u251c\u2500\u2500 scripts\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 userdata.sh <- If you have userdata scripts you can load then in the scripts directory\n    \u251c\u2500\u2500 submodules  <- If you have git submodules you can load them in the submodules directory\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 quickstart-aws-vpc\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 templates\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 aws-vpc.template\n    \u2514\u2500\u2500 templates\n        \u251c\u2500\u2500 sample-cloudformation-project-novpc.template \n        \u2514\u2500\u2500 sample-cloudformation-project-withvpc.template <- Second version on template that will create a vpc with the worklo    ad\n\n\n\nStep 2 Building a json input file\n\n\nThe example below shows an input file for a stack that requires four parameters \nKeyPair\n,\nInstanceType\n, \nAvailablityZones\n and \nPassword\n\n\nNote: you can auto generate values at runtime using special tokens (see example below).\n\n\n\n\nThe following json will evaluate\n\n\n\n\nFrom:\n\n\n[\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"$[taskcat_genaz_2]\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"$[taskcat_genpass_8A]\"\n    }, \n]\n\n\n\nTo:\n\n\n[\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"us-east-1a, us-east1b\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"tI8zN3iX8\"\n    }, \n]\n\n\n\nMore information on Auto-generated stack inputs\n\n\n(Passwords)\n\n\nValue that matches the following pattern will be replaced\n\n\n\n\nParameters must start with $[\n\n\nParameters must end with ]\n\n\ngenpass in invoked when _genpass_X is found\n\n\nX is lengeth of the string\n\n\n\n\n(Optionally - you can specify the type of password by adding A or S)\n\n\n\n\nA aplha-numeric passwords\n\n\nS passwords with special characters\n\n\n\n\n\n\nExample: $[taskcat_genpass_8A]\nGenerates: \ntI8zN3iX8\n\nExample: $[taskcat_genpass_8S]\nGenerates: mA5@cB5!\n\n\n\n\n(Availablity Zones)\n\n\nValue that matches the following pattern will be replaced\n\n\n\n\nParameters must start with $[\n\n\nParameters must end with ]\n\n\ngenaz in invoked when _genaz_X is found\n\n\nA number of AZ\u2019s will be selected from the region the stack is attempting to launch\n\n\n\n\n\n\nExample: $[taskcat_genaz_2]\n\nGenerates: us-east-1a, us-east-2b\n(if the region is us-east-1)\n\n\n\n\nInstalling taskcat\n\n\nInstalling taskcat (Option 1)\n\n\n\n\nPrerequisites: Python 3.5+ and pip\n\n\n\n\ncurl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| python -E\n\n\n\nInstalling taskcat via docker (Option 2)\n\n\n\n\nPrerequisites: docker\n\n\n\n\ncurl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| sudo python -E\n\n\n\n\n\nNote: (If you do not have root privileges taskcat will install in the current directory)\n\n\n\n\nRun taskcat\n\n\nIf you have AWS credentials sourced \n\n\n taskcat -c sample-cloudformation-project/ci/config.yml\n\n\n\nIf you need to pass ACCESS and SECRET keys\n\n\ntaskcat -c sample-cloudformation-project/ci/config.yml -A YOUR_ACCESS_KEY -S YOUR_SECRET_KEY\n\n\n\nIf you want to use a different account or profile\n\n\ntaskcat -c sample-cloudformation-project/ci/config.yml -P boto-profile-name",
            "title": "Home"
        },
        {
            "location": "/#taskcat",
            "text": "version = \u20180.1.76\u2019\nThis program requires python3",
            "title": "taskcat"
        },
        {
            "location": "/#currently-in-beta-release",
            "text": "Please report bugs here https://github.com/aws-quickstart/taskcat/issues",
            "title": "Currently in beta release"
        },
        {
            "location": "/#what-is-taskcat",
            "text": "taskcat is a python Class that helps deploy your cloudformation templates in multiple regions. You can use taskcat by importing the module and creating a taskcat object.",
            "title": "What is taskcat?"
        },
        {
            "location": "/#setting-up-test-cases",
            "text": "Step 1 Define your test in the config.yml  Step 2 Build a json input file for your cloudformation template.",
            "title": "Setting up Test Cases"
        },
        {
            "location": "/#step-1-creating-a-configymal",
            "text": "You can generate a sample config.ymal by running  taskcat -ey \nThe followup\u2019s command will create a sample config.yml  ./taskcat -ey | egrep -v '#|^$'  >config.yml  Open the config.yml file with and editor and update the filenames to match your need.",
            "title": "Step 1 Creating a config.ymal"
        },
        {
            "location": "/#example-of-configyml",
            "text": "global:\n  owner: owner@company.com\n  project: sample-cloudformation-project <- Must match the root directory of project (usually the name of git repo)\n  #s3bucket: projectx-templates <- (Optional) Only needed if you want to use a specific bucket \n  regions:\n    - us-east-1\n    - us-east-2\n    - us-west-1\n    - us-west-2\ntests:\n  # The following test will test in both us-west-1 and us-east-1 using sample-cloudformation-input.json as inputs\n  senario-1:\n    parameter_input: sample-cloudformation-input.json\n    regions:\n      - us-west-1\n      - us-east-1\n    template_file: sample-cloudformation-project-withvpc.template\n  # The following test will test in both all 4 region defined in the global region section using sample-cloudformation-input.json as inputs\n      senario-all-regions:\n    parameter_input: sample-cloudformation-input.jsonon\n    template_file: sample-cloudformation-project-withvpc.template",
            "title": "Example of config.yml"
        },
        {
            "location": "/#example-of-project-directory-structure",
            "text": "sample-cloudformation-project/\n\u251c\u2500\u2500 LICENSE.txt\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 ci\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 config.yml <- This the config file that will hold all the test definitions \n\u2502\u00a0\u00a0 \u2514\u2500\u2500  sample-cloudformation-input.json <-  This file contain input that will pass in during stack creation (See auto parms for more info)\n    \u251c\u2500\u2500 scripts\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 userdata.sh <- If you have userdata scripts you can load then in the scripts directory\n    \u251c\u2500\u2500 submodules  <- If you have git submodules you can load them in the submodules directory\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 quickstart-aws-vpc\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 templates\n    \u2502\u00a0\u00a0         \u2514\u2500\u2500 aws-vpc.template\n    \u2514\u2500\u2500 templates\n        \u251c\u2500\u2500 sample-cloudformation-project-novpc.template \n        \u2514\u2500\u2500 sample-cloudformation-project-withvpc.template <- Second version on template that will create a vpc with the worklo    ad",
            "title": "Example of project directory structure"
        },
        {
            "location": "/#step-2-building-a-json-input-file",
            "text": "The example below shows an input file for a stack that requires four parameters  KeyPair , InstanceType ,  AvailablityZones  and  Password  Note: you can auto generate values at runtime using special tokens (see example below).   The following json will evaluate",
            "title": "Step 2 Building a json input file"
        },
        {
            "location": "/#from",
            "text": "[\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"$[taskcat_genaz_2]\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"$[taskcat_genpass_8A]\"\n    }, \n]",
            "title": "From:"
        },
        {
            "location": "/#to",
            "text": "[\n    {\n    \"ParameterKey\": \"KeyPair\",\n    \"ParameterValue\": \"mykey\"\n    }, \n    {\n    \"ParameterKey\": \"InstanceType\",\n    \"ParameterValue\": \"t2.small\"\n    }\n    {\n    \"ParameterKey\": \"AvailablityZones\",\n    \"ParameterValue\": \"us-east-1a, us-east1b\" \n    }, \n    {\n    \"ParameterKey\": \"Password\",\n    \"ParameterValue\": \"tI8zN3iX8\"\n    }, \n]",
            "title": "To:"
        },
        {
            "location": "/#more-information-on-auto-generated-stack-inputs",
            "text": "",
            "title": "More information on Auto-generated stack inputs"
        },
        {
            "location": "/#passwords",
            "text": "Value that matches the following pattern will be replaced   Parameters must start with $[  Parameters must end with ]  genpass in invoked when _genpass_X is found  X is lengeth of the string   (Optionally - you can specify the type of password by adding A or S)   A aplha-numeric passwords  S passwords with special characters    Example: $[taskcat_genpass_8A]\nGenerates:  tI8zN3iX8 \nExample: $[taskcat_genpass_8S]\nGenerates: mA5@cB5!",
            "title": "(Passwords)"
        },
        {
            "location": "/#availablity-zones",
            "text": "Value that matches the following pattern will be replaced   Parameters must start with $[  Parameters must end with ]  genaz in invoked when _genaz_X is found  A number of AZ\u2019s will be selected from the region the stack is attempting to launch    Example: $[taskcat_genaz_2] \nGenerates: us-east-1a, us-east-2b\n(if the region is us-east-1)",
            "title": "(Availablity Zones)"
        },
        {
            "location": "/#installing-taskcat",
            "text": "",
            "title": "Installing taskcat"
        },
        {
            "location": "/#installing-taskcat-option-1",
            "text": "Prerequisites: Python 3.5+ and pip   curl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| python -E",
            "title": "Installing taskcat (Option 1)"
        },
        {
            "location": "/#installing-taskcat-via-docker-option-2",
            "text": "Prerequisites: docker   curl -s https://raw.githubusercontent.com/aws-quickstart/taskcat/master/installer/docker-install-master| sudo python -E   Note: (If you do not have root privileges taskcat will install in the current directory)",
            "title": "Installing taskcat via docker (Option 2)"
        },
        {
            "location": "/#run-taskcat",
            "text": "If you have AWS credentials sourced    taskcat -c sample-cloudformation-project/ci/config.yml  If you need to pass ACCESS and SECRET keys  taskcat -c sample-cloudformation-project/ci/config.yml -A YOUR_ACCESS_KEY -S YOUR_SECRET_KEY  If you want to use a different account or profile  taskcat -c sample-cloudformation-project/ci/config.yml -P boto-profile-name",
            "title": "Run taskcat"
        },
        {
            "location": "/pip/taskcat.m/",
            "text": "<title>taskcat API documentation</title>\n<meta name=\"description\" content=\"\" />\n\n\n\n\n\n\n\n<ul>\n<li>{\n  box-sizing: border-box;\n}\n/<em>! normalize.css v1.1.1 | MIT License | git.io/normalize </em>/</li>\n</ul>\n<p>/<em> ==========================================================================\n   HTML5 display definitions\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Correct <code>block</code> display not defined in IE 6/7/8/9 and Firefox 3.\n </em>/</p>\n<p>article,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nnav,\nsection,\nsummary {\n    display: block;\n}</p>\n<p>/*<em>\n * Correct <code>inline-block</code> display not defined in IE 6/7/8/9 and Firefox 3.\n </em>/</p>\n<p>audio,\ncanvas,\nvideo {\n    display: inline-block;\n    <em>display: inline;\n    </em>zoom: 1;\n}</p>\n<p>/*<em>\n * Prevent modern browsers from displaying <code>audio</code> without controls.\n * Remove excess height in iOS 5 devices.\n </em>/</p>\n<p>audio:not([controls]) {\n    display: none;\n    height: 0;\n}</p>\n<p>/*<em>\n * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.\n * Known issue: no IE 6 support.\n </em>/</p>\n<p>[hidden] {\n    display: none;\n}</p>\n<p>/<em> ==========================================================================\n   Base\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * 1. Prevent system color scheme&rsquo;s background color being used in Firefox, IE,\n *    and Opera.\n * 2. Prevent system color scheme&rsquo;s text color being used in Firefox, IE, and\n *    Opera.\n * 3. Correct text resizing oddly in IE 6/7 when body <code>font-size</code> is set using\n *    <code>em</code> units.\n * 4. Prevent iOS text size adjust after orientation change, without disabling\n *    user zoom.\n </em>/</p>\n<p>html {\n    background: #fff; /<em> 1 </em>/\n    color: #000; /<em> 2 </em>/\n    font-size: 100%; /<em> 3 </em>/\n    -webkit-text-size-adjust: 100%; /<em> 4 </em>/\n    -ms-text-size-adjust: 100%; /<em> 4 </em>/\n}</p>\n<p>/*<em>\n * Address <code>font-family</code> inconsistency between <code>textarea</code> and other form\n * elements.\n </em>/</p>\n<p>html,\nbutton,\ninput,\nselect,\ntextarea {\n    font-family: sans-serif;\n}</p>\n<p>/*<em>\n * Address margins handled incorrectly in IE 6/7.\n </em>/</p>\n<p>body {\n    margin: 0;\n}</p>\n<p>/<em> ==========================================================================\n   Links\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Address <code>outline</code> inconsistency between Chrome and other browsers.\n </em>/</p>\n<p>a:focus {\n    outline: thin dotted;\n}</p>\n<p>/*<em>\n * Improve readability when focused and also mouse hovered in all browsers.\n </em>/</p>\n<p>a:active,\na:hover {\n    outline: 0;\n}</p>\n<p>/<em> ==========================================================================\n   Typography\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Address font sizes and margins set differently in IE 6/7.\n * Address font sizes within <code>section</code> and <code>article</code> in Firefox 4+, Safari 5,\n * and Chrome.\n </em>/</p>\n<p>h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n}</p>\n<p>h2 {\n    font-size: 1.5em;\n    margin: 0.83em 0;\n}</p>\n<p>h3 {\n    font-size: 1.17em;\n    margin: 1em 0;\n}</p>\n<p>h4 {\n    font-size: 1em;\n    margin: 1.33em 0;\n}</p>\n<p>h5 {\n    font-size: 0.83em;\n    margin: 1.67em 0;\n}</p>\n<p>h6 {\n    font-size: 0.67em;\n    margin: 2.33em 0;\n}</p>\n<p>/*<em>\n * Address styling not present in IE 7/8/9, Safari 5, and Chrome.\n </em>/</p>\n<p>abbr[title] {\n    border-bottom: 1px dotted;\n}</p>\n<p>/*<em>\n * Address style set to <code>bolder</code> in Firefox 3+, Safari 4/5, and Chrome.\n </em>/</p>\n<p>b,\nstrong {\n    font-weight: bold;\n}</p>\n<p>blockquote {\n    margin: 1em 40px;\n}</p>\n<p>/*<em>\n * Address styling not present in Safari 5 and Chrome.\n </em>/</p>\n<p>dfn {\n    font-style: italic;\n}</p>\n<p>/*<em>\n * Address differences between Firefox and other browsers.\n * Known issue: no IE 6/7 normalization.\n </em>/</p>\n<p>hr {\n    -moz-box-sizing: content-box;\n    box-sizing: content-box;\n    height: 0;\n}</p>\n<p>/*<em>\n * Address styling not present in IE 6/7/8/9.\n </em>/</p>\n<p>mark {\n    background: #ff0;\n    color: #000;\n}</p>\n<p>/*<em>\n * Address margins set differently in IE 6/7.\n </em>/</p>\n<p>p,\npre {\n    margin: 1em 0;\n}</p>\n<p>/*<em>\n * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.\n </em>/</p>\n<p>code,\nkbd,\npre,\nsamp {\n    font-family: monospace, serif;\n    _font-family: &lsquo;courier new&rsquo;, monospace;\n    font-size: 1em;\n}</p>\n<p>/*<em>\n * Improve readability of pre-formatted text in all browsers.\n </em>/</p>\n<p>pre {\n    white-space: pre;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n}</p>\n<p>/*<em>\n * Address CSS quotes not supported in IE 6/7.\n </em>/</p>\n<p>q {\n    quotes: none;\n}</p>\n<p>/*<em>\n * Address <code>quotes</code> property not supported in Safari 4.\n </em>/</p>\n<p>q:before,\nq:after {\n    content: &lsquo;&rsquo;;\n    content: none;\n}</p>\n<p>/*<em>\n * Address inconsistent and variable font size in all browsers.\n </em>/</p>\n<p>small {\n    font-size: 80%;\n}</p>\n<p>/*<em>\n * Prevent <code>sub</code> and <code>sup</code> affecting <code>line-height</code> in all browsers.\n </em>/</p>\n<p>sub,\nsup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n}</p>\n<p>sup {\n    top: -0.5em;\n}</p>\n<p>sub {\n    bottom: -0.25em;\n}</p>\n<p>/<em> ==========================================================================\n   Lists\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Address margins set differently in IE 6/7.\n </em>/</p>\n<p>dl,\nmenu,\nol,\nul {\n    margin: 1em 0;\n}</p>\n<p>dd {\n    margin: 0 0 0 40px;\n}</p>\n<p>/*<em>\n * Address paddings set differently in IE 6/7.\n </em>/</p>\n<p>menu,\nol,\nul {\n    padding: 0 0 0 40px;\n}</p>\n<p>/*<em>\n * Correct list images handled incorrectly in IE 7.\n </em>/</p>\n<p>nav ul,\nnav ol {\n    list-style: none;\n    list-style-image: none;\n}</p>\n<p>/<em> ==========================================================================\n   Embedded content\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * 1. Remove border when inside <code>a</code> element in IE 6/7/8/9 and Firefox 3.\n * 2. Improve image quality when scaled in IE 7.\n </em>/</p>\n<p>img {\n    border: 0; /<em> 1 </em>/\n    -ms-interpolation-mode: bicubic; /<em> 2 </em>/\n}</p>\n<p>/*<em>\n * Correct overflow displayed oddly in IE 9.\n </em>/</p>\n<p>svg:not(:root) {\n    overflow: hidden;\n}</p>\n<p>/<em> ==========================================================================\n   Figures\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.\n </em>/</p>\n<p>figure {\n    margin: 0;\n}</p>\n<p>/<em> ==========================================================================\n   Forms\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Correct margin displayed oddly in IE 6/7.\n </em>/</p>\n<p>form {\n    margin: 0;\n}</p>\n<p>/*<em>\n * Define consistent border, margin, and padding.\n </em>/</p>\n<p>fieldset {\n    border: 1px solid #c0c0c0;\n    margin: 0 2px;\n    padding: 0.35em 0.625em 0.75em;\n}</p>\n<p>/*<em>\n * 1. Correct color not being inherited in IE 6/7/8/9.\n * 2. Correct text not wrapping in Firefox 3.\n * 3. Correct alignment displayed oddly in IE 6/7.\n </em>/</p>\n<p>legend {\n    border: 0; /<em> 1 </em>/\n    padding: 0;\n    white-space: normal; /<em> 2 </em>/\n    <em>margin-left: -7px; /</em> 3 */\n}</p>\n<p>/*<em>\n * 1. Correct font size not being inherited in all browsers.\n * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,\n *    and Chrome.\n * 3. Improve appearance and consistency in all browsers.\n </em>/</p>\n<p>button,\ninput,\nselect,\ntextarea {\n    font-size: 100%; /<em> 1 </em>/\n    margin: 0; /<em> 2 </em>/\n    vertical-align: baseline; /<em> 3 </em>/\n    <em>vertical-align: middle; /</em> 3 */\n}</p>\n<p>/*<em>\n * Address Firefox 3+ setting <code>line-height</code> on <code>input</code> using <code>!important</code> in\n * the UA stylesheet.\n </em>/</p>\n<p>button,\ninput {\n    line-height: normal;\n}</p>\n<p>/*<em>\n * Address inconsistent <code>text-transform</code> inheritance for <code>button</code> and <code>select</code>.\n * All other form control elements do not inherit <code>text-transform</code> values.\n * Correct <code>button</code> style inheritance in Chrome, Safari 5+, and IE 6+.\n * Correct <code>select</code> style inheritance in Firefox 4+ and Opera.\n </em>/</p>\n<p>button,\nselect {\n    text-transform: none;\n}</p>\n<p>/<em><em>\n * 1. Avoid the WebKit bug in Android 4.0.</em> where (2) destroys native <code>audio</code>\n *    and <code>video</code> controls.\n * 2. Correct inability to style clickable <code>input</code> types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *    <code>input</code> and others.\n * 4. Remove inner spacing in IE 7 without affecting normal text inputs.\n *    Known issue: inner spacing remains in IE 6.\n </em>/</p>\n<p>button,\nhtml input[type=&rdquo;button&rdquo;], /<em> 1 </em>/\ninput[type=&rdquo;reset&rdquo;],\ninput[type=&rdquo;submit&rdquo;] {\n    -webkit-appearance: button; /<em> 2 </em>/\n    cursor: pointer; /<em> 3 </em>/\n    <em>overflow: visible;  /</em> 4 */\n}</p>\n<p>/*<em>\n * Re-set default cursor for disabled elements.\n </em>/</p>\n<p>button[disabled],\nhtml input[disabled] {\n    cursor: default;\n}</p>\n<p>/*<em>\n * 1. Address box sizing set to content-box in IE 8/9.\n * 2. Remove excess padding in IE 8/9.\n * 3. Remove excess padding in IE 7.\n *    Known issue: excess padding remains in IE 6.\n </em>/</p>\n<p>input[type=&rdquo;checkbox&rdquo;],\ninput[type=&rdquo;radio&rdquo;] {\n    box-sizing: border-box; /<em> 1 </em>/\n    padding: 0; /<em> 2 </em>/\n    <em>height: 13px; /</em> 3 <em>/\n    </em>width: 13px; /<em> 3 </em>/\n}</p>\n<p>/*<em>\n * 1. Address <code>appearance</code> set to <code>searchfield</code> in Safari 5 and Chrome.\n * 2. Address <code>box-sizing</code> set to <code>border-box</code> in Safari 5 and Chrome\n *    (include <code>-moz</code> to future-proof).\n </em>/</p>\n<p>input[type=&rdquo;search&rdquo;] {\n    -webkit-appearance: textfield; /<em> 1 </em>/\n    -moz-box-sizing: content-box;\n    -webkit-box-sizing: content-box; /<em> 2 </em>/\n    box-sizing: content-box;\n}</p>\n<p>/*<em>\n * Remove inner padding and search cancel button in Safari 5 and Chrome\n * on OS X.\n </em>/</p>\n<p>input[type=&rdquo;search&rdquo;]::-webkit-search-cancel-button,\ninput[type=&rdquo;search&rdquo;]::-webkit-search-decoration {\n    -webkit-appearance: none;\n}</p>\n<p>/*<em>\n * Remove inner padding and border in Firefox 3+.\n </em>/</p>\n<p>button::-moz-focus-inner,\ninput::-moz-focus-inner {\n    border: 0;\n    padding: 0;\n}</p>\n<p>/*<em>\n * 1. Remove default vertical scrollbar in IE 6/7/8/9.\n * 2. Improve readability and alignment in all browsers.\n </em>/</p>\n<p>textarea {\n    overflow: auto; /<em> 1 </em>/\n    vertical-align: top; /<em> 2 </em>/\n}</p>\n<p>/<em> ==========================================================================\n   Tables\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Remove most spacing between table cells.\n </em>/</p>\n<p>table {\n    border-collapse: collapse;\n    border-spacing: 0;\n}</p>\n\n\n\n\n\n\n<p>html, body {\n    margin: 0;\n    padding: 0;\n    min-height: 100%;\n  }\n  body {\n    background: #fff;\n    font-family: &ldquo;Source Sans Pro&rdquo;, &ldquo;Helvetica Neueue&rdquo;, Helvetica, sans;\n    font-weight: 300;\n    font-size: 16px;\n    line-height: 1.6em;\n  }\n  #content {\n    width: 70%;\n    max-width: 850px;\n    float: left;\n    padding: 30px 60px;\n    border-left: 1px solid #ddd;\n  }\n  #sidebar {\n    width: 25%;\n    float: left;\n    padding: 30px;\n    overflow: hidden;\n  }\n  #nav {\n    font-size: 130%;\n    margin: 0 0 15px 0;\n  }</p>\n<p>#top {\n    display: block;\n    position: fixed;\n    bottom: 5px;\n    left: 5px;\n    font-size: .85em;\n    text-transform: uppercase;\n  }</p>\n<p>#footer {\n    font-size: .75em;\n    padding: 5px 30px;\n    border-top: 1px solid #ddd;\n    text-align: right;\n  }\n    #footer p {\n      margin: 0 0 0 30px;\n      display: inline-block;\n    }</p>\n<p>h1, h2, h3, h4, h5 {\n    font-weight: 300;\n  }\n  h1 {\n    font-size: 2.5em;\n    line-height: 1.1em;\n    margin: 0 0 .50em 0;\n  }</p>\n<p>h2 {\n    font-size: 1.75em;\n    margin: 1em 0 .50em 0;\n  }</p>\n<p>h3 {\n    margin: 25px 0 10px 0;\n  }</p>\n<p>h4 {\n    margin: 0;\n    font-size: 105%;\n  }</p>\n<p>a {\n    color: #058;\n    text-decoration: none;\n    transition: color .3s ease-in-out;\n  }</p>\n<p>a:hover {\n    color: #e08524;\n    transition: color .3s ease-in-out;\n  }</p>\n<p>pre, code, .mono, .name {\n    font-family: &ldquo;Ubuntu Mono&rdquo;, &ldquo;Cousine&rdquo;, &ldquo;DejaVu Sans Mono&rdquo;, monospace;\n  }</p>\n<p>.title .name {\n    font-weight: bold;\n  }\n  .section-title {\n    margin-top: 2em;\n  }\n  .ident {\n    color: #900;\n  }</p>\n<p>code {\n    background: #f9f9f9;\n  } </p>\n<p>pre {\n    background: #fefefe;\n    border: 1px solid #ddd;\n    box-shadow: 2px 2px 0 #f3f3f3;\n    margin: 0 30px;\n    padding: 15px 30px;\n  }</p>\n<p>.codehilite {\n    margin: 0 30px 10px 30px;\n  }</p>\n<pre><code>.codehilite pre {\n  margin: 0;\n}\n.codehilite .err { background: #ff3300; color: #fff !important; }\n</code></pre>\n<p>table#module-list {\n    font-size: 110%;\n  }</p>\n<pre><code>table#module-list tr td:first-child {\n  padding-right: 10px;\n  white-space: nowrap;\n}\n\ntable#module-list td {\n  vertical-align: top;\n  padding-bottom: 8px;\n}\n\n  table#module-list td p {\n    margin: 0 0 7px 0;\n  }\n</code></pre>\n<p>.def {\n    display: table;\n  }</p>\n<pre><code>.def p {\n  display: table-cell;\n  vertical-align: top;\n  text-align: left;\n}\n\n.def p:first-child {\n  white-space: nowrap;\n}\n\n.def p:last-child {\n  width: 100%;\n}\n</code></pre>\n<p>#index {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n  }\n    ul#index .class_name {\n      /<em> font-size: 110%; </em>/\n      font-weight: bold;\n    }\n    #index ul {\n      margin: 0;\n    }</p>\n<p>.item {\n    margin: 0 0 15px 0;\n  }</p>\n<pre><code>.item .class {\n  margin: 0 0 25px 30px;\n}\n\n  .item .class ul.class_list {\n    margin: 0 0 20px 0;\n  }\n\n.item .name {\n  background: #fafafa;\n  margin: 0;\n  font-weight: bold;\n  padding: 5px 10px;\n  border-radius: 3px;\n  display: inline-block;\n  min-width: 40%;\n}\n  .item .name:hover {\n    background: #f6f6f6;\n  }\n\n.item .empty_desc {\n  margin: 0 0 5px 0;\n  padding: 0;\n}\n\n.item .inheritance {\n  margin: 3px 0 0 30px;\n}\n\n.item .inherited {\n  color: #666;\n}\n\n.item .desc {\n  padding: 0 8px;\n  margin: 0;\n}\n\n  .item .desc p {\n    margin: 0 0 10px 0;\n  }\n\n.source_cont {\n  margin: 0;\n  padding: 0;\n}\n\n.source_link a {\n  background: #ffc300;\n  font-weight: 400;\n  font-size: .75em;\n  text-transform: uppercase;\n  color: #fff;\n  text-shadow: 1px 1px 0 #f4b700;\n\n  padding: 3px 8px;\n  border-radius: 2px;\n  transition: background .3s ease-in-out;\n}\n  .source_link a:hover {\n    background: #FF7200;\n    text-shadow: none;\n    transition: background .3s ease-in-out;\n  }\n\n.source {\n  display: none;\n  max-height: 600px;\n  overflow-y: scroll;\n  margin-bottom: 15px;\n}\n\n  .source .codehilite {\n    margin: 0;\n  }\n</code></pre>\n<p>.desc h1, .desc h2, .desc h3 {\n    font-size: 100% !important;\n  }\n  .clear {\n    clear: both;\n  }</p>\n<p>@media all and (max-width: 950px) {\n    #sidebar {\n      width: 35%;\n    }\n    #content {\n      width: 65%;\n    }\n  }\n  @media all and (max-width: 650px) {\n    #top {\n      display: none;\n    }\n    #sidebar {\n      float: none;\n      width: auto;\n    }\n    #content {\n      float: none;\n      width: auto;\n      padding: 30px;\n    }</p>\n<pre><code>#index ul {\n  padding: 0;\n  margin-bottom: 15px;\n}\n#index ul li {\n  display: inline-block;\n  margin-right: 30px;\n}\n#footer {\n  text-align: left;\n}\n#footer p {\n  display: block;\n  margin: inherit;\n}\n</code></pre>\n<p>}</p>\n<p>/<strong><em>*</em></strong><strong><em>*</em></strong><strong><em>*</em></strong><strong><em>*</em></strong>*/</p>\n\n\n\n\n\n  .codehilite .hll { background-color: #ffffcc }\n.codehilite  { background: #f8f8f8; }\n.codehilite .c { color: #408080; font-style: italic } /<em> Comment </em>/\n.codehilite .err { border: 1px solid #FF0000 } /<em> Error </em>/\n.codehilite .k { color: #008000; font-weight: bold } /<em> Keyword </em>/\n.codehilite .o { color: #666666 } /<em> Operator </em>/\n.codehilite .ch { color: #408080; font-style: italic } /<em> Comment.Hashbang </em>/\n.codehilite .cm { color: #408080; font-style: italic } /<em> Comment.Multiline </em>/\n.codehilite .cp { color: #BC7A00 } /<em> Comment.Preproc </em>/\n.codehilite .cpf { color: #408080; font-style: italic } /<em> Comment.PreprocFile </em>/\n.codehilite .c1 { color: #408080; font-style: italic } /<em> Comment.Single </em>/\n.codehilite .cs { color: #408080; font-style: italic } /<em> Comment.Special </em>/\n.codehilite .gd { color: #A00000 } /<em> Generic.Deleted </em>/\n.codehilite .ge { font-style: italic } /<em> Generic.Emph </em>/\n.codehilite .gr { color: #FF0000 } /<em> Generic.Error </em>/\n.codehilite .gh { color: #000080; font-weight: bold } /<em> Generic.Heading </em>/\n.codehilite .gi { color: #00A000 } /<em> Generic.Inserted </em>/\n.codehilite .go { color: #888888 } /<em> Generic.Output </em>/\n.codehilite .gp { color: #000080; font-weight: bold } /<em> Generic.Prompt </em>/\n.codehilite .gs { font-weight: bold } /<em> Generic.Strong </em>/\n.codehilite .gu { color: #800080; font-weight: bold } /<em> Generic.Subheading </em>/\n.codehilite .gt { color: #0044DD } /<em> Generic.Traceback </em>/\n.codehilite .kc { color: #008000; font-weight: bold } /<em> Keyword.Constant </em>/\n.codehilite .kd { color: #008000; font-weight: bold } /<em> Keyword.Declaration </em>/\n.codehilite .kn { color: #008000; font-weight: bold } /<em> Keyword.Namespace </em>/\n.codehilite .kp { color: #008000 } /<em> Keyword.Pseudo </em>/\n.codehilite .kr { color: #008000; font-weight: bold } /<em> Keyword.Reserved </em>/\n.codehilite .kt { color: #B00040 } /<em> Keyword.Type </em>/\n.codehilite .m { color: #666666 } /<em> Literal.Number </em>/\n.codehilite .s { color: #BA2121 } /<em> Literal.String </em>/\n.codehilite .na { color: #7D9029 } /<em> Name.Attribute </em>/\n.codehilite .nb { color: #008000 } /<em> Name.Builtin </em>/\n.codehilite .nc { color: #0000FF; font-weight: bold } /<em> Name.Class </em>/\n.codehilite .no { color: #880000 } /<em> Name.Constant </em>/\n.codehilite .nd { color: #AA22FF } /<em> Name.Decorator </em>/\n.codehilite .ni { color: #999999; font-weight: bold } /<em> Name.Entity </em>/\n.codehilite .ne { color: #D2413A; font-weight: bold } /<em> Name.Exception </em>/\n.codehilite .nf { color: #0000FF } /<em> Name.Function </em>/\n.codehilite .nl { color: #A0A000 } /<em> Name.Label </em>/\n.codehilite .nn { color: #0000FF; font-weight: bold } /<em> Name.Namespace </em>/\n.codehilite .nt { color: #008000; font-weight: bold } /<em> Name.Tag </em>/\n.codehilite .nv { color: #19177C } /<em> Name.Variable </em>/\n.codehilite .ow { color: #AA22FF; font-weight: bold } /<em> Operator.Word </em>/\n.codehilite .w { color: #bbbbbb } /<em> Text.Whitespace </em>/\n.codehilite .mb { color: #666666 } /<em> Literal.Number.Bin </em>/\n.codehilite .mf { color: #666666 } /<em> Literal.Number.Float </em>/\n.codehilite .mh { color: #666666 } /<em> Literal.Number.Hex </em>/\n.codehilite .mi { color: #666666 } /<em> Literal.Number.Integer </em>/\n.codehilite .mo { color: #666666 } /<em> Literal.Number.Oct </em>/\n.codehilite .sa { color: #BA2121 } /<em> Literal.String.Affix </em>/\n.codehilite .sb { color: #BA2121 } /<em> Literal.String.Backtick </em>/\n.codehilite .sc { color: #BA2121 } /<em> Literal.String.Char </em>/\n.codehilite .dl { color: #BA2121 } /<em> Literal.String.Delimiter </em>/\n.codehilite .sd { color: #BA2121; font-style: italic } /<em> Literal.String.Doc </em>/\n.codehilite .s2 { color: #BA2121 } /<em> Literal.String.Double </em>/\n.codehilite .se { color: #BB6622; font-weight: bold } /<em> Literal.String.Escape </em>/\n.codehilite .sh { color: #BA2121 } /<em> Literal.String.Heredoc </em>/\n.codehilite .si { color: #BB6688; font-weight: bold } /<em> Literal.String.Interpol </em>/\n.codehilite .sx { color: #008000 } /<em> Literal.String.Other </em>/\n.codehilite .sr { color: #BB6688 } /<em> Literal.String.Regex </em>/\n.codehilite .s1 { color: #BA2121 } /<em> Literal.String.Single </em>/\n.codehilite .ss { color: #19177C } /<em> Literal.String.Symbol </em>/\n.codehilite .bp { color: #008000 } /<em> Name.Builtin.Pseudo </em>/\n.codehilite .fm { color: #0000FF } /<em> Name.Function.Magic </em>/\n.codehilite .vc { color: #19177C } /<em> Name.Variable.Class </em>/\n.codehilite .vg { color: #19177C } /<em> Name.Variable.Global </em>/\n.codehilite .vi { color: #19177C } /<em> Name.Variable.Instance </em>/\n.codehilite .vm { color: #19177C } /<em> Name.Variable.Magic </em>/\n.codehilite .il { color: #666666 } /<em> Literal.Number.Integer.Long </em>/\n  \n\n\n\n\n<p>/<em> ==========================================================================\n   EXAMPLE Media Queries for Responsive Design.\n   These examples override the primary (&lsquo;mobile first&rsquo;) styles.\n   Modify as content requires.\n   ========================================================================== </em>/</p>\n<p>@media only screen and (min-width: 35em) {\n    /<em> Style adjustments for viewports that meet the condition </em>/\n}</p>\n<p>@media print,\n       (-o-min-device-pixel-ratio: 5/4),\n       (-webkit-min-device-pixel-ratio: 1.25),\n       (min-resolution: 120dpi) {\n    /<em> Style adjustments for high resolution devices </em>/\n}</p>\n<p>/<em> ==========================================================================\n   Print styles.\n   Inlined to avoid required HTTP connection: h5bp.com/r\n   ========================================================================== </em>/</p>\n<p>@media print {\n    * {\n        background: transparent !important;\n        color: #000 !important; /<em> Black prints faster: h5bp.com/s </em>/\n        box-shadow: none !important;\n        text-shadow: none !important;\n    }</p>\n<pre><code>a,\na:visited {\n    text-decoration: underline;\n}\n\na[href]:after {\n    content: \" (\" attr(href) \")\";\n}\n\nabbr[title]:after {\n    content: \" (\" attr(title) \")\";\n}\n\n/*\n * Don't show links for images, or javascript/internal links\n */\n\n.ir a:after,\na[href^=\"javascript:\"]:after,\na[href^=\"#\"]:after {\n    content: \"\";\n}\n\npre,\nblockquote {\n    border: 1px solid #999;\n    page-break-inside: avoid;\n}\n\nthead {\n    display: table-header-group; /* h5bp.com/t */\n}\n\ntr,\nimg {\n    page-break-inside: avoid;\n}\n\nimg {\n    max-width: 100% !important;\n}\n\n@page {\n    margin: 0.5cm;\n}\n\np,\nh2,\nh3 {\n    orphans: 3;\n    widows: 3;\n}\n\nh2,\nh3 {\n    page-break-after: avoid;\n}\n</code></pre>\n<p>}</p>\n\n\n\n\n\n  function toggle(id, $link) {\n    $node = document.getElementById(id);\n    if (!$node)\n    return;\n    if (!$node.style.display || $node.style.display == &lsquo;none&rsquo;) {\n    $node.style.display = &lsquo;block&rsquo;;\n    $link.innerHTML = &lsquo;Hide source &nequiv;&lsquo;;\n    } else {\n    $node.style.display = &lsquo;none&rsquo;;\n    $link.innerHTML = &lsquo;Show source &equiv;&lsquo;;\n    }\n  }\n  \n\n\n\n\n\n\nTop\n\n\n\n\n  \n\n    \nIndex\n\n    \n\n\n\n    \nClasses\n\n      \n\n        \n\n        \nTaskCat\n\n\n\n  \n\n    \n__init__\n\n    \naws_api_init\n\n    \ncleanup\n\n    \ncollect_resources\n\n    \ncreatecfnlogs\n\n    \ncreatereport\n\n    \ndeep_cleanup\n\n    \ndefine_tests\n\n    \ngenpassword\n\n    \ngenreport\n\n    \nget_all_resources\n\n    \nget_available_azs\n\n    \nget_capabilities\n\n    \nget_cfnlogs\n\n    \nget_config\n\n    \nget_default_region\n\n    \nget_docleanup\n\n    \nget_global_region\n\n    \nget_parameter_file\n\n    \nget_parameter_path\n\n    \nget_password\n\n    \nget_project\n\n    \nget_resources\n\n    \nget_resources_helper\n\n    \nget_s3_url\n\n    \nget_s3bucket\n\n    \nget_s3contents\n\n    \nget_stackstatus\n\n    \nget_template_file\n\n    \nget_template_path\n\n    \nget_test_region\n\n    \nif_stackexists\n\n    \nparse_stack_info\n\n    \nregxfind\n\n    \nset_capabilities\n\n    \nset_config\n\n    \nset_default_region\n\n    \nset_docleanup\n\n    \nset_parameter_file\n\n    \nset_parameter_path\n\n    \nset_password\n\n    \nset_project\n\n    \nset_s3bucket\n\n    \nset_template_file\n\n    \nset_template_path\n\n    \nset_test_region\n\n    \nstackcheck\n\n    \nstackcreate\n\n    \nstackdelete\n\n    \nstage_in_s3\n\n    \nvalidate_json\n\n    \nvalidate_parameters\n\n    \nvalidate_template\n\n    \nvalidate_yaml\n\n    \nwelcome\n\n    \nwrite_logs\n\n  \n\n\n        \n\n      \n\n    \n\n\n    \n\n  \n\n\n    \n\n\n\n\n\n\n\n  \n\n  \ntaskcat\n module\n\n\n\n  \nShow source \u2261\n\n  \n\n    \n#!/usr/bin/env python\n\n\n# -*- coding: UTF-8 -*-\n\n\n# authors:\n\n\n# Tony Vattathil tonynv@amazon.com, avattathil@gmail.com\n\n\n# Shivansh Singh sshvans@amazon.com,\n\n\n# Santiago Cardenas sancard@amazon.com,\n\n\n#\n\n\n# repo: https://github.com/aws-quickstart/taskcat\n\n\n# docs: https://aws-quickstart.github.io/taskcat/\n\n\n#\n\n\n# This program takes as input:\n\n\n# CloudFormation template and json formatted parameter input file\n\n\n# To create tests define the test params in config.yml (Example below)\n\n\n# Planned Features:\n\n\n# - Email test results to owner of project\n\n\n\n# --imports --\n\n\nfrom\n \n__future__\n \nimport\n \nabsolute_import\n\n\nfrom\n \n__future__\n \nimport\n \nprint_function\n\n\n\nimport\n \nargparse\n\n\nimport\n \nbase64\n\n\nimport\n \ndatetime\n\n\nimport\n \njson\n\n\nimport\n \nos\n\n\nimport\n \nrandom\n\n\nimport\n \nre\n\n\nimport\n \nsys\n\n\nimport\n \ntextwrap\n\n\nimport\n \ntime\n\n\nimport\n \nuuid\n\n\nfrom\n \nargparse\n \nimport\n \nRawTextHelpFormatter\n\n\n\nimport\n \nboto3\n\n\nimport\n \npyfiglet\n\n\nimport\n \ntabulate\n\n\nimport\n \nyaml\n\n\nimport\n \nyattag\n\n\nfrom\n \nbotocore.client\n \nimport\n \nConfig\n\n\nfrom\n \nbotocore.vendored\n \nimport\n \nrequests\n\n\nfrom\n \nbotocore.exceptions\n \nimport\n \nClientError\n\n\nfrom\n \npkg_resources\n \nimport\n \nget_distribution\n\n\n\nfrom\n \ntaskcat.sweeper\n \nimport\n \nSweeper\n\n\n\n# Version Tag\n\n\n__version__\n \n=\n \nget_distribution\n(\n'taskcat'\n)\n.\nversion\n\n\nversion\n=\n__version__\n\n\ndebug\n \n=\n \n''\n\n\nerror\n \n=\n \n''\n\n\ncheck\n \n=\n \n''\n\n\nfail\n \n=\n \n''\n\n\ninfo\n \n=\n \n''\n\n\nsig\n \n=\n \nbase64\n.\nb64decode\n(\n\"dENhVA==\"\n)\n.\ndecode\n()\n\n\njobid\n \n=\n \nstr\n(\nuuid\n.\nuuid4\n())\n\n\nheader\n \n=\n \n'\n\\x1b\n[1;41;0m'\n\n\nhightlight\n \n=\n \n'\n\\x1b\n[0;30;47m'\n\n\nname_color\n \n=\n \n'\n\\x1b\n[0;37;44m'\n\n\naqua\n \n=\n \n'\n\\x1b\n[0;30;46m'\n\n\ngreen\n \n=\n \n'\n\\x1b\n[0;30;42m'\n\n\nwhite\n \n=\n \n'\n\\x1b\n[0;30;47m'\n\n\norange\n \n=\n \n'\n\\x1b\n[0;30;43m'\n\n\nred\n \n=\n \n'\n\\x1b\n[0;30;41m'\n\n\nrst_color\n \n=\n \n'\n\\x1b\n[0m'\n\n\nE\n \n=\n \n'{1}[ERROR {0} ]{2} :'\n.\nformat\n(\nerror\n,\n \nred\n,\n \nrst_color\n)\n\n\nD\n \n=\n \n'{1}[DEBUG {0} ]{2} :'\n.\nformat\n(\ndebug\n,\n \naqua\n,\n \nrst_color\n)\n\n\nP\n \n=\n \n'{1}[PASS  {0} ]{2} :'\n.\nformat\n(\ncheck\n,\n \ngreen\n,\n \nrst_color\n)\n\n\nF\n \n=\n \n'{1}[FAIL  {0} ]{2} :'\n.\nformat\n(\nfail\n,\n \nred\n,\n \nrst_color\n)\n\n\nI\n \n=\n \n'{1}[INFO  {0} ]{2} :'\n.\nformat\n(\ninfo\n,\n \norange\n,\n \nrst_color\n)\n\n\n\n# Example config.yml\n\n\n# --Begin\n\n\nyaml_cfg\n \n=\n \n'''\n\n\nglobal:\n\n\n  notification: true\n\n\n  owner: avattathil@gmail.com\n\n\n  project: projectx\n\n\n  reporting: true\n\n\n  regions:\n\n\n    - us-east-1\n\n\n    - us-west-1\n\n\n    - us-west-2\n\n\n  report_email-to-owner: true\n\n\n  report_publish-to-s3: true\n\n\n  report_s3bucket: taskcat-reports\n\n\n  s3bucket: projectx-templates\n\n\ntests:\n\n\n  projectx-scenario-1:\n\n\n    parameter_input: projectx-scenario-1.json\n\n\n    regions:\n\n\n      - us-west-1\n\n\n      - us-east-1\n\n\n    template_file: projectx.template\n\n\n  projetx-mainscenarioo-all-regions:\n\n\n    parameter_input: projectx-scenario-all-regions.json\n\n\n    template_file: projectx.template\n\n\n'''\n\n\n# --End\n\n\n# Example config.yml\n\n\n\n# Not implemented\n\n\n# ------------------------------- System variables\n\n\n# --Begin\n\n\nsys_yml\n \n=\n \n'sys_config.yml'\n\n\n\n\n# --End\n\n\n# --------------------------------System variables\n\n\n\n\ndef\n \nbuildmap\n(\nstart_location\n,\n \nmapstring\n):\n\n    \n\"\"\"\n\n\n    Given a start location and a string value, this function returns a list of\n\n\n    file paths containing the given string value, down in the directory\n\n\n    structure from the start location.\n\n\n\n    :param start_location: directory from where to start looking for the file\n\n\n    :param mapstring: value to match in the file path\n\n\n    :return:\n\n\n        list of file paths containing the given value.\n\n\n    \"\"\"\n\n    \nfs_map\n \n=\n \n[]\n\n    \nfor\n \nfs_path\n,\n \ndirs\n,\n \nfilelist\n \nin\n \nos\n.\nwalk\n(\nstart_location\n,\n \ntopdown\n=\nFalse\n):\n\n        \nfor\n \nfs_file\n \nin\n \nfilelist\n:\n\n            \nfs_path_to_file\n \n=\n \n(\nos\n.\npath\n.\njoin\n(\nfs_path\n,\n \nfs_file\n))\n\n            \nif\n \nmapstring\n \nin\n \nfs_path_to_file\n \nand\n \n'.git'\n \nnot\n \nin\n \nfs_path_to_file\n:\n\n                \nfs_map\n.\nappend\n(\nfs_path_to_file\n)\n\n    \nreturn\n \nfs_map\n\n\n\n\n\"\"\"\n\n\n    This class is used to represent the test data.\n\n\n\"\"\"\n\n\n\n\nclass\n \nTestData\n(\nobject\n):\n\n    \ndef\n \n__init__\n(\nself\n):\n\n        \nself\n.\n__test_name\n \n=\n \nNone\n\n        \nself\n.\n__test_stacks\n \n=\n \n[]\n\n\n    \ndef\n \nset_test_name\n(\nself\n,\n \nname\n):\n\n        \nself\n.\n__test_name\n \n=\n \nname\n\n\n    \ndef\n \nget_test_name\n(\nself\n):\n\n        \nreturn\n \nself\n.\n__test_name\n\n\n    \ndef\n \nget_test_stacks\n(\nself\n):\n\n        \nreturn\n \nself\n.\n__test_stacks\n\n\n    \ndef\n \nadd_test_stack\n(\nself\n,\n \nstack\n):\n\n        \nself\n.\n__test_stacks\n.\nappend\n(\nstack\n)\n\n\n\n\n\"\"\"\n\n\n    Task(Cat = CloudFormation Automated Testing)\n\n\n\n    This is the main TaskCat class, which provides various functions to\n\n\n    perform testing of CloudFormation templates in multiple regions and\n\n\n    generate report.\n\n\n\"\"\"\n\n\n\n\n# noinspection PyUnresolvedReferences\n\n\nclass\n \nTaskCat\n(\nobject\n):\n\n    \n# CONSTRUCTOR\n\n    \n# ============\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nnametag\n=\n'[taskcat]'\n):\n\n        \nself\n.\nnametag\n \n=\n \n'{1}{0}{2}'\n.\nformat\n(\nnametag\n,\n \nname_color\n,\n \nrst_color\n)\n\n        \nself\n.\nproject\n \n=\n \nNone\n\n        \nself\n.\nbanner\n \n=\n \nNone\n\n        \nself\n.\ncapabilities\n \n=\n \n[]\n\n        \nself\n.\nverbose\n \n=\n \nFalse\n\n        \nself\n.\nconfig\n \n=\n \n'config.yml'\n\n        \nself\n.\ntest_region\n \n=\n \n[]\n\n        \nself\n.\ns3bucket\n \n=\n \nNone\n\n        \nself\n.\ntemplate_path\n \n=\n \nNone\n\n        \nself\n.\nparameter_path\n \n=\n \nNone\n\n        \nself\n.\ndefult_region\n \n=\n \n\"us-east-1\"\n\n        \nself\n.\n_template_file\n \n=\n \nNone\n\n        \nself\n.\n_parameter_file\n \n=\n \nNone\n\n        \nself\n.\n_parameter_path\n \n=\n \nNone\n\n        \nself\n.\n_termsize\n \n=\n \n110\n\n        \nself\n.\n_banner\n \n=\n \n\"\"\n\n        \nself\n.\n_report\n \n=\n \nFalse\n\n        \nself\n.\n_use_global\n \n=\n \nFalse\n\n        \nself\n.\n_password\n \n=\n \nNone\n\n        \nself\n.\nrun_cleanup\n \n=\n \nTrue\n\n\n    \n# SETTERS AND GETTERS\n\n    \n# ===================\n\n\n    \ndef\n \nset_project\n(\nself\n,\n \nproject\n):\n\n        \nself\n.\nproject\n \n=\n \nproject\n\n\n    \ndef\n \nget_project\n(\nself\n):\n\n        \nreturn\n \nself\n.\nproject\n\n\n    \ndef\n \nset_capabilities\n(\nself\n,\n \nability\n):\n\n        \nself\n.\ncapabilities\n.\nappend\n(\nability\n)\n\n\n    \ndef\n \nget_capabilities\n(\nself\n):\n\n        \nreturn\n \nself\n.\ncapabilities\n\n\n    \ndef\n \nset_s3bucket\n(\nself\n,\n \nbucket\n):\n\n        \nself\n.\ns3bucket\n \n=\n \nbucket\n\n\n    \ndef\n \nget_s3bucket\n(\nself\n):\n\n        \nreturn\n \nstr\n(\nself\n.\ns3bucket\n)\n\n\n    \ndef\n \nset_config\n(\nself\n,\n \nconfig_yml\n):\n\n        \nif\n \nos\n.\npath\n.\nisfile\n(\nconfig_yml\n):\n\n            \nself\n.\nconfig\n \n=\n \nconfig_yml\n\n        \nelse\n:\n\n            \nprint\n(\n\"Cannot locate file \n%s\n\"\n \n%\n \nconfig_yml\n)\n\n            \nexit\n(\n1\n)\n\n\n    \ndef\n \nget_config\n(\nself\n):\n\n        \nreturn\n \nself\n.\nconfig\n\n\n    \ndef\n \nget_template_file\n(\nself\n):\n\n        \nreturn\n \nself\n.\n_template_file\n\n\n    \ndef\n \nset_template_file\n(\nself\n,\n \ntemplate\n):\n\n        \nself\n.\n_template_file\n \n=\n \ntemplate\n\n\n    \ndef\n \nset_parameter_file\n(\nself\n,\n \nparameter\n):\n\n        \nself\n.\n_parameter_file\n \n=\n \nparameter\n\n\n    \ndef\n \nget_parameter_file\n(\nself\n):\n\n        \nreturn\n \nself\n.\n_parameter_file\n\n\n    \ndef\n \nset_parameter_path\n(\nself\n,\n \nparameter\n):\n\n        \nself\n.\nparameter_path\n \n=\n \nparameter\n\n\n    \ndef\n \nget_parameter_path\n(\nself\n):\n\n        \nreturn\n \nself\n.\nparameter_path\n\n\n    \ndef\n \nset_template_path\n(\nself\n,\n \ntemplate\n):\n\n        \nself\n.\ntemplate_path\n \n=\n \ntemplate\n\n\n    \ndef\n \nget_template_path\n(\nself\n):\n\n        \nreturn\n \nself\n.\ntemplate_path\n\n\n    \ndef\n \nset_password\n(\nself\n,\n \npassword\n):\n\n        \nself\n.\n_password\n \n=\n \npassword\n\n\n    \ndef\n \nget_password\n(\nself\n):\n\n        \nreturn\n \nself\n.\n_password\n\n\n    \ndef\n \nset_default_region\n(\nself\n,\n \nregion\n):\n\n        \nself\n.\ndefult_region\n \n=\n \nregion\n\n\n    \ndef\n \nget_default_region\n(\nself\n):\n\n        \nreturn\n \nself\n.\ndefult_region\n\n\n    \ndef\n \nget_test_region\n(\nself\n):\n\n        \nreturn\n \nself\n.\ntest_region\n\n\n    \ndef\n \nset_test_region\n(\nself\n,\n \nregion_list\n):\n\n        \nself\n.\ntest_region\n \n=\n \n[]\n\n        \nfor\n \nregion\n \nin\n \nregion_list\n:\n\n            \nself\n.\ntest_region\n.\nappend\n(\nregion\n)\n\n\n    \ndef\n \nset_docleanup\n(\nself\n,\n \ncleanup_value\n):\n\n        \nself\n.\nrun_cleanup\n \n=\n \ncleanup_value\n\n\n    \ndef\n \nget_docleanup\n(\nself\n):\n\n        \nreturn\n \nself\n.\nrun_cleanup\n\n\n    \n#      FUNCTIONS       #\n\n    \n# ==================== #\n\n\n    \ndef\n \nstage_in_s3\n(\nself\n,\n \ntaskcat_cfg\n):\n\n        \n\"\"\"\n\n\n        Upload templates and other artifacts to s3.\n\n\n\n        This function creates the s3 bucket with name provided in the config yml file. If\n\n\n        no bucket name provided, it creates the s3 bucket using project name provided in\n\n\n        config yml file. And uploads the templates and other artifacts to the s3 bucket.\n\n\n\n        :param taskcat_cfg: Taskcat configuration provided in yml file\n\n\n\n        \"\"\"\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n        \nprint\n(\n\"{} |CONTENTS OF  S3 BUCKET{}\"\n.\nformat\n(\nself\n.\nnametag\n,\n \nheader\n,\n \nrst_color\n))\n\n\n        \nproject\n \n=\n \ntaskcat_cfg\n[\n'global'\n][\n'qsname'\n]\n\n\n        \ns3\n \n=\n \nboto3\n.\nresource\n(\n's3'\n)\n\n        \nif\n \n's3bucket'\n \nin\n \ntaskcat_cfg\n[\n'global'\n]\n.\nkeys\n():\n\n            \nbucket\n \n=\n \ns3\n.\nBucket\n(\ntaskcat_cfg\n[\n'global'\n][\n's3bucket'\n])\n\n            \nprint\n(\nI\n \n+\n \n\"Staging Bucket => \"\n \n+\n \nbucket\n.\nname\n)\n\n            \nself\n.\nset_s3bucket\n(\nbucket\n.\nname\n)\n\n        \nelse\n:\n\n            \nauto_bucket\n \n=\n \n'taskcat-'\n \n+\n \nproject\n \n+\n \n\"-\"\n \n+\n \njobid\n[:\n8\n]\n\n            \nprint\n(\nI\n \n+\n \n\"Staging Bucket => \"\n \n+\n \nauto_bucket\n)\n\n            \ns3\n.\ncreate_bucket\n(\nBucket\n=\nauto_bucket\n)\n\n            \nbucket\n \n=\n \ns3\n.\nBucket\n(\nauto_bucket\n)\n\n            \nself\n.\nset_s3bucket\n(\nbucket\n.\nname\n)\n\n\n        \nself\n.\nset_project\n(\nproject\n)\n\n        \nif\n \nos\n.\npath\n.\nisdir\n(\nproject\n):\n\n            \nfsmap\n \n=\n \nbuildmap\n(\n'.'\n,\n \nproject\n)\n\n        \nelse\n:\n\n            \nexample1\n \n=\n \n'''\n\n\n            # Name of example project = [projectx]\n\n\n            # Command issued to run taskcat = taskcat.py -c projectx/ci/config.yml\n\n\n            Hint: if taskcat.py is not in your path specify the full path to taskcat.py\n\n\n            \n\n\n            # Example of expected directory/project structure\n\n\n            projectx\n\n\n            \u251c\u2500\u2500 LICENSE.txt\n\n\n            \u251c\u2500\u2500 ci\n\n\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 taskcat.yml         # TaskCat Configuration file\n\n\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 projectx-input.json # Inputs to pass during stackcreation\n\n\n            \u251c\u2500\u2500 scripts\n\n\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 project-userdata.sh # Any scripts that is part of this project\n\n\n            \u2514\u2500\u2500 templates\n\n\n                \u2514\u2500\u2500 projectx.template\n\n\n\n            # Contents of taskcat.yml\n\n\n            global:\n\n\n              qsname: projectx\n\n\n              regions:\n\n\n                - us-east-1\n\n\n                - us-west-1\n\n\n                - us-west-2\n\n\n             \n\n\n            tests:\n\n\n              projectx-test:\n\n\n                template_file: projectx.template\n\n\n                parameter_input: projectx-input.json\n\n\n                '''\n\n\n            \nprint\n(\n'''\n\\t\\t\n Hint: The name specfied as value of qsname ({})\n\n\n                    must match the root directory of your project'''\n.\nformat\n(\nproject\n))\n\n            \nprint\n(\n\"{0}!Cannot find directory [{1}] in {2}\"\n.\nformat\n(\nE\n,\n \nproject\n,\n \nos\n.\ngetcwd\n()))\n\n            \nprint\n(\n\"\n\\n\\t\n    Example:{}\"\n.\nformat\n(\nexample1\n,\n \n'\n\\n\n'\n))\n\n            \nprint\n(\nI\n \n+\n \n\"Please cd to where you project is located\"\n)\n\n            \nsys\n.\nexit\n(\n1\n)\n\n\n        \nfor\n \nfilename\n \nin\n \nfsmap\n:\n\n            \ntry\n:\n\n                \nupload\n \n=\n \nre\n.\nsub\n(\n'^./'\n,\n \n''\n,\n \nfilename\n)\n\n                \nbucket\n.\nAcl\n()\n.\nput\n(\nACL\n=\n'public-read'\n)\n\n                \nbucket\n.\nupload_file\n(\nfilename\n,\n\n                                   \nupload\n,\n\n                                   \nExtraArgs\n=\n{\n'ACL'\n:\n \n'public-read'\n})\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nprint\n(\n\"Cannot Upload to bucket => \n%s\n\"\n \n%\n \nbucket\n.\nname\n)\n\n                \nprint\n(\nE\n \n+\n \n\"Check that you bucketname is correct\"\n)\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\n1\n)\n\n\n        \nfor\n \nobj\n \nin\n \nbucket\n.\nobjects\n.\nall\n():\n\n            \no\n \n=\n \nstr\n(\n'{0}/{1}'\n.\nformat\n(\nself\n.\nget_s3bucket\n(),\n \nobj\n.\nkey\n))\n\n            \nprint\n(\no\n)\n\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n\n    \n@staticmethod\n\n    \ndef\n \nget_available_azs\n(\nregion\n,\n \ncount\n):\n\n        \n\"\"\"\n\n\n        Returns a list of availability zones in a given region.\n\n\n\n        :param region: Region for the availability zones\n\n\n        :param count: Minimum number of availability zones needed\n\n\n\n        :return: List of availability zones in a given region\n\n\n\n        \"\"\"\n\n        \navailable_azs\n \n=\n \n[]\n\n        \nec2_client\n \n=\n \nboto3\n.\nclient\n(\n'ec2'\n,\n \nregion_name\n=\nregion\n)\n\n        \navailability_zones\n \n=\n \nec2_client\n.\ndescribe_availability_zones\n(\n\n            \nFilters\n=\n[{\n'Name'\n:\n \n'state'\n,\n \n'Values'\n:\n \n[\n'available'\n]}])\n\n\n        \nfor\n \naz\n \nin\n \navailability_zones\n[\n'AvailabilityZones'\n]:\n\n            \navailable_azs\n.\nappend\n(\naz\n[\n'ZoneName'\n])\n\n\n        \nif\n \nlen\n(\navailable_azs\n)\n \n<\n \ncount\n:\n\n            \nprint\n(\n\"{0}!Only {1} az's are available in {2}\"\n.\nformat\n(\nE\n,\n \nlen\n(\navailable_azs\n),\n \nregion\n))\n\n            \nquit\n()\n\n        \nelse\n:\n\n            \nazs\n \n=\n \n','\n.\njoin\n(\navailable_azs\n[:\ncount\n])\n\n            \nreturn\n \nazs\n\n\n    \n@staticmethod\n\n    \ndef\n \nget_s3contents\n(\nurl\n):\n\n        \npayload\n \n=\n \nrequests\n.\nget\n(\nurl\n)\n\n        \nreturn\n \npayload\n.\ntext\n\n\n    \ndef\n \nget_s3_url\n(\nself\n,\n \nkey\n):\n\n        \n\"\"\"\n\n\n        Returns S3 url of a given object.\n\n\n\n        :param key: Name of the object whose S3 url is being returned\n\n\n        :return: S3 url of the given key\n\n\n\n        \"\"\"\n\n        \nclient\n \n=\n \nboto3\n.\nclient\n(\n's3'\n,\n \nconfig\n=\nConfig\n(\nsignature_version\n=\n's3v4'\n))\n\n\n        \nbucket_location\n \n=\n \nclient\n.\nget_bucket_location\n(\n\n            \nBucket\n=\nself\n.\nget_s3bucket\n())\n\n        \nresult\n \n=\n \nclient\n.\nlist_objects\n(\nBucket\n=\nself\n.\nget_s3bucket\n(),\n\n                                     \nPrefix\n=\nself\n.\nget_project\n())\n\n        \ncontents\n \n=\n \nresult\n.\nget\n(\n'Contents'\n)\n\n        \nfor\n \ns3obj\n \nin\n \ncontents\n:\n\n            \nfor\n \nmetadata\n \nin\n \ns3obj\n.\nitems\n():\n\n                \nif\n \nmetadata\n[\n0\n]\n \n==\n \n'Key'\n:\n\n                    \nif\n \nkey\n \nin\n \nmetadata\n[\n1\n]:\n\n                        \n# Finding exact match\n\n                        \nterms\n \n=\n \nmetadata\n[\n1\n]\n.\nsplit\n(\n\"/\"\n)\n\n                        \nif\n \nkey\n \n==\n \nterms\n[\n-\n1\n]:\n\n                            \nif\n \nbucket_location\n[\n\n                                \n'LocationConstraint'\n\n                            \n]\n \nis\n \nnot\n \nNone\n:\n\n                                \no_url\n \n=\n \n\"https://s3-{0}.{1}/{2}/{3}\"\n.\nformat\n(\n\n                                    \nbucket_location\n[\n'LocationConstraint'\n],\n\n                                    \n\"amazonaws.com\"\n,\n\n                                    \nself\n.\nget_s3bucket\n(),\n\n                                    \nmetadata\n[\n1\n])\n\n                                \nreturn\n \no_url\n\n                            \nelse\n:\n\n                                \namzns3\n \n=\n \n's3.amazonaws.com'\n\n                                \no_url\n \n=\n \n\"https://{0}/{1}/{2}\"\n.\nformat\n(\namzns3\n,\n \nself\n.\nget_s3bucket\n(),\n \nmetadata\n[\n1\n])\n\n                                \nreturn\n \no_url\n\n\n    \ndef\n \nget_global_region\n(\nself\n,\n \nyamlcfg\n):\n\n        \n\"\"\"\n\n\n        Returns a list of regions defined under global region in the yml config file.\n\n\n\n        :param yamlcfg: Content of the yml config file\n\n\n        :return: List of regions\n\n\n\n        \"\"\"\n\n        \ng_regions\n \n=\n \n[]\n\n        \nfor\n \nkeys\n \nin\n \nyamlcfg\n[\n'global'\n]\n.\nkeys\n():\n\n            \nif\n \n'region'\n \nin\n \nkeys\n:\n\n                \ntry\n:\n\n                    \niter\n(\nyamlcfg\n[\n'global'\n][\n'regions'\n])\n\n                    \nnamespace\n \n=\n \n'global'\n\n                    \nfor\n \nregion\n \nin\n \nyamlcfg\n[\n'global'\n][\n'regions'\n]:\n\n                        \n# print(\"found region %s\" % region)\n\n                        \ng_regions\n.\nappend\n(\nregion\n)\n\n                        \nself\n.\n_use_global\n \n=\n \nTrue\n\n                \nexcept\n \nTypeError\n:\n\n                    \nprint\n(\n\"No regions defined in [\n%s\n]:\"\n \n%\n \nnamespace\n)\n\n                    \nprint\n(\n\"Please correct region defs[\n%s\n]:\"\n \n%\n \nnamespace\n)\n\n        \nreturn\n \ng_regions\n\n\n    \ndef\n \nget_resources\n(\nself\n,\n \nstackname\n,\n \nregion\n,\n \ninclude_stacks\n=\nFalse\n):\n\n        \n\"\"\"\n\n\n        Given a stackname, and region function returns the list of dictionary items, where each item\n\n\n        consist of logicalId, physicalId and resourceType of the aws resource associated\n\n\n        with the stack.\n\n\n\n        :param include_stacks: \n\n\n        :param stackname: CloudFormation stack name\n\n\n        :param region: AWS region\n\n\n        :return: List of objects in the following format\n\n\n             [\n\n\n                 {\n\n\n                     'logicalId': 'string',\n\n\n                     'physicalId': 'string',\n\n\n                     'resourceType': 'String'\n\n\n                 },\n\n\n             ]\n\n\n\n        \"\"\"\n\n        \nl_resources\n \n=\n \n[]\n\n        \nself\n.\nget_resources_helper\n(\nstackname\n,\n \nregion\n,\n \nl_resources\n,\n \ninclude_stacks\n)\n\n        \nreturn\n \nl_resources\n\n\n    \ndef\n \nget_resources_helper\n(\nself\n,\n \nstackname\n,\n \nregion\n,\n \nl_resources\n,\n \ninclude_stacks\n):\n\n        \n\"\"\"\n\n\n        This is a helper function of get_resources function. Check get_resources function for details.\n\n\n\n        \"\"\"\n\n        \nif\n \nstackname\n \n!=\n \n'None'\n:\n\n            \ntry\n:\n\n                \ncfn\n \n=\n \nboto3\n.\nclient\n(\n\n                    \n'cloudformation'\n,\n \nregion\n)\n\n                \nresult\n \n=\n \ncfn\n.\ndescribe_stack_resources\n(\n\n                    \nStackName\n=\nstackname\n)\n\n                \nstackresources\n \n=\n \nresult\n.\nget\n(\n'StackResources'\n)\n\n                \nfor\n \nresource\n \nin\n \nstackresources\n:\n\n                    \nif\n \nself\n.\nverbose\n:\n\n                        \nprint\n(\nD\n \n+\n \n\"Resources: for {}\"\n.\nformat\n(\nstackname\n))\n\n                        \nprint\n(\nD\n \n+\n \n\"{0} = {1}, {2} = {3}, {4} = {5}\"\n.\nformat\n(\n\n                            \n'\n\\n\\t\\t\nLogicalId'\n,\n\n                            \nresource\n.\nget\n(\n'LogicalResourceId'\n),\n\n                            \n'\n\\n\\t\\t\nPhysicalId'\n,\n\n                            \nresource\n.\nget\n(\n'PhysicalResourceId'\n),\n\n                            \n'\n\\n\\t\\t\nType'\n,\n\n                            \nresource\n.\nget\n(\n'ResourceType'\n)\n\n                        \n))\n\n                    \n# if resource is a stack and has a physical resource id (NOTE: physical id will be missing if stack creation is failed)\n\n                    \nif\n \nresource\n.\nget\n(\n\n                            \n'ResourceType'\n)\n \n==\n \n'AWS::CloudFormation::Stack'\n \nand\n \n'PhysicalResourceId'\n \nin\n \nresource\n:\n\n                        \nif\n \ninclude_stacks\n:\n\n                            \nd\n \n=\n \n{\n'logicalId'\n:\n \nresource\n.\nget\n(\n'LogicalResourceId'\n),\n\n                                 \n'physicalId'\n:\n \nresource\n.\nget\n(\n'PhysicalResourceId'\n),\n\n                                 \n'resourceType'\n:\n \nresource\n.\nget\n(\n'ResourceType'\n)}\n\n                            \nl_resources\n.\nappend\n(\nd\n)\n\n                        \nstackdata\n \n=\n \nself\n.\nparse_stack_info\n(\n\n                            \nstr\n(\nresource\n.\nget\n(\n'PhysicalResourceId'\n)))\n\n                        \nregion\n \n=\n \nstackdata\n[\n'region'\n]\n\n                        \nself\n.\nget_resources_helper\n(\nresource\n.\nget\n(\n'PhysicalResourceId'\n),\n \nregion\n,\n \nl_resources\n,\n\n                                                  \ninclude_stacks\n)\n\n                    \n# else if resource is not a stack and has a physical resource id (NOTE: physical id will be missing if stack creation is failed)\n\n                    \nelif\n \nresource\n.\nget\n(\n\n                            \n'ResourceType'\n)\n \n!=\n \n'AWS::CloudFormation::Stack'\n \nand\n \n'PhysicalResourceId'\n \nin\n \nresource\n:\n\n                        \nd\n \n=\n \n{\n'logicalId'\n:\n \nresource\n.\nget\n(\n'LogicalResourceId'\n),\n\n                             \n'physicalId'\n:\n \nresource\n.\nget\n(\n'PhysicalResourceId'\n),\n\n                             \n'resourceType'\n:\n \nresource\n.\nget\n(\n'ResourceType'\n)}\n\n                        \nl_resources\n.\nappend\n(\nd\n)\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\nF\n \n+\n \n\"Unable to get resources for stack \n%s\n\"\n \n%\n \nstackname\n)\n\n\n    \ndef\n \nget_all_resources\n(\nself\n,\n \nstackids\n,\n \nregion\n):\n\n        \n\"\"\"\n\n\n        Given a list of stackids, function returns the list of dictionary items, where each\n\n\n        item consist of stackId and the resources associated with that stack.\n\n\n\n        :param stackids: List of Stack Ids\n\n\n        :param region: AWS region\n\n\n        :return: A list of dictionary object in the following format\n\n\n                [\n\n\n                    {\n\n\n                        'stackId': 'string',\n\n\n                        'resources': [\n\n\n                            {\n\n\n                               'logicalId': 'string',\n\n\n                               'physicalId': 'string',\n\n\n                               'resourceType': 'String'\n\n\n                            },\n\n\n                        ]\n\n\n                    },\n\n\n                ]\n\n\n\n        \"\"\"\n\n        \nl_all_resources\n \n=\n \n[]\n\n        \nfor\n \nanId\n \nin\n \nstackids\n:\n\n            \nd\n \n=\n \n{\n\n                \n'stackId'\n:\n \nanId\n,\n\n                \n'resources'\n:\n \nself\n.\nget_resources\n(\nanId\n,\n \nregion\n)\n\n            \n}\n\n            \nl_all_resources\n.\nappend\n(\nd\n)\n\n        \nreturn\n \nl_all_resources\n\n\n    \ndef\n \nvalidate_template\n(\nself\n,\n \ntaskcat_cfg\n,\n \ntest_list\n):\n\n        \n\"\"\"\n\n\n        Returns TRUE if all the template files are valid, otherwise FALSE.\n\n\n\n        :param taskcat_cfg: TaskCat config object\n\n\n        :param test_list: List of tests\n\n\n\n        :return: TRUE if templates are valid, else FALSE\n\n\n        \"\"\"\n\n        \n# Load global regions\n\n        \nself\n.\nset_test_region\n(\nself\n.\nget_global_region\n(\ntaskcat_cfg\n))\n\n        \nfor\n \ntest\n \nin\n \ntest_list\n:\n\n            \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Validate Template in test[\n%s\n]\"\n \n%\n \ntest\n)\n\n            \nself\n.\ndefine_tests\n(\ntaskcat_cfg\n,\n \ntest\n)\n\n            \ntry\n:\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \n\"Default region [\n%s\n]\"\n \n%\n \nself\n.\nget_default_region\n())\n\n                \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nself\n.\nget_default_region\n())\n\n                \ncfn\n.\nvalidate_template\n(\nTemplateURL\n=\nself\n.\nget_s3_url\n(\nself\n.\nget_template_file\n()))\n\n                \nresult\n \n=\n \ncfn\n.\nvalidate_template\n(\nTemplateURL\n=\nself\n.\nget_s3_url\n(\nself\n.\nget_template_file\n()))\n\n                \nprint\n(\nP\n \n+\n \n\"Validated [\n%s\n]\"\n \n%\n \nself\n.\nget_template_file\n())\n\n                \ncfn_result\n \n=\n \n(\nresult\n[\n'Description'\n])\n\n                \nprint\n(\nI\n \n+\n \n\"Description  [\n%s\n]\"\n \n%\n \ntextwrap\n.\nfill\n(\ncfn_result\n))\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \ncfn_params\n \n=\n \njson\n.\ndumps\n(\nresult\n[\n'Parameters'\n],\n \nindent\n=\n11\n,\n \nseparators\n=\n(\n','\n,\n \n': '\n))\n\n                    \nprint\n(\nD\n \n+\n \n\"Parameters:\"\n)\n\n                    \nprint\n(\ncfn_params\n)\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\nF\n \n+\n \n\"Cannot validate \n%s\n\"\n \n%\n \nself\n.\nget_template_file\n())\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n        \nreturn\n \nTrue\n\n\n    \ndef\n \ngenpassword\n(\nself\n,\n \npass_length\n,\n \npass_type\n):\n\n        \n\"\"\"\n\n\n        Returns a password of given length and type.\n\n\n\n        :param pass_length: Length of the desired password\n\n\n        :param pass_type: Type of the desired password - String only OR Alphanumeric\n\n\n            * A = AlphaNumeric, Example 'vGceIP8EHC'\n\n\n        :return: Password of given length and type\n\n\n        \"\"\"\n\n        \nif\n \nself\n.\nverbose\n:\n\n            \nprint\n(\nD\n \n+\n \n\"Auto generating password\"\n)\n\n            \nprint\n(\nD\n \n+\n \n\"Pass size => {0}\"\n.\nformat\n(\npass_length\n))\n\n\n        \npassword\n \n=\n \n[]\n\n        \nnumbers\n \n=\n \n\"1234567890\"\n\n        \nlowercase\n \n=\n \n\"abcdefghijklmnopqrstuvwxyz\"\n\n        \nuppercase\n \n=\n \n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n        \nspecialchars\n \n=\n \n\"!#$&{*:[=,]-_%@+\"\n\n\n        \n# Generates password string with:\n\n        \n# lowercase,uppercase and numeric chars\n\n        \nif\n \npass_type\n \n==\n \n'A'\n:\n\n            \nprint\n(\nD\n \n+\n \n\"Pass type => {0}\"\n.\nformat\n(\n'alpha-numeric'\n))\n\n\n            \nwhile\n \nlen\n(\npassword\n)\n \n<\n \npass_length\n:\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nlowercase\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nuppercase\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nnumbers\n))\n\n\n        \n# Generates password string with:\n\n        \n# lowercase,uppercase, numbers and special chars\n\n        \nelif\n \npass_type\n \n==\n \n'S'\n:\n\n            \nprint\n(\nD\n \n+\n \n\"Pass type => ('specialchars')\"\n)\n\n            \nwhile\n \nlen\n(\npassword\n)\n \n<\n \npass_length\n:\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nlowercase\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nuppercase\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nnumbers\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nspecialchars\n))\n\n        \nelse\n:\n\n            \n# If no passtype is defined (None)\n\n            \n# Defaults to alpha-numeric\n\n            \n# Generates password string with:\n\n            \n# lowercase,uppercase, numbers and special chars\n\n            \nprint\n(\nD\n \n+\n \n\"Pass type => default ('alpha-numeric')\"\n)\n\n            \nwhile\n \nlen\n(\npassword\n)\n \n<\n \npass_length\n:\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nlowercase\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nuppercase\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nnumbers\n))\n\n\n        \nreturn\n \n''\n.\njoin\n(\npassword\n)\n\n\n    \ndef\n \nstackcreate\n(\nself\n,\n \ntaskcat_cfg\n,\n \ntest_list\n,\n \nsprefix\n):\n\n        \n\"\"\"\n\n\n        This function creates CloudFormation stack for the given tests.\n\n\n\n        :param taskcat_cfg: TaskCat config as yaml object\n\n\n        :param test_list: List of tests\n\n\n        :param sprefix: Special prefix as string. Purpose of this param is to use it for tagging\n\n\n            the stack.\n\n\n\n        :return: List of TestData objects\n\n\n\n        \"\"\"\n\n        \ntestdata_list\n \n=\n \n[]\n\n        \nself\n.\nset_capabilities\n(\n'CAPABILITY_IAM'\n)\n\n        \nfor\n \ntest\n \nin\n \ntest_list\n:\n\n            \ntestdata\n \n=\n \nTestData\n()\n\n            \ntestdata\n.\nset_test_name\n(\ntest\n)\n\n            \nprint\n(\n\"{0}{1}|PREPARING TO LAUNCH => {2}{3}\"\n.\nformat\n(\nI\n,\n \nheader\n,\n \ntest\n,\n \nrst_color\n))\n\n            \nsname\n \n=\n \nstr\n(\nsig\n)\n\n            \nstackname\n \n=\n \nsname\n \n+\n \n'-'\n \n+\n \nsprefix\n \n+\n \n'-'\n \n+\n \ntest\n \n+\n \n'-'\n \n+\n \njobid\n[:\n4\n]\n\n            \nself\n.\ndefine_tests\n(\ntaskcat_cfg\n,\n \ntest\n)\n\n            \nfor\n \nregion\n \nin\n \nself\n.\nget_test_region\n():\n\n                \nprint\n(\nI\n \n+\n \n\"Preparing to launch in region [\n%s\n] \"\n \n%\n \nregion\n)\n\n                \ntry\n:\n\n                    \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n                    \ns_parmsdata\n \n=\n \nrequests\n.\nget\n(\nself\n.\nget_parameter_path\n())\n.\ntext\n\n                    \ns_parms\n \n=\n \njson\n.\nloads\n(\ns_parmsdata\n)\n\n                    \n# gentype = None\n\n\n                    \n# Auto-generated stack inputs\n\n\n                    \n# (Passwords)\n\n                    \n# Value that matches the following pattern will be replaced\n\n                    \n# - Parameters must start with $[\n\n                    \n# - Parameters must end with ]\n\n                    \n# - genpass in invoked when _genpass_X is found\n\n                    \n# - X is lengeth of the string\n\n                    \n# Example: $[taskcat_genpass_8]\n\n                    \n# Optionally - you can specify the type of password by adding\n\n                    \n# - A aplha-numeric passwords\n\n                    \n# - S passwords with special characters\n\n                    \n# Example: $[taskcat_genpass_8A]\n\n                    \n# Generates: tI8zN3iX8\n\n                    \n# or\n\n                    \n# Example: $[taskcat_genpass_8S]\n\n                    \n# Generates: mA5@cB5!\n\n\n                    \n# (Availablity Zones)\n\n                    \n# Value that matches the following pattern will be replaced\n\n                    \n# - Parameters must start with $[\n\n                    \n# - Parameters must end with ]\n\n                    \n# - genaz in invoked when _genaz_X is found\n\n                    \n# - A number of AZ's will be selected from the region\n\n                    \n#   the stack is attempting to launch\n\n                    \n# Example: $[taskcat_genaz_2] (if the region is us-east-2)\n\n                    \n# Generates: us-east-1a, us-east-2b\n\n\n                    \nfor\n \nparmdict\n \nin\n \ns_parms\n:\n\n                        \nfor\n \n_\n \nin\n \nparmdict\n:\n\n\n                            \nparam_value\n \n=\n \nparmdict\n[\n'ParameterValue'\n]\n\n                            \n# Determines the size of the password to generate\n\n                            \ncount_re\n \n=\n \nre\n.\ncompile\n(\n'(?!\\w+_genpass_)\\d{1,2}'\n)\n\n\n                            \n# Determines the type of password to generate\n\n                            \ngentype_re\n \n=\n \nre\n.\ncompile\n(\n\n                                \n'(?!\\w+_genpass_\\d{1,2}])([AS])'\n)\n\n\n                            \n# Determines if _genpass has been requested\n\n                            \ngenpass_re\n \n=\n \nre\n.\ncompile\n(\n\n                                \n'\\$\\[\\w+_genpass?(\\w)_\\d{1,2}\\w?]$'\n)\n\n\n                            \n# Determines if _genaz has been requested\n\n                            \ngenaz_re\n \n=\n \nre\n.\ncompile\n(\n'\\$\\[\\w+_genaz_\\d]'\n)\n\n\n                            \n# Determines if s3 replacement was requested\n\n                            \ngets3replace\n \n=\n \nre\n.\ncompile\n(\n'\\$\\[\\w+_url_.+]$'\n)\n\n                            \ngeturl_re\n \n=\n \nre\n.\ncompile\n(\n'(?<=._url_)(.+)(?=]$)'\n)\n\n\n                            \nif\n \ngets3replace\n.\nsearch\n(\nparam_value\n):\n\n                                \nurl\n \n=\n \nself\n.\nregxfind\n(\ngeturl_re\n,\n \nparam_value\n)\n\n                                \nparam_value\n \n=\n \nself\n.\nget_s3contents\n(\nurl\n)\n\n                                \nif\n \nself\n.\nverbose\n:\n\n                                    \nprint\n(\n\"Raw content of url {}\"\n.\nformat\n(\nurl\n))\n\n                                    \nprint\n(\nparam_value\n)\n\n                                \nparmdict\n[\n'ParameterValue'\n]\n \n=\n \nparam_value\n\n\n                            \n# Autogenerated value to password input in runtime\n\n                            \nif\n \ngenpass_re\n.\nsearch\n(\nparam_value\n):\n\n                                \npasslen\n \n=\n \nint\n(\n\n                                    \nself\n.\nregxfind\n(\ncount_re\n,\n \nparam_value\n))\n\n                                \ngentype\n \n=\n \nself\n.\nregxfind\n(\n\n                                    \ngentype_re\n,\n \nparam_value\n)\n\n                                \nif\n \nnot\n \ngentype\n:\n\n                                    \n# Set default password type\n\n                                    \n# A vaule of D will generate a simple alpha\n\n                                    \n# aumeric password\n\n                                    \ngentype\n \n=\n \n'D'\n\n\n                                \nif\n \npasslen\n:\n\n                                    \nif\n \nself\n.\nverbose\n:\n\n                                        \nprint\n(\n\"{}AutoGen values for {}\"\n.\nformat\n(\nD\n,\n \nparam_value\n))\n\n                                    \nparam_value\n \n=\n \nself\n.\ngenpassword\n(\n\n                                        \npasslen\n,\n \ngentype\n)\n\n                                    \nparmdict\n[\n'ParameterValue'\n]\n \n=\n \nparam_value\n\n\n                            \nif\n \ngenaz_re\n.\nsearch\n(\nparam_value\n):\n\n                                \nnumazs\n \n=\n \nint\n(\n\n                                    \nself\n.\nregxfind\n(\ncount_re\n,\n \nparam_value\n))\n\n                                \nif\n \nnumazs\n:\n\n                                    \nif\n \nself\n.\nverbose\n:\n\n                                        \nprint\n(\nD\n \n+\n \n\"Selecting availability zones\"\n)\n\n                                        \nprint\n(\nD\n \n+\n \n\"Requested \n%s\n az's\"\n \n%\n \nnumazs\n)\n\n\n                                    \nparam_value\n \n=\n \nself\n.\nget_available_azs\n(\n\n                                        \nregion\n,\n\n                                        \nnumazs\n)\n\n                                    \nparmdict\n[\n'ParameterValue'\n]\n \n=\n \nparam_value\n\n                                \nelse\n:\n\n                                    \nprint\n(\nI\n \n+\n \n\"$[taskcat_genaz_(!)]\"\n)\n\n                                    \nprint\n(\nI\n \n+\n \n\"Number of az's not specified!\"\n)\n\n                                    \nprint\n(\nI\n \n+\n \n\" - (Defaulting to 1 az)\"\n)\n\n                                    \nparam_value\n \n=\n \nself\n.\nget_available_azs\n(\n\n                                        \nregion\n,\n\n                                        \n1\n)\n\n                                    \nparmdict\n[\n'ParameterValue'\n]\n \n=\n \nparam_value\n\n                    \nif\n \nself\n.\nverbose\n:\n\n                        \nprint\n(\nD\n \n+\n \n\"Creating Boto Connection region=\n%s\n\"\n \n%\n \nregion\n)\n\n                        \nprint\n(\nD\n \n+\n \n\"StackName=\"\n \n+\n \nstackname\n)\n\n                        \nprint\n(\nD\n \n+\n \n\"DisableRollback=True\"\n)\n\n                        \nprint\n(\nD\n \n+\n \n\"TemplateURL=\n%s\n\"\n \n%\n \nself\n.\nget_template_path\n())\n\n                        \nprint\n(\nD\n \n+\n \n\"Capabilities=\n%s\n\"\n \n%\n \nself\n.\nget_capabilities\n())\n\n                        \nprint\n(\nD\n \n+\n \n\"Parameters:\"\n)\n\n                        \nprint\n(\njson\n.\ndumps\n(\ns_parms\n,\n \nsort_keys\n=\nTrue\n,\n \nindent\n=\n11\n,\n \nseparators\n=\n(\n','\n,\n \n': '\n)))\n\n\n                    \nstackdata\n \n=\n \ncfn\n.\ncreate_stack\n(\n\n                        \nStackName\n=\nstackname\n,\n\n                        \nDisableRollback\n=\nTrue\n,\n\n                        \nTemplateURL\n=\nself\n.\nget_template_path\n(),\n\n                        \nParameters\n=\ns_parms\n,\n\n                        \nCapabilities\n=\nself\n.\nget_capabilities\n())\n\n\n                    \ntestdata\n.\nadd_test_stack\n(\nstackdata\n)\n\n\n                \nexcept\n \nException\n \nas\n \ne\n:\n\n                    \nif\n \nself\n.\nverbose\n:\n\n                        \nprint\n(\nE\n \n+\n \nstr\n(\ne\n))\n\n                    \nsys\n.\nexit\n(\nF\n \n+\n \n\"Cannot launch \n%s\n\"\n \n%\n \nself\n.\nget_template_file\n())\n\n\n            \ntestdata_list\n.\nappend\n(\ntestdata\n)\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n        \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n            \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                \nprint\n(\n\"{} |{}LAUNCHING STACKS{}\"\n.\nformat\n(\nself\n.\nnametag\n,\n \nheader\n,\n \nrst_color\n))\n\n                \nprint\n(\n\"{} {}{} {} {}\"\n.\nformat\n(\n\n                    \nI\n,\n\n                    \nheader\n,\n\n                    \ntest\n.\nget_test_name\n(),\n\n                    \nstr\n(\nstack\n[\n'StackId'\n])\n.\nsplit\n(\n':stack'\n,\n \n1\n),\n\n                    \nrst_color\n))\n\n        \nreturn\n \ntestdata_list\n\n\n    \ndef\n \nvalidate_json\n(\nself\n,\n \njsonin\n):\n\n        \n\"\"\"\n\n\n        This function validates the given JSON.\n\n\n\n        :param jsonin: Json object to be validated\n\n\n\n        :return: TRUE if given Json is valid, FALSE otherwise.\n\n\n        \"\"\"\n\n        \ntry\n:\n\n            \nparms\n \n=\n \njson\n.\nloads\n(\njsonin\n)\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\njson\n.\ndumps\n(\nparms\n,\n \nindent\n=\n11\n,\n \nseparators\n=\n(\n','\n,\n \n': '\n)))\n\n        \nexcept\n \nValueError\n \nas\n \ne\n:\n\n            \nprint\n(\nE\n \n+\n \nstr\n(\ne\n))\n\n            \nreturn\n \nFalse\n\n        \nreturn\n \nTrue\n\n\n    \ndef\n \nvalidate_parameters\n(\nself\n,\n \ntaskcat_cfg\n,\n \ntest_list\n):\n\n        \n\"\"\"\n\n\n        This function validates the parameters file of the CloudFormation template.\n\n\n\n        :param taskcat_cfg: TaskCat config yaml object\n\n\n        :param test_list: List of tests\n\n\n\n        :return: TRUE if the parameters file is valid, else FALSE\n\n\n        \"\"\"\n\n        \nfor\n \ntest\n \nin\n \ntest_list\n:\n\n            \nself\n.\ndefine_tests\n(\ntaskcat_cfg\n,\n \ntest\n)\n\n            \nprint\n(\nself\n.\nnametag\n \n+\n \n\" |Validate JSON input in test[\n%s\n]\"\n \n%\n \ntest\n)\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \n\"parameter_path = \n%s\n\"\n \n%\n \nself\n.\nget_parameter_path\n())\n\n\n            \ninputparms\n \n=\n \nrequests\n.\nget\n(\nself\n.\nget_parameter_path\n())\n.\ntext\n\n            \njsonstatus\n \n=\n \nself\n.\nvalidate_json\n(\ninputparms\n)\n\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \n\"jsonstatus = \n%s\n\"\n \n%\n \njsonstatus\n)\n\n\n            \nif\n \njsonstatus\n:\n\n                \nprint\n(\nP\n \n+\n \n\"Validated [\n%s\n]\"\n \n%\n \nself\n.\nget_parameter_file\n())\n\n            \nelse\n:\n\n                \nprint\n(\nD\n \n+\n \n\"parameter_file = \n%s\n\"\n \n%\n \nself\n.\nget_parameter_file\n())\n\n                \nsys\n.\nexit\n(\nF\n \n+\n \n\"Cannot validate \n%s\n\"\n \n%\n \nself\n.\nget_parameter_file\n())\n\n        \nreturn\n \nTrue\n\n\n    \n@staticmethod\n\n    \ndef\n \nregxfind\n(\nre_object\n,\n \ndata_line\n):\n\n        \n\"\"\"\n\n\n        Returns the matching string.\n\n\n\n        :param re_object: Regex object\n\n\n        :param data_line: String to be searched\n\n\n\n        :return: Matching String if found, otherwise return 'Not-found'\n\n\n        \"\"\"\n\n        \nsg\n \n=\n \nre_object\n.\nsearch\n(\ndata_line\n)\n\n        \nif\n \nsg\n:\n\n            \nreturn\n \nstr\n(\nsg\n.\ngroup\n())\n\n        \nelse\n:\n\n            \nreturn\n \nstr\n(\n'Not-found'\n)\n\n\n    \ndef\n \nparse_stack_info\n(\nself\n,\n \nstack_name\n):\n\n        \n\"\"\"\n\n\n        Returns a dictionary object containing the region and stack name.\n\n\n\n        :param stack_name: Full stack name arn\n\n\n        :return: Dictionary object containing the region and stack name\n\n\n\n        \"\"\"\n\n        \nstack_info\n \n=\n \ndict\n()\n\n\n        \nregion_re\n \n=\n \nre\n.\ncompile\n(\n'(?<=:)(.\\w-.+(\\w*)-\\d)(?=:)'\n)\n\n        \nstack_name_re\n \n=\n \nre\n.\ncompile\n(\n'(?<=:stack/)(tCaT.*.)(?=/)'\n)\n\n        \nstack_info\n[\n'region'\n]\n \n=\n \nself\n.\nregxfind\n(\nregion_re\n,\n \nstack_name\n)\n\n        \nstack_info\n[\n'stack_name'\n]\n \n=\n \nself\n.\nregxfind\n(\nstack_name_re\n,\n \nstack_name\n)\n\n        \nreturn\n \nstack_info\n\n\n    \ndef\n \nstackcheck\n(\nself\n,\n \nstack_id\n):\n\n        \n\"\"\"\n\n\n        Given the stack id, this function returns the status of the stack as\n\n\n        a list with stack name, region, and status as list items, in the respective\n\n\n        order.\n\n\n\n        :param stack_id: CloudFormation stack id\n\n\n\n        :return: List containing the stack name, region and stack status in the\n\n\n            respective order.\n\n\n        \"\"\"\n\n        \nstackdata\n \n=\n \nself\n.\nparse_stack_info\n(\nstack_id\n)\n\n        \nregion\n \n=\n \nstackdata\n[\n'region'\n]\n\n        \nstack_name\n \n=\n \nstackdata\n[\n'stack_name'\n]\n\n        \ntest_info\n \n=\n \n[]\n\n\n        \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n        \n# noinspection PyBroadException\n\n        \ntry\n:\n\n            \ntest_query\n \n=\n \n(\ncfn\n.\ndescribe_stacks\n(\nStackName\n=\nstack_name\n))\n\n            \nfor\n \nresult\n \nin\n \ntest_query\n[\n'Stacks'\n]:\n\n                \ntest_info\n.\nappend\n(\nstack_name\n)\n\n                \ntest_info\n.\nappend\n(\nregion\n)\n\n                \ntest_info\n.\nappend\n(\nresult\n.\nget\n(\n'StackStatus'\n))\n\n                \nif\n \nresult\n.\nget\n(\n\n                        \n'StackStatus'\n)\n \n==\n \n'CREATE_IN_PROGRESS'\n \nor\n \nresult\n.\nget\n(\n'StackStatus'\n)\n \n==\n \n'DELETE_IN_PROGRESS'\n:\n\n                    \ntest_info\n.\nappend\n(\n1\n)\n\n                \nelse\n:\n\n                    \ntest_info\n.\nappend\n(\n0\n)\n\n        \nexcept\n \nException\n:\n\n            \ntest_info\n.\nappend\n(\nstack_name\n)\n\n            \ntest_info\n.\nappend\n(\nregion\n)\n\n            \ntest_info\n.\nappend\n(\n\"STACK_DELETED\"\n)\n\n            \ntest_info\n.\nappend\n(\n0\n)\n\n        \nreturn\n \ntest_info\n\n\n    \ndef\n \nget_stackstatus\n(\nself\n,\n \ntestdata_list\n,\n \nspeed\n):\n\n        \n\"\"\"\n\n\n        Given a list of TestData objects, this function checks the stack status\n\n\n        of each CloudFormation stack and updates the corresponding TestData object\n\n\n        with the status.\n\n\n\n        :param testdata_list: List of TestData object\n\n\n        :param speed: Interval (in seconds) in which the status has to be checked in loop\n\n\n\n        \"\"\"\n\n        \nactive_tests\n \n=\n \n1\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n        \nwhile\n \nactive_tests\n \n>\n \n0\n:\n\n            \ncurrent_active_tests\n \n=\n \n0\n\n            \nprint\n(\nI\n \n+\n \n\"{}{} {} [{}]{}\"\n.\nformat\n(\n\n                \nheader\n,\n\n                \n'AWS REGION'\n.\nljust\n(\n15\n),\n\n                \n'CLOUDFORMATION STACK STATUS'\n.\nljust\n(\n25\n),\n\n                \n'CLOUDFORMATION STACK NAME'\n,\n\n                \nrst_color\n))\n\n\n            \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n                \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                    \nstackquery\n \n=\n \nself\n.\nstackcheck\n(\nstr\n(\nstack\n[\n'StackId'\n]))\n\n                    \ncurrent_active_tests\n \n=\n \nstackquery\n[\n\n                                               \n3\n]\n \n+\n \ncurrent_active_tests\n\n                    \nprint\n(\nI\n \n+\n \n\"{3}{0} {1} [{2}]{4}\"\n.\nformat\n(\n\n                        \nstackquery\n[\n1\n]\n.\nljust\n(\n15\n),\n\n                        \nstackquery\n[\n2\n]\n.\nljust\n(\n25\n),\n\n                        \nstackquery\n[\n0\n],\n\n                        \nhightlight\n,\n\n                        \nrst_color\n))\n\n                    \nstack\n[\n'status'\n]\n \n=\n \nstackquery\n[\n2\n]\n\n                    \nactive_tests\n \n=\n \ncurrent_active_tests\n\n                    \ntime\n.\nsleep\n(\nspeed\n)\n\n            \nprint\n(\n'\n\\n\n'\n)\n\n\n    \ndef\n \ncleanup\n(\nself\n,\n \ntestdata_list\n,\n \nspeed\n):\n\n        \n\"\"\"\n\n\n        This function deletes the CloudFormation stacks of the given tests.\n\n\n\n        :param testdata_list: List of TestData objects\n\n\n        :param speed: Interval (in seconds) in which the status has to be checked\n\n\n            while deleting the stacks.\n\n\n\n        \"\"\"\n\n        \ndocleanup\n \n=\n \nself\n.\nget_docleanup\n()\n\n        \nif\n \nself\n.\nverbose\n:\n\n            \nprint\n(\nD\n \n+\n \n\"clean-up = \n%s\n \"\n \n%\n \nstr\n(\ndocleanup\n))\n\n\n        \nif\n \ndocleanup\n:\n\n            \nprint\n(\n\"{} |CLEANUP STACKS{}\"\n.\nformat\n(\nself\n.\nnametag\n,\n \nheader\n,\n \nrst_color\n))\n\n            \nself\n.\nstackdelete\n(\ntestdata_list\n)\n\n            \nself\n.\nget_stackstatus\n(\ntestdata_list\n,\n \nspeed\n)\n\n            \nself\n.\ndeep_cleanup\n(\ntestdata_list\n)\n\n        \nelse\n:\n\n            \nprint\n(\nI\n \n+\n \n\"[Retaining Stacks (Cleanup is set to {0}]\"\n.\nformat\n(\ndocleanup\n))\n\n\n    \ndef\n \ndeep_cleanup\n(\nself\n,\n \ntestdata_list\n):\n\n        \n\"\"\"\n\n\n        This function deletes the AWS resources which were not deleted\n\n\n        by deleting CloudFormation stacks.\n\n\n\n        :param testdata_list: List of TestData objects\n\n\n\n        \"\"\"\n\n        \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n            \nfailed_stack_ids\n \n=\n \n[]\n\n            \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                \nif\n \nstr\n(\nstack\n[\n'status'\n])\n \n==\n \n'DELETE_FAILED'\n:\n\n                    \nfailed_stack_ids\n.\nappend\n(\nstack\n[\n'StackId'\n])\n\n            \nif\n \nlen\n(\nfailed_stack_ids\n)\n \n==\n \n0\n:\n\n                \nprint\n(\nI\n \n+\n \n\"All stacks deleted successfully. Deep clean-up not required.\"\n)\n\n                \ncontinue\n\n\n            \nprint\n(\nI\n \n+\n \n\"Few stacks failed to delete. Collecting resources for deep clean-up.\"\n)\n\n            \n# get test region from the stack id\n\n            \nstackdata\n \n=\n \nself\n.\nparse_stack_info\n(\n\n                \nstr\n(\nfailed_stack_ids\n[\n0\n]))\n\n            \nregion\n \n=\n \nstackdata\n[\n'region'\n]\n\n            \nsession\n \n=\n \nboto3\n.\nsession\n.\nSession\n(\nregion_name\n=\nregion\n)\n\n            \ns\n \n=\n \nSweeper\n(\nsession\n)\n\n            \nfailed_stacks\n \n=\n \nself\n.\nget_all_resources\n(\nfailed_stack_ids\n,\n \nregion\n)\n\n            \n# print all resources which failed to delete\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \n\"Resources which failed to delete:\n\\n\n\"\n)\n\n                \nfor\n \nfailed_stack\n \nin\n \nfailed_stacks\n:\n\n                    \nprint\n(\nD\n \n+\n \n\"Stack Id: \"\n \n+\n \nfailed_stack\n[\n'stackId'\n])\n\n                    \nfor\n \nres\n \nin\n \nfailed_stack\n[\n'resources'\n]:\n\n                        \nprint\n(\nD\n \n+\n \n\"{0} = {1}, {2} = {3}, {4} = {5}\"\n.\nformat\n(\n\n                            \n'\n\\n\\t\\t\nLogicalId'\n,\n\n                            \nres\n.\nget\n(\n'logicalId'\n),\n\n                            \n'\n\\n\\t\\t\nPhysicalId'\n,\n\n                            \nres\n.\nget\n(\n'physicalId'\n),\n\n                            \n'\n\\n\\t\\t\nType'\n,\n\n                            \nres\n.\nget\n(\n'resourceType'\n)\n\n                        \n))\n\n                \ns\n.\ndelete_all\n(\nfailed_stacks\n)\n\n\n    \ndef\n \nstackdelete\n(\nself\n,\n \ntestdata_list\n):\n\n        \n\"\"\"\n\n\n        This function deletes the CloudFormation stacks of the given tests.\n\n\n\n        :param testdata_list: List of TestData objects\n\n\n\n        \"\"\"\n\n        \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n            \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                \nstackdata\n \n=\n \nself\n.\nparse_stack_info\n(\n\n                    \nstr\n(\nstack\n[\n'StackId'\n]))\n\n                \nregion\n \n=\n \nstackdata\n[\n'region'\n]\n\n                \nstack_name\n \n=\n \nstackdata\n[\n'stack_name'\n]\n\n                \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n                \ncfn\n.\ndelete_stack\n(\nStackName\n=\nstack_name\n)\n\n\n    \ndef\n \nif_stackexists\n(\nself\n,\n \nstackname\n,\n \nregion\n):\n\n        \n\"\"\"\n\n\n        This function checks if a stack exist with the given stack name.\n\n\n        Returns \"yes\" if exist, otherwise \"no\".\n\n\n\n        :param stackname: Stack name\n\n\n        :param region: AWS region\n\n\n\n        :return: \"yes\" if stack exist, otherwise \"no\"\n\n\n        \"\"\"\n\n        \nexists\n \n=\n \nNone\n\n        \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n        \ntry\n:\n\n            \ncfn\n.\ndescribe_stacks\n(\nStackName\n=\nstackname\n)\n\n            \nexists\n \n=\n \n\"yes\"\n\n        \nexcept\n \nException\n \nas\n \ne\n:\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nexists\n \n=\n \n\"no\"\n\n        \nprint\n(\nI\n \n+\n \n\"Successfully Deleted[\n%s\n]\"\n \n%\n \nstackname\n)\n\n        \nreturn\n \nexists\n\n\n    \ndef\n \ndefine_tests\n(\nself\n,\n \nyamlc\n,\n \ntest\n):\n\n        \n\"\"\"\n\n\n        This function reads the given test config yaml object and defines\n\n\n        the tests as per the given config object.\n\n\n\n        :param yamlc: TaskCat config yaml object\n\n\n        :param test: Test scenarios\n\n\n\n        \"\"\"\n\n        \nfor\n \ntdefs\n \nin\n \nyamlc\n[\n'tests'\n]\n.\nkeys\n():\n\n            \n# print(\"[DEBUG] tdefs = %s\" % tdefs)\n\n            \nif\n \ntdefs\n \n==\n \ntest\n:\n\n                \nt\n \n=\n \nyamlc\n[\n'tests'\n][\ntest\n][\n'template_file'\n]\n\n                \np\n \n=\n \nyamlc\n[\n'tests'\n][\ntest\n][\n'parameter_input'\n]\n\n                \nn\n \n=\n \nyamlc\n[\n'global'\n][\n'qsname'\n]\n\n                \nb\n \n=\n \nself\n.\nget_s3bucket\n()\n\n\n                \n# Checks if cleanup flag is set\n\n                \n# If cleanup is set to 'false' stack will not be deleted after\n\n                \n# launch attempt\n\n                \nif\n \n'cleanup'\n \nin\n \nyamlc\n[\n'global'\n]\n.\nkeys\n():\n\n                    \ncleanupstack\n \n=\n \nyamlc\n[\n'global'\n][\n'cleanup'\n]\n\n                    \nif\n \ncleanupstack\n:\n\n                        \nif\n \nself\n.\nverbose\n:\n\n                            \nprint\n(\nD\n \n+\n \n\"cleanup set to ymal value\"\n)\n\n                            \nself\n.\nset_docleanup\n(\ncleanupstack\n)\n\n                    \nelse\n:\n\n                        \nprint\n(\nI\n \n+\n \n\"Cleanup value set to (false)\"\n)\n\n                        \nself\n.\nset_docleanup\n(\nFalse\n)\n\n                \nelse\n:\n\n                    \n# By default do cleanup unless self.run_cleanup\n\n                    \n# was overwridden (set to False) by -n flag\n\n                    \nif\n \nnot\n \nself\n.\nrun_cleanup\n:\n\n                        \nif\n \nself\n.\nverbose\n:\n\n                            \nprint\n(\nD\n \n+\n \n\"cleanup set by cli flag {0}\"\n.\nformat\n(\nself\n.\nrun_cleanup\n))\n\n                    \nelse\n:\n\n                        \nself\n.\nset_docleanup\n(\nTrue\n)\n\n                        \nif\n \nself\n.\nverbose\n:\n\n                            \nprint\n(\nI\n \n+\n \n\"No cleanup value set\"\n)\n\n                            \nprint\n(\nI\n \n+\n \n\" - (Defaulting to cleanup)\"\n)\n\n\n                \n# Load test setting\n\n                \nself\n.\nset_s3bucket\n(\nb\n)\n\n                \nself\n.\nset_project\n(\nn\n)\n\n                \nself\n.\nset_template_file\n(\nt\n)\n\n                \nself\n.\nset_parameter_file\n(\np\n)\n\n                \nself\n.\nset_template_path\n(\n\n                    \nself\n.\nget_s3_url\n(\nself\n.\nget_template_file\n()))\n\n                \nself\n.\nset_parameter_path\n(\n\n                    \nself\n.\nget_s3_url\n(\nself\n.\nget_parameter_file\n()))\n\n\n                \n# Check to make sure template filenames are correct\n\n                \ntemplate_path\n \n=\n \nself\n.\nget_template_path\n()\n\n                \nif\n \nnot\n \ntemplate_path\n:\n\n                    \nprint\n(\n\"{0} Could not locate {1}\"\n.\nformat\n(\nE\n,\n \nself\n.\nget_template_file\n()))\n\n                    \nprint\n(\n\"{0} Check to make sure filename is correct?\"\n.\nformat\n(\nE\n,\n \nself\n.\nget_template_path\n()))\n\n                    \nquit\n()\n\n\n                \n# Check to make sure parameter filenames are correct\n\n                \nparameter_path\n \n=\n \nself\n.\nget_parameter_path\n()\n\n                \nif\n \nnot\n \nparameter_path\n:\n\n                    \nprint\n(\n\"{0} Could not locate {1}\"\n.\nformat\n(\nE\n,\n \nself\n.\nget_parameter_file\n()))\n\n                    \nprint\n(\n\"{0} Check to make sure filename is correct?\"\n.\nformat\n(\nE\n,\n \nself\n.\nget_parameter_file\n()))\n\n                    \nquit\n()\n\n\n                \nprint\n(\n'\n\\n\n'\n)\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nI\n \n+\n \n\"|Acquiring tests assets for .......[\n%s\n]\"\n \n%\n \ntest\n)\n\n                    \nprint\n(\nD\n \n+\n \n\"|S3 Bucket  => [\n%s\n]\"\n \n%\n \nself\n.\nget_s3bucket\n())\n\n                    \nprint\n(\nD\n \n+\n \n\"|Project    => [\n%s\n]\"\n \n%\n \nself\n.\nget_project\n())\n\n                    \nprint\n(\nD\n \n+\n \n\"|Template   => [\n%s\n]\"\n \n%\n \nself\n.\nget_template_path\n())\n\n                    \nprint\n(\nD\n \n+\n \n\"|Parameter  => [\n%s\n]\"\n \n%\n \nself\n.\nget_parameter_path\n())\n\n                \nif\n \n'regions'\n \nin\n \nyamlc\n[\n'tests'\n][\ntest\n]:\n\n                    \nif\n \nyamlc\n[\n'tests'\n][\ntest\n][\n'regions'\n]\n \nis\n \nnot\n \nNone\n:\n\n                        \nr\n \n=\n \nyamlc\n[\n'tests'\n][\ntest\n][\n'regions'\n]\n\n                        \nself\n.\nset_test_region\n(\nlist\n(\nr\n))\n\n                        \nif\n \nself\n.\nverbose\n:\n\n                            \nprint\n(\nD\n \n+\n \n\"|Defined Regions:\"\n)\n\n                            \nfor\n \nlist_o\n \nin\n \nself\n.\nget_test_region\n():\n\n                                \nprint\n(\n\"\n\\t\\t\\t\n - [\n%s\n]\"\n \n%\n \nlist_o\n)\n\n                \nelse\n:\n\n                    \nglobal_regions\n \n=\n \nself\n.\nget_global_region\n(\nyamlc\n)\n\n                    \nself\n.\nset_test_region\n(\nlist\n(\nglobal_regions\n))\n\n                    \nif\n \nself\n.\nverbose\n:\n\n                        \nprint\n(\nD\n \n+\n \n\"|Global Regions:\"\n)\n\n                        \nfor\n \nlist_o\n \nin\n \nself\n.\nget_test_region\n():\n\n                            \nprint\n(\n\"\n\\t\\t\\t\n - [\n%s\n]\"\n \n%\n \nlist_o\n)\n\n                \nprint\n(\nP\n \n+\n \n\"(Completed) acquisition of [\n%s\n]\"\n \n%\n \ntest\n)\n\n                \nprint\n(\n'\n\\n\n'\n)\n\n\n    \n# Set AWS Credentials\n\n    \ndef\n \naws_api_init\n(\nself\n,\n \nargs\n):\n\n        \n\"\"\"\n\n\n        This function reads the AWS credentials from various sources to ensure\n\n\n        that the client has right credentials defined to successfully run\n\n\n        TaskCat against an AWS account.\n\n\n\n        :param args: Command line arguments for AWS credentials. It could be\n\n\n            either profile name, access key and secret key or none.\n\n\n\n        \"\"\"\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n        \nif\n \nargs\n.\nboto_profile\n:\n\n            \nboto3\n.\nsetup_default_session\n(\nprofile_name\n=\nargs\n.\nboto_profile\n)\n\n            \ntry\n:\n\n                \nsts_client\n \n=\n \nboto3\n.\nclient\n(\n'sts'\n)\n\n                \naccount\n \n=\n \nsts_client\n.\nget_caller_identity\n()\n.\nget\n(\n'Account'\n)\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :AWS AccountNumber: \n\\t\n [\n%s\n]\"\n \n%\n \naccount\n)\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Authenticated via: \n\\t\n [boto-profile] \"\n)\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nprint\n(\nE\n \n+\n \n\"Credential Error - Please check you profile!\"\n)\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\n1\n)\n\n        \nelif\n \nargs\n.\naws_access_key\n \nand\n \nargs\n.\naws_secret_key\n:\n\n            \nboto3\n.\nsetup_default_session\n(\n\n                \naws_access_key_id\n=\nargs\n.\naws_access_key\n,\n\n                \naws_secret_access_key\n=\nargs\n.\naws_secret_key\n)\n\n            \ntry\n:\n\n                \nsts_client\n \n=\n \nboto3\n.\nclient\n(\n'sts'\n)\n\n                \naccount\n \n=\n \nsts_client\n.\nget_caller_identity\n()\n.\nget\n(\n'Account'\n)\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :AWS AccountNumber: \n\\t\n [\n%s\n]\"\n \n%\n \naccount\n)\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Authenticated via: \n\\t\n [role] \"\n)\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nprint\n(\nE\n \n+\n \n\"Credential Error - Please check you keys!\"\n)\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\n1\n)\n\n        \nelse\n:\n\n            \nboto3\n.\nsetup_default_session\n(\n\n                \naws_access_key_id\n=\nargs\n.\naws_access_key\n,\n\n                \naws_secret_access_key\n=\nargs\n.\naws_secret_key\n)\n\n            \ntry\n:\n\n                \nsts_client\n \n=\n \nboto3\n.\nclient\n(\n'sts'\n)\n\n                \naccount\n \n=\n \nsts_client\n.\nget_caller_identity\n()\n.\nget\n(\n'Account'\n)\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :AWS AccountNumber: \n\\t\n [\n%s\n]\"\n \n%\n \naccount\n)\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Authenticated via: \n\\t\n [role] \"\n)\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nprint\n(\nE\n \n+\n \n\"Credential Error - Cannot assume role!\"\n)\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\n1\n)\n\n\n    \ndef\n \nvalidate_yaml\n(\nself\n,\n \nyaml_file\n):\n\n        \n\"\"\"\n\n\n        This function validates the given yaml file.\n\n\n\n        :param yaml_file: Yaml file name\n\n\n\n        \"\"\"\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n        \nrun_tests\n \n=\n \n[]\n\n        \nrequired_global_keys\n \n=\n \n[\n\n            \n'qsname'\n,\n\n            \n'owner'\n,\n\n            \n'reporting'\n,\n\n            \n'regions'\n\n        \n]\n\n\n        \nrequired_test_parameters\n \n=\n \n[\n\n            \n'template_file'\n,\n\n            \n'parameter_input'\n\n        \n]\n\n        \ntry\n:\n\n            \nif\n \nos\n.\npath\n.\nisfile\n(\nyaml_file\n):\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Reading Config form: {0}\"\n.\nformat\n(\nyaml_file\n))\n\n                \nwith\n \nopen\n(\nyaml_file\n,\n \n'r'\n)\n \nas\n \ncheckyaml\n:\n\n                    \ncfg_yml\n \n=\n \nyaml\n.\nload\n(\ncheckyaml\n.\nread\n())\n\n                    \nfor\n \nkey\n \nin\n \nrequired_global_keys\n:\n\n                        \nif\n \nkey\n \nin\n \ncfg_yml\n[\n'global'\n]\n.\nkeys\n():\n\n                            \npass\n\n                        \nelse\n:\n\n                            \nprint\n(\n\"global:\n%s\n missing from \"\n \n%\n \nkey\n \n+\n \nyaml_file\n)\n\n                            \nsys\n.\nexit\n(\n1\n)\n\n\n                    \nfor\n \ndefined\n \nin\n \ncfg_yml\n[\n'tests'\n]\n.\nkeys\n():\n\n                        \nrun_tests\n.\nappend\n(\ndefined\n)\n\n                        \nprint\n(\nself\n.\nnametag\n \n+\n \n\" |Queing test => \n%s\n \"\n \n%\n \ndefined\n)\n\n                        \nfor\n \nparms\n \nin\n \ncfg_yml\n[\n'tests'\n][\ndefined\n]\n.\nkeys\n():\n\n                            \nfor\n \nkey\n \nin\n \nrequired_test_parameters\n:\n\n                                \nif\n \nkey\n \nin\n \ncfg_yml\n[\n'tests'\n][\ndefined\n]\n.\nkeys\n():\n\n                                    \npass\n\n                                \nelse\n:\n\n                                    \nprint\n(\n\"No key \n%s\n in test\"\n \n%\n \nkey\n \n+\n \ndefined\n)\n\n                                    \nprint\n(\nE\n \n+\n \n\"While inspecting: \"\n \n+\n \nparms\n)\n\n                                    \nsys\n.\nexit\n(\n1\n)\n\n            \nelse\n:\n\n                \nprint\n(\nE\n \n+\n \n\"Cannot open [\n%s\n]\"\n \n%\n \nyaml_file\n)\n\n                \nsys\n.\nexit\n(\n1\n)\n\n        \nexcept\n \nException\n \nas\n \ne\n:\n\n            \nprint\n(\nE\n \n+\n \n\"config.yml [\n%s\n] is not formatted well!!\"\n \n%\n \nyaml_file\n)\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n            \nsys\n.\nexit\n(\n1\n)\n\n        \nreturn\n \nrun_tests\n\n\n    \ndef\n \ngenreport\n(\nself\n,\n \ntestdata_list\n,\n \ndashboard_filename\n):\n\n        \n\"\"\"\n\n\n        This function generates the test report.\n\n\n\n        :param testdata_list: List of TestData objects\n\n\n        :param dashboard_filename: Report file name\n\n\n\n        \"\"\"\n\n        \ndoc\n \n=\n \nyattag\n.\nDoc\n()\n\n\n        \n# Type of cfnlog return cfn log file\n\n        \n# Type of resource_log return resource log file\n\n        \ndef\n \ngetofile\n(\nregion\n,\n \nstack_name\n,\n \nresource_type\n):\n\n            \nextension\n \n=\n \n'.txt'\n\n            \nif\n \nresource_type\n \n==\n \n'cfnlog'\n:\n\n                \nlocation\n \n=\n \n\"{}-{}-{}{}\"\n.\nformat\n(\nstack_name\n,\n \nregion\n,\n \n'cfnlogs'\n,\n \nextension\n)\n\n                \nreturn\n \nstr\n(\nlocation\n)\n\n            \nelif\n \nresource_type\n \n==\n \n'resource_log'\n:\n\n                \nlocation\n \n=\n \n\"{}-{}-{}{}\"\n.\nformat\n(\nstack_name\n,\n \nregion\n,\n \n'resources'\n,\n \nextension\n)\n\n                \nreturn\n \nstr\n(\nlocation\n)\n\n\n        \ndef\n \nget_teststate\n(\nstackname\n,\n \nregion\n):\n\n            \n# Add try catch and return MANUALLY_DELETED\n\n            \n# Add css test-orange\n\n            \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n            \ntest_query\n \n=\n \ncfn\n.\ndescribe_stacks\n(\nStackName\n=\nstackname\n)\n\n            \nrstatus\n \n=\n \nNone\n\n            \nstatus_css\n \n=\n \nNone\n\n\n            \nfor\n \nresult\n \nin\n \ntest_query\n[\n'Stacks'\n]:\n\n                \nrstatus\n \n=\n \nresult\n.\nget\n(\n'StackStatus'\n)\n\n                \nif\n \nrstatus\n \n==\n \n'CREATE_COMPLETE'\n:\n\n                    \nstatus_css\n \n=\n \n'class=test-green'\n\n                \nelif\n \nrstatus\n \n==\n \n'CREATE_FAILED'\n:\n\n                    \nstatus_css\n \n=\n \n'class=test-red'\n\n                \nelse\n:\n\n                    \nstatus_css\n \n=\n \n'class=test-red'\n\n            \nreturn\n \nrstatus\n,\n \nstatus_css\n\n\n        \ntag\n \n=\n \ndoc\n.\ntag\n\n        \ntext\n \n=\n \ndoc\n.\ntext\n\n        \nlogo\n \n=\n \n'taskcat'\n\n        \nrepo_link\n \n=\n \n'https://github.com/aws-quickstart/taskcat'\n\n        \noutput_css\n \n=\n \n'https://taskcat.s3.amazonaws.com/assets/css/taskcat.css'\n\n        \ndoc_link\n \n=\n \n'http://taskcat.io'\n\n\n        \nwith\n \ntag\n(\n'html'\n):\n\n            \nwith\n \ntag\n(\n'head'\n):\n\n                \ndoc\n.\nstag\n(\n'meta'\n,\n \ncharset\n=\n'utf-8'\n)\n\n                \ndoc\n.\nstag\n(\n\n                    \n'meta'\n,\n \nname\n=\n\"viewport\"\n,\n \ncontent\n=\n\"width=device-width\"\n)\n\n                \ndoc\n.\nstag\n(\n'link'\n,\n \nrel\n=\n'stylesheet'\n,\n\n                         \nhref\n=\noutput_css\n)\n\n                \nwith\n \ntag\n(\n'title'\n):\n\n                    \ntext\n(\n'TaskCat Report'\n)\n\n\n            \nwith\n \ntag\n(\n'body'\n):\n\n                \ntested_on\n \n=\n \ntime\n.\nstrftime\n(\n'%A - %b,\n%d\n,%Y @ %H:%M:%S'\n)\n\n\n                \nwith\n \ntag\n(\n'table'\n,\n \n'class=header-table-fill'\n):\n\n                    \nwith\n \ntag\n(\n'tbody'\n):\n\n                        \nwith\n \ntag\n(\n'th'\n,\n \n'colspan=2'\n):\n\n                            \nwith\n \ntag\n(\n'tr'\n):\n\n                                \nwith\n \ntag\n(\n'td'\n):\n\n                                    \nwith\n \ntag\n(\n'a'\n,\n \nhref\n=\nrepo_link\n):\n\n                                        \ntext\n(\n'GitHub Repo: '\n)\n\n                                        \ntext\n(\nrepo_link\n)\n\n                                        \ndoc\n.\nstag\n(\n'br'\n)\n\n                                    \nwith\n \ntag\n(\n'a'\n,\n \nhref\n=\ndoc_link\n):\n\n                                        \ntext\n(\n'Documentation: '\n)\n\n                                        \ntext\n(\ndoc_link\n)\n\n                                        \ndoc\n.\nstag\n(\n'br'\n)\n\n                                    \ntext\n(\n'Tested on: '\n)\n\n                                    \ntext\n(\ntested_on\n)\n\n                                \nwith\n \ntag\n(\n'td'\n,\n \n'class=taskcat-logo'\n):\n\n                                    \nwith\n \ntag\n(\n'h3'\n):\n\n                                        \ntext\n(\nlogo\n)\n\n            \ndoc\n.\nstag\n(\n'p'\n)\n\n            \nwith\n \ntag\n(\n'table'\n,\n \n'class=table-fill'\n):\n\n                \nwith\n \ntag\n(\n'tbody'\n):\n\n                    \nwith\n \ntag\n(\n'thread'\n):\n\n                        \nwith\n \ntag\n(\n'tr'\n):\n\n                            \nwith\n \ntag\n(\n'th'\n,\n\n                                     \n'class=text-center'\n,\n\n                                     \n'width=25%'\n):\n\n                                \ntext\n(\n'Test Name'\n)\n\n                            \nwith\n \ntag\n(\n'th'\n,\n\n                                     \n'class=text-left'\n,\n\n                                     \n'width=10%'\n):\n\n                                \ntext\n(\n'Tested Region'\n)\n\n                            \nwith\n \ntag\n(\n'th'\n,\n\n                                     \n'class=text-left'\n,\n\n                                     \n'width=30%'\n):\n\n                                \ntext\n(\n'Stack Name'\n)\n\n                            \nwith\n \ntag\n(\n'th'\n,\n\n                                     \n'class=text-left'\n,\n\n                                     \n'width=20%'\n):\n\n                                \ntext\n(\n'Tested Results'\n)\n\n                            \nwith\n \ntag\n(\n'th'\n,\n\n                                     \n'class=text-left'\n,\n\n                                     \n'width=15%'\n):\n\n                                \ntext\n(\n'Test Logs'\n)\n\n\n                            \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n                                \nwith\n \ntag\n(\n'tr'\n,\n \n'class= test-footer'\n):\n\n                                    \nwith\n \ntag\n(\n'td'\n,\n \n'colspan=5'\n):\n\n                                        \ntext\n(\n''\n)\n\n\n                                \ntestname\n \n=\n \ntest\n.\nget_test_name\n()\n\n                                \nprint\n(\nI\n \n+\n \n\"(Generating Reports)\"\n)\n\n                                \nprint\n(\nI\n \n+\n \n\" - Processing {}\"\n.\nformat\n(\ntestname\n))\n\n                                \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                                    \nstate\n \n=\n \nself\n.\nparse_stack_info\n(\n\n                                        \nstr\n(\nstack\n[\n'StackId'\n]))\n\n                                    \nstatus\n,\n \ncss\n \n=\n \nget_teststate\n(\n\n                                        \nstate\n[\n'stack_name'\n],\n\n                                        \nstate\n[\n'region'\n])\n\n\n                                    \nwith\n \ntag\n(\n'tr'\n):\n\n                                        \nwith\n \ntag\n(\n'td'\n,\n\n                                                 \n'class=test-info'\n):\n\n                                            \nwith\n \ntag\n(\n'h3'\n):\n\n                                                \ntext\n(\ntestname\n)\n\n                                        \nwith\n \ntag\n(\n'td'\n,\n\n                                                 \n'class=text-left'\n):\n\n                                            \ntext\n(\nstate\n[\n'region'\n])\n\n                                        \nwith\n \ntag\n(\n'td'\n,\n\n                                                 \n'class=text-left'\n):\n\n                                            \ntext\n(\nstate\n[\n'stack_name'\n])\n\n                                        \nwith\n \ntag\n(\n'td'\n,\n \ncss\n):\n\n                                            \ntext\n(\nstr\n(\nstatus\n))\n\n                                        \nwith\n \ntag\n(\n'td'\n,\n\n                                                 \n'class=text-left'\n):\n\n                                            \nclog\n \n=\n \ngetofile\n(\n\n                                                \nstate\n[\n'region'\n],\n\n                                                \nstate\n[\n'stack_name'\n],\n\n                                                \n'cfnlog'\n)\n\n                                            \n# rlog = getofile(\n\n                                            \n#    state['region'],\n\n                                            \n#    state['stack_name'],\n\n                                            \n#    'resource_log')\n\n                                            \n#\n\n                                            \nwith\n \ntag\n(\n'a'\n,\n \nhref\n=\nclog\n):\n\n                                                \ntext\n(\n'View Logs '\n)\n\n                                                \n# with tag('a', href=rlog):\n\n                                                \n#    text('Resource Logs ')\n\n                            \nwith\n \ntag\n(\n'tr'\n,\n \n'class= test-footer'\n):\n\n                                \nwith\n \ntag\n(\n'td'\n,\n \n'colspan=5'\n):\n\n                                    \nvtag\n \n=\n \n'Generated by {} {}'\n.\nformat\n(\n'taskcat'\n,\n \nversion\n)\n\n                                    \ntext\n(\nvtag\n)\n\n\n                        \ndoc\n.\nstag\n(\n'p'\n)\n\n                        \nprint\n(\n'\n\\n\n'\n)\n\n\n        \nhtmloutput\n \n=\n \nyattag\n.\nindent\n(\ndoc\n.\ngetvalue\n(),\n\n                                   \nindentation\n=\n'    '\n,\n\n                                   \nnewline\n=\n'\n\\r\\n\n'\n,\n\n                                   \nindent_text\n=\nTrue\n)\n\n\n        \nfile\n \n=\n \nopen\n(\ndashboard_filename\n,\n \n'w'\n)\n\n        \nfile\n.\nwrite\n(\nhtmloutput\n)\n\n        \nfile\n.\nclose\n()\n\n\n        \nreturn\n \nhtmloutput\n\n\n    \ndef\n \ncollect_resources\n(\nself\n,\n \ntestdata_list\n,\n \nlogpath\n):\n\n        \n\"\"\"\n\n\n        This function collects the AWS resources information created by the\n\n\n        CloudFormation stack for generating the report.\n\n\n\n        :param testdata_list: List of TestData object\n\n\n        :param logpath: Log file path\n\n\n\n        \"\"\"\n\n        \nresource\n \n=\n \n{}\n\n        \nprint\n(\nI\n \n+\n \n\"(Collecting Resources)\"\n)\n\n        \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n            \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                \nstackinfo\n \n=\n \nself\n.\nparse_stack_info\n(\nstr\n(\nstack\n[\n'StackId'\n]))\n\n                \n# Get stack resources\n\n                \nresource\n[\nstackinfo\n[\n'region'\n]]\n \n=\n \n(\n\n                    \nself\n.\nget_resources\n(\n\n                        \nstr\n(\nstackinfo\n[\n'stack_name'\n]),\n\n                        \nstr\n(\nstackinfo\n[\n'region'\n])\n\n                    \n)\n\n                \n)\n\n                \nextension\n \n=\n \n'.txt'\n\n                \ntest_logpath\n \n=\n \n'{}/{}-{}-{}{}'\n.\nformat\n(\n\n                    \nlogpath\n,\n\n                    \nstackinfo\n[\n'stack_name'\n],\n\n                    \nstackinfo\n[\n'region'\n],\n\n                    \n'resources'\n,\n\n                    \nextension\n)\n\n\n                \n# Write resource logs\n\n                \nfile\n \n=\n \nopen\n(\ntest_logpath\n,\n \n'w'\n)\n\n                \nfile\n.\nwrite\n(\nstr\n(\n\n                    \njson\n.\ndumps\n(\n\n                        \nresource\n,\n\n                        \nindent\n=\n4\n,\n\n                        \nseparators\n=\n(\n','\n,\n \n': '\n))))\n\n                \nfile\n.\nclose\n()\n\n\n    \n@staticmethod\n\n    \ndef\n \nget_cfnlogs\n(\nstackname\n,\n \nregion\n):\n\n        \n\"\"\"\n\n\n        This function returns the event logs of the given stack in a specific format.\n\n\n        :param stackname: Name of the stack\n\n\n        :param region: Region stack belongs to\n\n\n        :return: Event logs of the stack\n\n\n        \"\"\"\n\n\n        \nprint\n(\nI\n \n+\n \n\"Collecting logs for \"\n \n+\n \nstackname\n \n+\n \n\"\n\\\"\\n\n\"\n)\n\n        \n# Collect stack_events\n\n        \nstack_events\n \n=\n \nget_cfn_stack_events\n(\nstackname\n,\n \nregion\n)\n\n        \n# Uncomment line for debug\n\n        \n# pprint.pprint (stack_events)\n\n        \nevents\n \n=\n \n[]\n\n        \nfor\n \nevent\n \nin\n \nstack_events\n:\n\n            \nevent_details\n \n=\n \n{\n'TimeStamp'\n:\n \nevent\n[\n'Timestamp'\n],\n\n                             \n'ResourceStatus'\n:\n \nevent\n[\n'ResourceStatus'\n],\n\n                             \n'ResourceType'\n:\n \nevent\n[\n'ResourceType'\n],\n\n                             \n'LogicalResourceId'\n:\n \nevent\n[\n'LogicalResourceId'\n]}\n\n            \nif\n \n'ResourceStatusReason'\n \nin\n \nevent\n:\n\n                \nevent_details\n[\n'ResourceStatusReason'\n]\n \n=\n \nevent\n[\n'ResourceStatusReason'\n]\n\n            \nelse\n:\n\n                \nevent_details\n[\n'ResourceStatusReason'\n]\n \n=\n \n''\n\n\n            \nevents\n.\nappend\n(\nevent_details\n)\n\n\n        \nreturn\n \nevents\n\n\n    \ndef\n \ncreatecfnlogs\n(\nself\n,\n \ntestdata_list\n,\n \nlogpath\n):\n\n        \n\"\"\"\n\n\n        This function creates the CloudFormation log files.\n\n\n\n        :param testdata_list: List of TestData objects\n\n\n        :param logpath: Log file path\n\n\n        :return:\n\n\n        \"\"\"\n\n        \nprint\n(\nI\n \n+\n \n\"(Collecting CloudFormation Logs)\"\n)\n\n        \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n            \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                \nstackinfo\n \n=\n \nself\n.\nparse_stack_info\n(\nstr\n(\nstack\n[\n'StackId'\n]))\n\n                \nstackname\n \n=\n \nstr\n(\nstackinfo\n[\n'stack_name'\n])\n\n                \nregion\n \n=\n \nstr\n(\nstackinfo\n[\n'region'\n])\n\n                \nextension\n \n=\n \n'.txt'\n\n                \ntest_logpath\n \n=\n \n'{}/{}-{}-{}{}'\n.\nformat\n(\n\n                    \nlogpath\n,\n\n                    \nstackname\n,\n\n                    \nregion\n,\n\n                    \n'cfnlogs'\n,\n\n                    \nextension\n)\n\n                \nself\n.\nwrite_logs\n(\nstr\n(\nstack\n[\n'StackId'\n]),\n \ntest_logpath\n)\n\n\n    \ndef\n \nwrite_logs\n(\nself\n,\n \nstack_id\n,\n \nlogpath\n):\n\n        \n\"\"\"\n\n\n        This function writes the event logs of the given stack and all the child stacks to a given file.\n\n\n        :param stack_id: Stack Id\n\n\n        :param logpath: Log file path\n\n\n        :return: \n\n\n        \"\"\"\n\n        \nstackinfo\n \n=\n \nself\n.\nparse_stack_info\n(\nstr\n(\nstack_id\n))\n\n        \nstackname\n \n=\n \nstr\n(\nstackinfo\n[\n'stack_name'\n])\n\n        \nregion\n \n=\n \nstr\n(\nstackinfo\n[\n'region'\n])\n\n\n        \n# Get stack resources\n\n        \ncfnlogs\n \n=\n \nself\n.\nget_cfnlogs\n(\nstackname\n,\n \nregion\n)\n\n\n        \nif\n \ncfnlogs\n[\n0\n][\n'ResourceStatus'\n]\n \n!=\n \n'CREATE_COMPLETE'\n:\n\n            \nif\n \n'ResourceStatusReason'\n \nin\n \ncfnlogs\n[\n0\n]:\n\n                \nreason\n \n=\n \ncfnlogs\n[\n0\n][\n'ResourceStatusReason'\n]\n\n            \nelse\n:\n\n                \nreason\n \n=\n \n'Unknown'\n\n        \nelse\n:\n\n            \nreason\n \n=\n \n\"Stack launch was successful\"\n\n\n        \nprint\n(\n\"\n\\t\n |StackName: \"\n \n+\n \nstackname\n)\n\n        \nprint\n(\n\"\n\\t\n |Region: \"\n \n+\n \nregion\n)\n\n        \nprint\n(\n\"\n\\t\n |Logging to: \"\n \n+\n \nlogpath\n)\n\n        \nprint\n(\n\"\n\\t\n |Tested on: \"\n \n+\n \nstr\n(\ndatetime\n.\ndatetime\n.\nnow\n()\n.\nstrftime\n(\n\"%A, \n%d\n. %B %Y %I:%M%p\"\n)))\n\n        \nprint\n(\n\"------------------------------------------------------------------------------------------\"\n)\n\n        \nprint\n(\n\"ResourceStatusReason: \"\n)\n\n        \nprint\n(\ntextwrap\n.\nfill\n(\nstr\n(\nreason\n),\n \n85\n))\n\n        \nprint\n(\n\"==========================================================================================\"\n)\n\n        \nwith\n \nopen\n(\nlogpath\n,\n \n\"a\"\n)\n \nas\n \nlog_output\n:\n\n            \nlog_output\n.\nwrite\n(\n\"-----------------------------------------------------------------------------\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"Region: \"\n \n+\n \nregion\n \n+\n \n\"\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"StackName: \"\n \n+\n \nstackname\n \n+\n \n\"\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"*****************************************************************************\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"ResourceStatusReason:  \n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\ntextwrap\n.\nfill\n(\nstr\n(\nreason\n),\n \n85\n)\n \n+\n \n\"\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"*****************************************************************************\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"*****************************************************************************\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"Events:  \n\\n\n\"\n)\n\n            \nlog_output\n.\nwritelines\n(\ntabulate\n.\ntabulate\n(\ncfnlogs\n,\n \nheaders\n=\n\"keys\"\n))\n\n            \nlog_output\n.\nwrite\n(\n\n                \n\"\n\\n\n*****************************************************************************\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"-----------------------------------------------------------------------------\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"Tested on: \"\n \n+\n \ndatetime\n.\ndatetime\n.\nnow\n()\n.\nstrftime\n(\n\"%A, \n%d\n. %B %Y %I:%M%p\"\n)\n \n+\n \n\"\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\n                \n\"-----------------------------------------------------------------------------\n\\n\\n\n\"\n)\n\n            \nlog_output\n.\nclose\n()\n\n\n        \n# Collect resources of the stack and get event logs for any child stacks\n\n        \nresources\n \n=\n \nself\n.\nget_resources\n(\nstackname\n,\n \nregion\n,\n \ninclude_stacks\n=\nTrue\n)\n\n        \nfor\n \nresource\n \nin\n \nresources\n:\n\n            \nif\n \nresource\n[\n'resourceType'\n]\n \n==\n \n'AWS::CloudFormation::Stack'\n:\n\n                \nself\n.\nwrite_logs\n(\nresource\n[\n'physicalId'\n],\n \nlogpath\n)\n\n\n    \ndef\n \ncreatereport\n(\nself\n,\n \ntestdata_list\n,\n \nfilename\n):\n\n        \n\"\"\"\n\n\n        This function creates the test report.\n\n\n\n        :param testdata_list: List of TestData objects\n\n\n        :param filename: Report file name\n\n\n        :return:\n\n\n        \"\"\"\n\n        \no_directory\n \n=\n \n'taskcat_outputs'\n\n\n        \n# noinspection PyBroadException\n\n        \ntry\n:\n\n            \nos\n.\nstat\n(\no_directory\n)\n\n        \nexcept\n \nException\n:\n\n            \nos\n.\nmkdir\n(\no_directory\n)\n\n        \nprint\n(\n\"{} |GENERATING REPORTS{}\"\n.\nformat\n(\nself\n.\nnametag\n,\n \nheader\n,\n \nrst_color\n))\n\n        \nprint\n(\nI\n \n+\n \n\"Creating report in [\n%s\n]\"\n \n%\n \no_directory\n)\n\n        \ndashboard_filename\n \n=\n \no_directory\n \n+\n \n\"/\"\n \n+\n \nfilename\n\n\n        \n# Collect recursive logs\n\n        \n# file path is already setup by getofile function in genreports\n\n        \nself\n.\ncreatecfnlogs\n(\ntestdata_list\n,\n \no_directory\n)\n\n\n        \n# Generate html test dashboard\n\n        \n# Uses logpath + region to create View Logs link\n\n        \nself\n.\ngenreport\n(\ntestdata_list\n,\n \ndashboard_filename\n)\n\n\n    \n@property\n\n    \ndef\n \ninterface\n(\nself\n):\n\n        \nparser\n \n=\n \nargparse\n.\nArgumentParser\n(\n\n            \ndescription\n=\n\"\"\"Multi-Region CloudFormation Deployment Tool)\n\n\n            \n\n\n    [Auto-generated stack inputs] \n\n\n    Auto-select available az\n\\'\ns at runtime based test region defined $[_genazX] $[_genaz<number of az\n\\'\ns>] \n\n\n    Generate password during runtime $[_genpass_XX]  $[_genpass_<length>_<type>]\n\n\n        - Parameters value in json input file must start with \n\\'\n$[\n\\'\n end with \n\\'\n]\n\\'\n\n\n    \n\n\n    Example:[ {\n\n\n        \"ParameterKey\": \"AvailabilityZones\",\n\n\n        \"ParameterValue\": \"$[taskcat_genaz_2]\"\n\n\n    } ]\n\n\n    Generates: us-east-1a, us-east-2b\n\n\n    \n\n\n    Example:[ {\n\n\n        \"ParameterKey\": \"AppPassword\",\n\n\n        \"ParameterValue\": \"$[taskcat_genpass_8]\"\n\n\n    } ]\n\n\n    \n\n\n    Generates: tI8zN3iX8 \n\n\n    Optionally: $[taskcat_genpass_8S]\n\n\n    Generates: mA5@cB5!\n\n\n    \n\n\n    For more info see: http://taskcat.io\n\n\n\n        \"\"\"\n,\n\n            \nprog\n=\n'taskcat'\n,\n\n            \nprefix_chars\n=\n'-'\n,\n\n            \nformatter_class\n=\nRawTextHelpFormatter\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-c'\n,\n\n            \n'--config_yml'\n,\n\n            \ntype\n=\nstr\n,\n\n            \nhelp\n=\n\"(Required!) [config.yml] pass '-ey' for example\"\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-P'\n,\n\n            \n'--boto_profile'\n,\n\n            \ntype\n=\nstr\n,\n\n            \nhelp\n=\n\"Authenticate using boto profile\"\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-A'\n,\n\n            \n'--aws_access_key'\n,\n\n            \ntype\n=\nstr\n,\n\n            \nhelp\n=\n\"AWS Access Key\"\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-S'\n,\n\n            \n'--aws_secret_key'\n,\n\n            \ntype\n=\nstr\n,\n\n            \nhelp\n=\n\"AWS Secrect Key\"\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-ey'\n,\n\n            \n'--example_yaml'\n,\n\n            \naction\n=\n'store_true'\n,\n\n            \nhelp\n=\n\"Print out example yaml\"\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-n'\n,\n\n            \n'--no_cleanup'\n,\n\n            \naction\n=\n'store_true'\n,\n\n            \nhelp\n=\n\"Sets cleanup to false (Does not teardown stacks)\"\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-v'\n,\n\n            \n'--verbose'\n,\n\n            \naction\n=\n'store_true'\n,\n\n            \nhelp\n=\n\"Enables verbosity\"\n)\n\n\n        \nargs\n \n=\n \nparser\n.\nparse_args\n()\n\n\n        \nif\n \nlen\n(\nsys\n.\nargv\n)\n \n==\n \n1\n:\n\n            \nprint\n(\nparser\n.\nprint_help\n())\n\n            \nsys\n.\nexit\n(\n0\n)\n\n\n        \nif\n \nargs\n.\nexample_yaml\n:\n\n            \nprint\n(\n\"#An example: config.yml file to be used with \n%s\n \"\n \n%\n \n__name__\n)\n\n            \nprint\n(\nyaml_cfg\n)\n\n            \nsys\n.\nexit\n(\n0\n)\n\n\n        \nif\n \nargs\n.\nverbose\n:\n\n            \nself\n.\nverbose\n \n=\n \nTrue\n\n        \n# Overrides Defaults for cleanup but does not overwrite config.yml\n\n        \nif\n \nargs\n.\nno_cleanup\n:\n\n            \nself\n.\nrun_cleanup\n \n=\n \nFalse\n\n\n        \nif\n \nargs\n.\nboto_profile\n \nis\n \nnot\n \nNone\n:\n\n            \nif\n \nargs\n.\naws_access_key\n \nis\n \nnot\n \nNone\n \nor\n \nargs\n.\naws_secret_key\n \nis\n \nnot\n \nNone\n:\n\n                \nparser\n.\nerror\n(\n\"Cannot use boto profile -P (--boto_profile)\"\n \n+\n\n                             \n\"with --aws_access_key or --aws_secret_key\"\n)\n\n                \nprint\n(\nparser\n.\nprint_help\n())\n\n                \nsys\n.\nexit\n(\n1\n)\n\n\n        \nreturn\n \nargs\n\n\n    \ndef\n \nwelcome\n(\nself\n,\n \nprog_name\n=\n'taskcat.io'\n):\n\n        \nbanner\n \n=\n \npyfiglet\n.\nFiglet\n(\nfont\n=\n'standard'\n)\n\n        \nself\n.\nbanner\n \n=\n \nbanner\n\n        \nprint\n(\n\"{0}\"\n.\nformat\n(\nbanner\n.\nrenderText\n(\nprog_name\n),\n \n'\n\\n\n'\n))\n\n        \nprint\n(\n\"version \n%s\n\"\n \n%\n \nversion\n)\n\n\n\n\ndef\n \nget_cfn_stack_events\n(\nstackname\n,\n \nregion\n):\n\n    \n\"\"\"\n\n\n    Given a stack name and the region, this function returns the event logs of the given stack, as list.\n\n\n    :param stackname: Name of the stack\n\n\n    :param region: Region stack belongs to\n\n\n    :return: Event logs of the stack\n\n\n    \"\"\"\n\n    \ncfn_client\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n    \nstack_events\n \n=\n \n[]\n\n    \ntry\n:\n\n        \nresponse\n \n=\n \ncfn_client\n.\ndescribe_stack_events\n(\nStackName\n=\nstackname\n)\n\n        \nstack_events\n.\nextend\n(\nresponse\n[\n'StackEvents'\n])\n\n        \nwhile\n \n'NextToken'\n \nin\n \nresponse\n:\n\n            \nresponse\n \n=\n \ncfn_client\n.\ndescribe_stack_events\n(\nNextToken\n=\nresponse\n[\n'NextToken'\n],\n \nStackName\n=\nstackname\n)\n\n            \nstack_events\n.\nextend\n(\nresponse\n[\n'StackEvents'\n])\n\n    \nexcept\n \nClientError\n \nas\n \ne\n:\n\n        \nprint\n(\n\"{} Error trying to get the events for stack [{}] in region [{}]\n\\b\n {}\"\n.\nformat\n(\n\n            \nE\n,\n\n            \nstr\n(\nstackname\n),\n\n            \nstr\n(\nregion\n),\n\n            \ne\n\n        \n))\n\n        \nsys\n.\nexit\n()\n\n\n    \nreturn\n \nstack_events\n\n\n\n\ndef\n \nmain\n():\n\n    \npass\n\n\n\n\nif\n \n__name__\n \n==\n \n'__main__'\n:\n\n    \npass\n\n\n\nelse\n:\n\n    \nmain\n()\n\n\n\n\n  \n\n\n  \n\n\n  \n\n\n\n    \nClasses\n\n\n      \n\n      \nclass \nTaskCat\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \nclass\n \nTaskCat\n(\nobject\n):\n\n    \n# CONSTRUCTOR\n\n    \n# ============\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nnametag\n=\n'[taskcat]'\n):\n\n        \nself\n.\nnametag\n \n=\n \n'{1}{0}{2}'\n.\nformat\n(\nnametag\n,\n \nname_color\n,\n \nrst_color\n)\n\n        \nself\n.\nproject\n \n=\n \nNone\n\n        \nself\n.\nbanner\n \n=\n \nNone\n\n        \nself\n.\ncapabilities\n \n=\n \n[]\n\n        \nself\n.\nverbose\n \n=\n \nFalse\n\n        \nself\n.\nconfig\n \n=\n \n'config.yml'\n\n        \nself\n.\ntest_region\n \n=\n \n[]\n\n        \nself\n.\ns3bucket\n \n=\n \nNone\n\n        \nself\n.\ntemplate_path\n \n=\n \nNone\n\n        \nself\n.\nparameter_path\n \n=\n \nNone\n\n        \nself\n.\ndefult_region\n \n=\n \n\"us-east-1\"\n\n        \nself\n.\n_template_file\n \n=\n \nNone\n\n        \nself\n.\n_parameter_file\n \n=\n \nNone\n\n        \nself\n.\n_parameter_path\n \n=\n \nNone\n\n        \nself\n.\n_termsize\n \n=\n \n110\n\n        \nself\n.\n_banner\n \n=\n \n\"\"\n\n        \nself\n.\n_report\n \n=\n \nFalse\n\n        \nself\n.\n_use_global\n \n=\n \nFalse\n\n        \nself\n.\n_password\n \n=\n \nNone\n\n        \nself\n.\nrun_cleanup\n \n=\n \nTrue\n\n\n    \n# SETTERS AND GETTERS\n\n    \n# ===================\n\n\n    \ndef\n \nset_project\n(\nself\n,\n \nproject\n):\n\n        \nself\n.\nproject\n \n=\n \nproject\n\n\n    \ndef\n \nget_project\n(\nself\n):\n\n        \nreturn\n \nself\n.\nproject\n\n\n    \ndef\n \nset_capabilities\n(\nself\n,\n \nability\n):\n\n        \nself\n.\ncapabilities\n.\nappend\n(\nability\n)\n\n\n    \ndef\n \nget_capabilities\n(\nself\n):\n\n        \nreturn\n \nself\n.\ncapabilities\n\n\n    \ndef\n \nset_s3bucket\n(\nself\n,\n \nbucket\n):\n\n        \nself\n.\ns3bucket\n \n=\n \nbucket\n\n\n    \ndef\n \nget_s3bucket\n(\nself\n):\n\n        \nreturn\n \nstr\n(\nself\n.\ns3bucket\n)\n\n\n    \ndef\n \nset_config\n(\nself\n,\n \nconfig_yml\n):\n\n        \nif\n \nos\n.\npath\n.\nisfile\n(\nconfig_yml\n):\n\n            \nself\n.\nconfig\n \n=\n \nconfig_yml\n\n        \nelse\n:\n\n            \nprint\n(\n\"Cannot locate file \n%s\n\"\n \n%\n \nconfig_yml\n)\n\n            \nexit\n(\n1\n)\n\n\n    \ndef\n \nget_config\n(\nself\n):\n\n        \nreturn\n \nself\n.\nconfig\n\n\n    \ndef\n \nget_template_file\n(\nself\n):\n\n        \nreturn\n \nself\n.\n_template_file\n\n\n    \ndef\n \nset_template_file\n(\nself\n,\n \ntemplate\n):\n\n        \nself\n.\n_template_file\n \n=\n \ntemplate\n\n\n    \ndef\n \nset_parameter_file\n(\nself\n,\n \nparameter\n):\n\n        \nself\n.\n_parameter_file\n \n=\n \nparameter\n\n\n    \ndef\n \nget_parameter_file\n(\nself\n):\n\n        \nreturn\n \nself\n.\n_parameter_file\n\n\n    \ndef\n \nset_parameter_path\n(\nself\n,\n \nparameter\n):\n\n        \nself\n.\nparameter_path\n \n=\n \nparameter\n\n\n    \ndef\n \nget_parameter_path\n(\nself\n):\n\n        \nreturn\n \nself\n.\nparameter_path\n\n\n    \ndef\n \nset_template_path\n(\nself\n,\n \ntemplate\n):\n\n        \nself\n.\ntemplate_path\n \n=\n \ntemplate\n\n\n    \ndef\n \nget_template_path\n(\nself\n):\n\n        \nreturn\n \nself\n.\ntemplate_path\n\n\n    \ndef\n \nset_password\n(\nself\n,\n \npassword\n):\n\n        \nself\n.\n_password\n \n=\n \npassword\n\n\n    \ndef\n \nget_password\n(\nself\n):\n\n        \nreturn\n \nself\n.\n_password\n\n\n    \ndef\n \nset_default_region\n(\nself\n,\n \nregion\n):\n\n        \nself\n.\ndefult_region\n \n=\n \nregion\n\n\n    \ndef\n \nget_default_region\n(\nself\n):\n\n        \nreturn\n \nself\n.\ndefult_region\n\n\n    \ndef\n \nget_test_region\n(\nself\n):\n\n        \nreturn\n \nself\n.\ntest_region\n\n\n    \ndef\n \nset_test_region\n(\nself\n,\n \nregion_list\n):\n\n        \nself\n.\ntest_region\n \n=\n \n[]\n\n        \nfor\n \nregion\n \nin\n \nregion_list\n:\n\n            \nself\n.\ntest_region\n.\nappend\n(\nregion\n)\n\n\n    \ndef\n \nset_docleanup\n(\nself\n,\n \ncleanup_value\n):\n\n        \nself\n.\nrun_cleanup\n \n=\n \ncleanup_value\n\n\n    \ndef\n \nget_docleanup\n(\nself\n):\n\n        \nreturn\n \nself\n.\nrun_cleanup\n\n\n    \n#      FUNCTIONS       #\n\n    \n# ==================== #\n\n\n    \ndef\n \nstage_in_s3\n(\nself\n,\n \ntaskcat_cfg\n):\n\n        \n\"\"\"\n\n\n        Upload templates and other artifacts to s3.\n\n\n\n        This function creates the s3 bucket with name provided in the config yml file. If\n\n\n        no bucket name provided, it creates the s3 bucket using project name provided in\n\n\n        config yml file. And uploads the templates and other artifacts to the s3 bucket.\n\n\n\n        :param taskcat_cfg: Taskcat configuration provided in yml file\n\n\n\n        \"\"\"\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n        \nprint\n(\n\"{} |CONTENTS OF  S3 BUCKET{}\"\n.\nformat\n(\nself\n.\nnametag\n,\n \nheader\n,\n \nrst_color\n))\n\n\n        \nproject\n \n=\n \ntaskcat_cfg\n[\n'global'\n][\n'qsname'\n]\n\n\n        \ns3\n \n=\n \nboto3\n.\nresource\n(\n's3'\n)\n\n        \nif\n \n's3bucket'\n \nin\n \ntaskcat_cfg\n[\n'global'\n]\n.\nkeys\n():\n\n            \nbucket\n \n=\n \ns3\n.\nBucket\n(\ntaskcat_cfg\n[\n'global'\n][\n's3bucket'\n])\n\n            \nprint\n(\nI\n \n+\n \n\"Staging Bucket => \"\n \n+\n \nbucket\n.\nname\n)\n\n            \nself\n.\nset_s3bucket\n(\nbucket\n.\nname\n)\n\n        \nelse\n:\n\n            \nauto_bucket\n \n=\n \n'taskcat-'\n \n+\n \nproject\n \n+\n \n\"-\"\n \n+\n \njobid\n[:\n8\n]\n\n            \nprint\n(\nI\n \n+\n \n\"Staging Bucket => \"\n \n+\n \nauto_bucket\n)\n\n            \ns3\n.\ncreate_bucket\n(\nBucket\n=\nauto_bucket\n)\n\n            \nbucket\n \n=\n \ns3\n.\nBucket\n(\nauto_bucket\n)\n\n            \nself\n.\nset_s3bucket\n(\nbucket\n.\nname\n)\n\n\n        \nself\n.\nset_project\n(\nproject\n)\n\n        \nif\n \nos\n.\npath\n.\nisdir\n(\nproject\n):\n\n            \nfsmap\n \n=\n \nbuildmap\n(\n'.'\n,\n \nproject\n)\n\n        \nelse\n:\n\n            \nexample1\n \n=\n \n'''\n\n\n            # Name of example project = [projectx]\n\n\n            # Command issued to run taskcat = taskcat.py -c projectx/ci/config.yml\n\n\n            Hint: if taskcat.py is not in your path specify the full path to taskcat.py\n\n\n            \n\n\n            # Example of expected directory/project structure\n\n\n            projectx\n\n\n            \u251c\u2500\u2500 LICENSE.txt\n\n\n            \u251c\u2500\u2500 ci\n\n\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 taskcat.yml         # TaskCat Configuration file\n\n\n            \u2502\u00a0\u00a0 \u251c\u2500\u2500 projectx-input.json # Inputs to pass during stackcreation\n\n\n            \u251c\u2500\u2500 scripts\n\n\n            \u2502\u00a0\u00a0 \u2514\u2500\u2500 project-userdata.sh # Any scripts that is part of this project\n\n\n            \u2514\u2500\u2500 templates\n\n\n                \u2514\u2500\u2500 projectx.template\n\n\n\n            # Contents of taskcat.yml\n\n\n            global:\n\n\n              qsname: projectx\n\n\n              regions:\n\n\n                - us-east-1\n\n\n                - us-west-1\n\n\n                - us-west-2\n\n\n             \n\n\n            tests:\n\n\n              projectx-test:\n\n\n                template_file: projectx.template\n\n\n                parameter_input: projectx-input.json\n\n\n                '''\n\n\n            \nprint\n(\n'''\n\\t\\t\n Hint: The name specfied as value of qsname ({})\n\n\n                    must match the root directory of your project'''\n.\nformat\n(\nproject\n))\n\n            \nprint\n(\n\"{0}!Cannot find directory [{1}] in {2}\"\n.\nformat\n(\nE\n,\n \nproject\n,\n \nos\n.\ngetcwd\n()))\n\n            \nprint\n(\n\"\n\\n\\t\n    Example:{}\"\n.\nformat\n(\nexample1\n,\n \n'\n\\n\n'\n))\n\n            \nprint\n(\nI\n \n+\n \n\"Please cd to where you project is located\"\n)\n\n            \nsys\n.\nexit\n(\n1\n)\n\n\n        \nfor\n \nfilename\n \nin\n \nfsmap\n:\n\n            \ntry\n:\n\n                \nupload\n \n=\n \nre\n.\nsub\n(\n'^./'\n,\n \n''\n,\n \nfilename\n)\n\n                \nbucket\n.\nAcl\n()\n.\nput\n(\nACL\n=\n'public-read'\n)\n\n                \nbucket\n.\nupload_file\n(\nfilename\n,\n\n                                   \nupload\n,\n\n                                   \nExtraArgs\n=\n{\n'ACL'\n:\n \n'public-read'\n})\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nprint\n(\n\"Cannot Upload to bucket => \n%s\n\"\n \n%\n \nbucket\n.\nname\n)\n\n                \nprint\n(\nE\n \n+\n \n\"Check that you bucketname is correct\"\n)\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\n1\n)\n\n\n        \nfor\n \nobj\n \nin\n \nbucket\n.\nobjects\n.\nall\n():\n\n            \no\n \n=\n \nstr\n(\n'{0}/{1}'\n.\nformat\n(\nself\n.\nget_s3bucket\n(),\n \nobj\n.\nkey\n))\n\n            \nprint\n(\no\n)\n\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n\n    \n@staticmethod\n\n    \ndef\n \nget_available_azs\n(\nregion\n,\n \ncount\n):\n\n        \n\"\"\"\n\n\n        Returns a list of availability zones in a given region.\n\n\n\n        :param region: Region for the availability zones\n\n\n        :param count: Minimum number of availability zones needed\n\n\n\n        :return: List of availability zones in a given region\n\n\n\n        \"\"\"\n\n        \navailable_azs\n \n=\n \n[]\n\n        \nec2_client\n \n=\n \nboto3\n.\nclient\n(\n'ec2'\n,\n \nregion_name\n=\nregion\n)\n\n        \navailability_zones\n \n=\n \nec2_client\n.\ndescribe_availability_zones\n(\n\n            \nFilters\n=\n[{\n'Name'\n:\n \n'state'\n,\n \n'Values'\n:\n \n[\n'available'\n]}])\n\n\n        \nfor\n \naz\n \nin\n \navailability_zones\n[\n'AvailabilityZones'\n]:\n\n            \navailable_azs\n.\nappend\n(\naz\n[\n'ZoneName'\n])\n\n\n        \nif\n \nlen\n(\navailable_azs\n)\n \n<\n \ncount\n:\n\n            \nprint\n(\n\"{0}!Only {1} az's are available in {2}\"\n.\nformat\n(\nE\n,\n \nlen\n(\navailable_azs\n),\n \nregion\n))\n\n            \nquit\n()\n\n        \nelse\n:\n\n            \nazs\n \n=\n \n','\n.\njoin\n(\navailable_azs\n[:\ncount\n])\n\n            \nreturn\n \nazs\n\n\n    \n@staticmethod\n\n    \ndef\n \nget_s3contents\n(\nurl\n):\n\n        \npayload\n \n=\n \nrequests\n.\nget\n(\nurl\n)\n\n        \nreturn\n \npayload\n.\ntext\n\n\n    \ndef\n \nget_s3_url\n(\nself\n,\n \nkey\n):\n\n        \n\"\"\"\n\n\n        Returns S3 url of a given object.\n\n\n\n        :param key: Name of the object whose S3 url is being returned\n\n\n        :return: S3 url of the given key\n\n\n\n        \"\"\"\n\n        \nclient\n \n=\n \nboto3\n.\nclient\n(\n's3'\n,\n \nconfig\n=\nConfig\n(\nsignature_version\n=\n's3v4'\n))\n\n\n        \nbucket_location\n \n=\n \nclient\n.\nget_bucket_location\n(\n\n            \nBucket\n=\nself\n.\nget_s3bucket\n())\n\n        \nresult\n \n=\n \nclient\n.\nlist_objects\n(\nBucket\n=\nself\n.\nget_s3bucket\n(),\n\n                                     \nPrefix\n=\nself\n.\nget_project\n())\n\n        \ncontents\n \n=\n \nresult\n.\nget\n(\n'Contents'\n)\n\n        \nfor\n \ns3obj\n \nin\n \ncontents\n:\n\n            \nfor\n \nmetadata\n \nin\n \ns3obj\n.\nitems\n():\n\n                \nif\n \nmetadata\n[\n0\n]\n \n==\n \n'Key'\n:\n\n                    \nif\n \nkey\n \nin\n \nmetadata\n[\n1\n]:\n\n                        \n# Finding exact match\n\n                        \nterms\n \n=\n \nmetadata\n[\n1\n]\n.\nsplit\n(\n\"/\"\n)\n\n                        \nif\n \nkey\n \n==\n \nterms\n[\n-\n1\n]:\n\n                            \nif\n \nbucket_location\n[\n\n                                \n'LocationConstraint'\n\n                            \n]\n \nis\n \nnot\n \nNone\n:\n\n                                \no_url\n \n=\n \n\"https://s3-{0}.{1}/{2}/{3}\"\n.\nformat\n(\n\n                                    \nbucket_location\n[\n'LocationConstraint'\n],\n\n                                    \n\"amazonaws.com\"\n,\n\n                                    \nself\n.\nget_s3bucket\n(),\n\n                                    \nmetadata\n[\n1\n])\n\n                                \nreturn\n \no_url\n\n                            \nelse\n:\n\n                                \namzns3\n \n=\n \n's3.amazonaws.com'\n\n                                \no_url\n \n=\n \n\"https://{0}/{1}/{2}\"\n.\nformat\n(\namzns3\n,\n \nself\n.\nget_s3bucket\n(),\n \nmetadata\n[\n1\n])\n\n                                \nreturn\n \no_url\n\n\n    \ndef\n \nget_global_region\n(\nself\n,\n \nyamlcfg\n):\n\n        \n\"\"\"\n\n\n        Returns a list of regions defined under global region in the yml config file.\n\n\n\n        :param yamlcfg: Content of the yml config file\n\n\n        :return: List of regions\n\n\n\n        \"\"\"\n\n        \ng_regions\n \n=\n \n[]\n\n        \nfor\n \nkeys\n \nin\n \nyamlcfg\n[\n'global'\n]\n.\nkeys\n():\n\n            \nif\n \n'region'\n \nin\n \nkeys\n:\n\n                \ntry\n:\n\n                    \niter\n(\nyamlcfg\n[\n'global'\n][\n'regions'\n])\n\n                    \nnamespace\n \n=\n \n'global'\n\n                    \nfor\n \nregion\n \nin\n \nyamlcfg\n[\n'global'\n][\n'regions'\n]:\n\n                        \n# print(\"found region %s\" % region)\n\n                        \ng_regions\n.\nappend\n(\nregion\n)\n\n                        \nself\n.\n_use_global\n \n=\n \nTrue\n\n                \nexcept\n \nTypeError\n:\n\n                    \nprint\n(\n\"No regions defined in [\n%s\n]:\"\n \n%\n \nnamespace\n)\n\n                    \nprint\n(\n\"Please correct region defs[\n%s\n]:\"\n \n%\n \nnamespace\n)\n\n        \nreturn\n \ng_regions\n\n\n    \ndef\n \nget_resources\n(\nself\n,\n \nstackname\n,\n \nregion\n,\n \ninclude_stacks\n=\nFalse\n):\n\n        \n\"\"\"\n\n\n        Given a stackname, and region function returns the list of dictionary items, where each item\n\n\n        consist of logicalId, physicalId and resourceType of the aws resource associated\n\n\n        with the stack.\n\n\n\n        :param include_stacks: \n\n\n        :param stackname: CloudFormation stack name\n\n\n        :param region: AWS region\n\n\n        :return: List of objects in the following format\n\n\n             [\n\n\n                 {\n\n\n                     'logicalId': 'string',\n\n\n                     'physicalId': 'string',\n\n\n                     'resourceType': 'String'\n\n\n                 },\n\n\n             ]\n\n\n\n        \"\"\"\n\n        \nl_resources\n \n=\n \n[]\n\n        \nself\n.\nget_resources_helper\n(\nstackname\n,\n \nregion\n,\n \nl_resources\n,\n \ninclude_stacks\n)\n\n        \nreturn\n \nl_resources\n\n\n    \ndef\n \nget_resources_helper\n(\nself\n,\n \nstackname\n,\n \nregion\n,\n \nl_resources\n,\n \ninclude_stacks\n):\n\n        \n\"\"\"\n\n\n        This is a helper function of get_resources function. Check get_resources function for details.\n\n\n\n        \"\"\"\n\n        \nif\n \nstackname\n \n!=\n \n'None'\n:\n\n            \ntry\n:\n\n                \ncfn\n \n=\n \nboto3\n.\nclient\n(\n\n                    \n'cloudformation'\n,\n \nregion\n)\n\n                \nresult\n \n=\n \ncfn\n.\ndescribe_stack_resources\n(\n\n                    \nStackName\n=\nstackname\n)\n\n                \nstackresources\n \n=\n \nresult\n.\nget\n(\n'StackResources'\n)\n\n                \nfor\n \nresource\n \nin\n \nstackresources\n:\n\n                    \nif\n \nself\n.\nverbose\n:\n\n                        \nprint\n(\nD\n \n+\n \n\"Resources: for {}\"\n.\nformat\n(\nstackname\n))\n\n                        \nprint\n(\nD\n \n+\n \n\"{0} = {1}, {2} = {3}, {4} = {5}\"\n.\nformat\n(\n\n                            \n'\n\\n\\t\\t\nLogicalId'\n,\n\n                            \nresource\n.\nget\n(\n'LogicalResourceId'\n),\n\n                            \n'\n\\n\\t\\t\nPhysicalId'\n,\n\n                            \nresource\n.\nget\n(\n'PhysicalResourceId'\n),\n\n                            \n'\n\\n\\t\\t\nType'\n,\n\n                            \nresource\n.\nget\n(\n'ResourceType'\n)\n\n                        \n))\n\n                    \n# if resource is a stack and has a physical resource id (NOTE: physical id will be missing if stack creation is failed)\n\n                    \nif\n \nresource\n.\nget\n(\n\n                            \n'ResourceType'\n)\n \n==\n \n'AWS::CloudFormation::Stack'\n \nand\n \n'PhysicalResourceId'\n \nin\n \nresource\n:\n\n                        \nif\n \ninclude_stacks\n:\n\n                            \nd\n \n=\n \n{\n'logicalId'\n:\n \nresource\n.\nget\n(\n'LogicalResourceId'\n),\n\n                                 \n'physicalId'\n:\n \nresource\n.\nget\n(\n'PhysicalResourceId'\n),\n\n                                 \n'resourceType'\n:\n \nresource\n.\nget\n(\n'ResourceType'\n)}\n\n                            \nl_resources\n.\nappend\n(\nd\n)\n\n                        \nstackdata\n \n=\n \nself\n.\nparse_stack_info\n(\n\n                            \nstr\n(\nresource\n.\nget\n(\n'PhysicalResourceId'\n)))\n\n                        \nregion\n \n=\n \nstackdata\n[\n'region'\n]\n\n                        \nself\n.\nget_resources_helper\n(\nresource\n.\nget\n(\n'PhysicalResourceId'\n),\n \nregion\n,\n \nl_resources\n,\n\n                                                  \ninclude_stacks\n)\n\n                    \n# else if resource is not a stack and has a physical resource id (NOTE: physical id will be missing if stack creation is failed)\n\n                    \nelif\n \nresource\n.\nget\n(\n\n                            \n'ResourceType'\n)\n \n!=\n \n'AWS::CloudFormation::Stack'\n \nand\n \n'PhysicalResourceId'\n \nin\n \nresource\n:\n\n                        \nd\n \n=\n \n{\n'logicalId'\n:\n \nresource\n.\nget\n(\n'LogicalResourceId'\n),\n\n                             \n'physicalId'\n:\n \nresource\n.\nget\n(\n'PhysicalResourceId'\n),\n\n                             \n'resourceType'\n:\n \nresource\n.\nget\n(\n'ResourceType'\n)}\n\n                        \nl_resources\n.\nappend\n(\nd\n)\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\nF\n \n+\n \n\"Unable to get resources for stack \n%s\n\"\n \n%\n \nstackname\n)\n\n\n    \ndef\n \nget_all_resources\n(\nself\n,\n \nstackids\n,\n \nregion\n):\n\n        \n\"\"\"\n\n\n        Given a list of stackids, function returns the list of dictionary items, where each\n\n\n        item consist of stackId and the resources associated with that stack.\n\n\n\n        :param stackids: List of Stack Ids\n\n\n        :param region: AWS region\n\n\n        :return: A list of dictionary object in the following format\n\n\n                [\n\n\n                    {\n\n\n                        'stackId': 'string',\n\n\n                        'resources': [\n\n\n                            {\n\n\n                               'logicalId': 'string',\n\n\n                               'physicalId': 'string',\n\n\n                               'resourceType': 'String'\n\n\n                            },\n\n\n                        ]\n\n\n                    },\n\n\n                ]\n\n\n\n        \"\"\"\n\n        \nl_all_resources\n \n=\n \n[]\n\n        \nfor\n \nanId\n \nin\n \nstackids\n:\n\n            \nd\n \n=\n \n{\n\n                \n'stackId'\n:\n \nanId\n,\n\n                \n'resources'\n:\n \nself\n.\nget_resources\n(\nanId\n,\n \nregion\n)\n\n            \n}\n\n            \nl_all_resources\n.\nappend\n(\nd\n)\n\n        \nreturn\n \nl_all_resources\n\n\n    \ndef\n \nvalidate_template\n(\nself\n,\n \ntaskcat_cfg\n,\n \ntest_list\n):\n\n        \n\"\"\"\n\n\n        Returns TRUE if all the template files are valid, otherwise FALSE.\n\n\n\n        :param taskcat_cfg: TaskCat config object\n\n\n        :param test_list: List of tests\n\n\n\n        :return: TRUE if templates are valid, else FALSE\n\n\n        \"\"\"\n\n        \n# Load global regions\n\n        \nself\n.\nset_test_region\n(\nself\n.\nget_global_region\n(\ntaskcat_cfg\n))\n\n        \nfor\n \ntest\n \nin\n \ntest_list\n:\n\n            \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Validate Template in test[\n%s\n]\"\n \n%\n \ntest\n)\n\n            \nself\n.\ndefine_tests\n(\ntaskcat_cfg\n,\n \ntest\n)\n\n            \ntry\n:\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \n\"Default region [\n%s\n]\"\n \n%\n \nself\n.\nget_default_region\n())\n\n                \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nself\n.\nget_default_region\n())\n\n                \ncfn\n.\nvalidate_template\n(\nTemplateURL\n=\nself\n.\nget_s3_url\n(\nself\n.\nget_template_file\n()))\n\n                \nresult\n \n=\n \ncfn\n.\nvalidate_template\n(\nTemplateURL\n=\nself\n.\nget_s3_url\n(\nself\n.\nget_template_file\n()))\n\n                \nprint\n(\nP\n \n+\n \n\"Validated [\n%s\n]\"\n \n%\n \nself\n.\nget_template_file\n())\n\n                \ncfn_result\n \n=\n \n(\nresult\n[\n'Description'\n])\n\n                \nprint\n(\nI\n \n+\n \n\"Description  [\n%s\n]\"\n \n%\n \ntextwrap\n.\nfill\n(\ncfn_result\n))\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \ncfn_params\n \n=\n \njson\n.\ndumps\n(\nresult\n[\n'Parameters'\n],\n \nindent\n=\n11\n,\n \nseparators\n=\n(\n','\n,\n \n': '\n))\n\n                    \nprint\n(\nD\n \n+\n \n\"Parameters:\"\n)\n\n                    \nprint\n(\ncfn_params\n)\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\nF\n \n+\n \n\"Cannot validate \n%s\n\"\n \n%\n \nself\n.\nget_template_file\n())\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n        \nreturn\n \nTrue\n\n\n    \ndef\n \ngenpassword\n(\nself\n,\n \npass_length\n,\n \npass_type\n):\n\n        \n\"\"\"\n\n\n        Returns a password of given length and type.\n\n\n\n        :param pass_length: Length of the desired password\n\n\n        :param pass_type: Type of the desired password - String only OR Alphanumeric\n\n\n            * A = AlphaNumeric, Example 'vGceIP8EHC'\n\n\n        :return: Password of given length and type\n\n\n        \"\"\"\n\n        \nif\n \nself\n.\nverbose\n:\n\n            \nprint\n(\nD\n \n+\n \n\"Auto generating password\"\n)\n\n            \nprint\n(\nD\n \n+\n \n\"Pass size => {0}\"\n.\nformat\n(\npass_length\n))\n\n\n        \npassword\n \n=\n \n[]\n\n        \nnumbers\n \n=\n \n\"1234567890\"\n\n        \nlowercase\n \n=\n \n\"abcdefghijklmnopqrstuvwxyz\"\n\n        \nuppercase\n \n=\n \n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n        \nspecialchars\n \n=\n \n\"!#$&{*:[=,]-_%@+\"\n\n\n        \n# Generates password string with:\n\n        \n# lowercase,uppercase and numeric chars\n\n        \nif\n \npass_type\n \n==\n \n'A'\n:\n\n            \nprint\n(\nD\n \n+\n \n\"Pass type => {0}\"\n.\nformat\n(\n'alpha-numeric'\n))\n\n\n            \nwhile\n \nlen\n(\npassword\n)\n \n<\n \npass_length\n:\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nlowercase\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nuppercase\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nnumbers\n))\n\n\n        \n# Generates password string with:\n\n        \n# lowercase,uppercase, numbers and special chars\n\n        \nelif\n \npass_type\n \n==\n \n'S'\n:\n\n            \nprint\n(\nD\n \n+\n \n\"Pass type => ('specialchars')\"\n)\n\n            \nwhile\n \nlen\n(\npassword\n)\n \n<\n \npass_length\n:\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nlowercase\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nuppercase\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nnumbers\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nspecialchars\n))\n\n        \nelse\n:\n\n            \n# If no passtype is defined (None)\n\n            \n# Defaults to alpha-numeric\n\n            \n# Generates password string with:\n\n            \n# lowercase,uppercase, numbers and special chars\n\n            \nprint\n(\nD\n \n+\n \n\"Pass type => default ('alpha-numeric')\"\n)\n\n            \nwhile\n \nlen\n(\npassword\n)\n \n<\n \npass_length\n:\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nlowercase\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nuppercase\n))\n\n                \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nnumbers\n))\n\n\n        \nreturn\n \n''\n.\njoin\n(\npassword\n)\n\n\n    \ndef\n \nstackcreate\n(\nself\n,\n \ntaskcat_cfg\n,\n \ntest_list\n,\n \nsprefix\n):\n\n        \n\"\"\"\n\n\n        This function creates CloudFormation stack for the given tests.\n\n\n\n        :param taskcat_cfg: TaskCat config as yaml object\n\n\n        :param test_list: List of tests\n\n\n        :param sprefix: Special prefix as string. Purpose of this param is to use it for tagging\n\n\n            the stack.\n\n\n\n        :return: List of TestData objects\n\n\n\n        \"\"\"\n\n        \ntestdata_list\n \n=\n \n[]\n\n        \nself\n.\nset_capabilities\n(\n'CAPABILITY_IAM'\n)\n\n        \nfor\n \ntest\n \nin\n \ntest_list\n:\n\n            \ntestdata\n \n=\n \nTestData\n()\n\n            \ntestdata\n.\nset_test_name\n(\ntest\n)\n\n            \nprint\n(\n\"{0}{1}|PREPARING TO LAUNCH => {2}{3}\"\n.\nformat\n(\nI\n,\n \nheader\n,\n \ntest\n,\n \nrst_color\n))\n\n            \nsname\n \n=\n \nstr\n(\nsig\n)\n\n            \nstackname\n \n=\n \nsname\n \n+\n \n'-'\n \n+\n \nsprefix\n \n+\n \n'-'\n \n+\n \ntest\n \n+\n \n'-'\n \n+\n \njobid\n[:\n4\n]\n\n            \nself\n.\ndefine_tests\n(\ntaskcat_cfg\n,\n \ntest\n)\n\n            \nfor\n \nregion\n \nin\n \nself\n.\nget_test_region\n():\n\n                \nprint\n(\nI\n \n+\n \n\"Preparing to launch in region [\n%s\n] \"\n \n%\n \nregion\n)\n\n                \ntry\n:\n\n                    \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n                    \ns_parmsdata\n \n=\n \nrequests\n.\nget\n(\nself\n.\nget_parameter_path\n())\n.\ntext\n\n                    \ns_parms\n \n=\n \njson\n.\nloads\n(\ns_parmsdata\n)\n\n                    \n# gentype = None\n\n\n                    \n# Auto-generated stack inputs\n\n\n                    \n# (Passwords)\n\n                    \n# Value that matches the following pattern will be replaced\n\n                    \n# - Parameters must start with $[\n\n                    \n# - Parameters must end with ]\n\n                    \n# - genpass in invoked when _genpass_X is found\n\n                    \n# - X is lengeth of the string\n\n                    \n# Example: $[taskcat_genpass_8]\n\n                    \n# Optionally - you can specify the type of password by adding\n\n                    \n# - A aplha-numeric passwords\n\n                    \n# - S passwords with special characters\n\n                    \n# Example: $[taskcat_genpass_8A]\n\n                    \n# Generates: tI8zN3iX8\n\n                    \n# or\n\n                    \n# Example: $[taskcat_genpass_8S]\n\n                    \n# Generates: mA5@cB5!\n\n\n                    \n# (Availablity Zones)\n\n                    \n# Value that matches the following pattern will be replaced\n\n                    \n# - Parameters must start with $[\n\n                    \n# - Parameters must end with ]\n\n                    \n# - genaz in invoked when _genaz_X is found\n\n                    \n# - A number of AZ's will be selected from the region\n\n                    \n#   the stack is attempting to launch\n\n                    \n# Example: $[taskcat_genaz_2] (if the region is us-east-2)\n\n                    \n# Generates: us-east-1a, us-east-2b\n\n\n                    \nfor\n \nparmdict\n \nin\n \ns_parms\n:\n\n                        \nfor\n \n_\n \nin\n \nparmdict\n:\n\n\n                            \nparam_value\n \n=\n \nparmdict\n[\n'ParameterValue'\n]\n\n                            \n# Determines the size of the password to generate\n\n                            \ncount_re\n \n=\n \nre\n.\ncompile\n(\n'(?!\\w+_genpass_)\\d{1,2}'\n)\n\n\n                            \n# Determines the type of password to generate\n\n                            \ngentype_re\n \n=\n \nre\n.\ncompile\n(\n\n                                \n'(?!\\w+_genpass_\\d{1,2}])([AS])'\n)\n\n\n                            \n# Determines if _genpass has been requested\n\n                            \ngenpass_re\n \n=\n \nre\n.\ncompile\n(\n\n                                \n'\\$\\[\\w+_genpass?(\\w)_\\d{1,2}\\w?]$'\n)\n\n\n                            \n# Determines if _genaz has been requested\n\n                            \ngenaz_re\n \n=\n \nre\n.\ncompile\n(\n'\\$\\[\\w+_genaz_\\d]'\n)\n\n\n                            \n# Determines if s3 replacement was requested\n\n                            \ngets3replace\n \n=\n \nre\n.\ncompile\n(\n'\\$\\[\\w+_url_.+]$'\n)\n\n                            \ngeturl_re\n \n=\n \nre\n.\ncompile\n(\n'(?<=._url_)(.+)(?=]$)'\n)\n\n\n                            \nif\n \ngets3replace\n.\nsearch\n(\nparam_value\n):\n\n                                \nurl\n \n=\n \nself\n.\nregxfind\n(\ngeturl_re\n,\n \nparam_value\n)\n\n                                \nparam_value\n \n=\n \nself\n.\nget_s3contents\n(\nurl\n)\n\n                                \nif\n \nself\n.\nverbose\n:\n\n                                    \nprint\n(\n\"Raw content of url {}\"\n.\nformat\n(\nurl\n))\n\n                                    \nprint\n(\nparam_value\n)\n\n                                \nparmdict\n[\n'ParameterValue'\n]\n \n=\n \nparam_value\n\n\n                            \n# Autogenerated value to password input in runtime\n\n                            \nif\n \ngenpass_re\n.\nsearch\n(\nparam_value\n):\n\n                                \npasslen\n \n=\n \nint\n(\n\n                                    \nself\n.\nregxfind\n(\ncount_re\n,\n \nparam_value\n))\n\n                                \ngentype\n \n=\n \nself\n.\nregxfind\n(\n\n                                    \ngentype_re\n,\n \nparam_value\n)\n\n                                \nif\n \nnot\n \ngentype\n:\n\n                                    \n# Set default password type\n\n                                    \n# A vaule of D will generate a simple alpha\n\n                                    \n# aumeric password\n\n                                    \ngentype\n \n=\n \n'D'\n\n\n                                \nif\n \npasslen\n:\n\n                                    \nif\n \nself\n.\nverbose\n:\n\n                                        \nprint\n(\n\"{}AutoGen values for {}\"\n.\nformat\n(\nD\n,\n \nparam_value\n))\n\n                                    \nparam_value\n \n=\n \nself\n.\ngenpassword\n(\n\n                                        \npasslen\n,\n \ngentype\n)\n\n                                    \nparmdict\n[\n'ParameterValue'\n]\n \n=\n \nparam_value\n\n\n                            \nif\n \ngenaz_re\n.\nsearch\n(\nparam_value\n):\n\n                                \nnumazs\n \n=\n \nint\n(\n\n                                    \nself\n.\nregxfind\n(\ncount_re\n,\n \nparam_value\n))\n\n                                \nif\n \nnumazs\n:\n\n                                    \nif\n \nself\n.\nverbose\n:\n\n                                        \nprint\n(\nD\n \n+\n \n\"Selecting availability zones\"\n)\n\n                                        \nprint\n(\nD\n \n+\n \n\"Requested \n%s\n az's\"\n \n%\n \nnumazs\n)\n\n\n                                    \nparam_value\n \n=\n \nself\n.\nget_available_azs\n(\n\n                                        \nregion\n,\n\n                                        \nnumazs\n)\n\n                                    \nparmdict\n[\n'ParameterValue'\n]\n \n=\n \nparam_value\n\n                                \nelse\n:\n\n                                    \nprint\n(\nI\n \n+\n \n\"$[taskcat_genaz_(!)]\"\n)\n\n                                    \nprint\n(\nI\n \n+\n \n\"Number of az's not specified!\"\n)\n\n                                    \nprint\n(\nI\n \n+\n \n\" - (Defaulting to 1 az)\"\n)\n\n                                    \nparam_value\n \n=\n \nself\n.\nget_available_azs\n(\n\n                                        \nregion\n,\n\n                                        \n1\n)\n\n                                    \nparmdict\n[\n'ParameterValue'\n]\n \n=\n \nparam_value\n\n                    \nif\n \nself\n.\nverbose\n:\n\n                        \nprint\n(\nD\n \n+\n \n\"Creating Boto Connection region=\n%s\n\"\n \n%\n \nregion\n)\n\n                        \nprint\n(\nD\n \n+\n \n\"StackName=\"\n \n+\n \nstackname\n)\n\n                        \nprint\n(\nD\n \n+\n \n\"DisableRollback=True\"\n)\n\n                        \nprint\n(\nD\n \n+\n \n\"TemplateURL=\n%s\n\"\n \n%\n \nself\n.\nget_template_path\n())\n\n                        \nprint\n(\nD\n \n+\n \n\"Capabilities=\n%s\n\"\n \n%\n \nself\n.\nget_capabilities\n())\n\n                        \nprint\n(\nD\n \n+\n \n\"Parameters:\"\n)\n\n                        \nprint\n(\njson\n.\ndumps\n(\ns_parms\n,\n \nsort_keys\n=\nTrue\n,\n \nindent\n=\n11\n,\n \nseparators\n=\n(\n','\n,\n \n': '\n)))\n\n\n                    \nstackdata\n \n=\n \ncfn\n.\ncreate_stack\n(\n\n                        \nStackName\n=\nstackname\n,\n\n                        \nDisableRollback\n=\nTrue\n,\n\n                        \nTemplateURL\n=\nself\n.\nget_template_path\n(),\n\n                        \nParameters\n=\ns_parms\n,\n\n                        \nCapabilities\n=\nself\n.\nget_capabilities\n())\n\n\n                    \ntestdata\n.\nadd_test_stack\n(\nstackdata\n)\n\n\n                \nexcept\n \nException\n \nas\n \ne\n:\n\n                    \nif\n \nself\n.\nverbose\n:\n\n                        \nprint\n(\nE\n \n+\n \nstr\n(\ne\n))\n\n                    \nsys\n.\nexit\n(\nF\n \n+\n \n\"Cannot launch \n%s\n\"\n \n%\n \nself\n.\nget_template_file\n())\n\n\n            \ntestdata_list\n.\nappend\n(\ntestdata\n)\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n        \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n            \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                \nprint\n(\n\"{} |{}LAUNCHING STACKS{}\"\n.\nformat\n(\nself\n.\nnametag\n,\n \nheader\n,\n \nrst_color\n))\n\n                \nprint\n(\n\"{} {}{} {} {}\"\n.\nformat\n(\n\n                    \nI\n,\n\n                    \nheader\n,\n\n                    \ntest\n.\nget_test_name\n(),\n\n                    \nstr\n(\nstack\n[\n'StackId'\n])\n.\nsplit\n(\n':stack'\n,\n \n1\n),\n\n                    \nrst_color\n))\n\n        \nreturn\n \ntestdata_list\n\n\n    \ndef\n \nvalidate_json\n(\nself\n,\n \njsonin\n):\n\n        \n\"\"\"\n\n\n        This function validates the given JSON.\n\n\n\n        :param jsonin: Json object to be validated\n\n\n\n        :return: TRUE if given Json is valid, FALSE otherwise.\n\n\n        \"\"\"\n\n        \ntry\n:\n\n            \nparms\n \n=\n \njson\n.\nloads\n(\njsonin\n)\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\njson\n.\ndumps\n(\nparms\n,\n \nindent\n=\n11\n,\n \nseparators\n=\n(\n','\n,\n \n': '\n)))\n\n        \nexcept\n \nValueError\n \nas\n \ne\n:\n\n            \nprint\n(\nE\n \n+\n \nstr\n(\ne\n))\n\n            \nreturn\n \nFalse\n\n        \nreturn\n \nTrue\n\n\n    \ndef\n \nvalidate_parameters\n(\nself\n,\n \ntaskcat_cfg\n,\n \ntest_list\n):\n\n        \n\"\"\"\n\n\n        This function validates the parameters file of the CloudFormation template.\n\n\n\n        :param taskcat_cfg: TaskCat config yaml object\n\n\n        :param test_list: List of tests\n\n\n\n        :return: TRUE if the parameters file is valid, else FALSE\n\n\n        \"\"\"\n\n        \nfor\n \ntest\n \nin\n \ntest_list\n:\n\n            \nself\n.\ndefine_tests\n(\ntaskcat_cfg\n,\n \ntest\n)\n\n            \nprint\n(\nself\n.\nnametag\n \n+\n \n\" |Validate JSON input in test[\n%s\n]\"\n \n%\n \ntest\n)\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \n\"parameter_path = \n%s\n\"\n \n%\n \nself\n.\nget_parameter_path\n())\n\n\n            \ninputparms\n \n=\n \nrequests\n.\nget\n(\nself\n.\nget_parameter_path\n())\n.\ntext\n\n            \njsonstatus\n \n=\n \nself\n.\nvalidate_json\n(\ninputparms\n)\n\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \n\"jsonstatus = \n%s\n\"\n \n%\n \njsonstatus\n)\n\n\n            \nif\n \njsonstatus\n:\n\n                \nprint\n(\nP\n \n+\n \n\"Validated [\n%s\n]\"\n \n%\n \nself\n.\nget_parameter_file\n())\n\n            \nelse\n:\n\n                \nprint\n(\nD\n \n+\n \n\"parameter_file = \n%s\n\"\n \n%\n \nself\n.\nget_parameter_file\n())\n\n                \nsys\n.\nexit\n(\nF\n \n+\n \n\"Cannot validate \n%s\n\"\n \n%\n \nself\n.\nget_parameter_file\n())\n\n        \nreturn\n \nTrue\n\n\n    \n@staticmethod\n\n    \ndef\n \nregxfind\n(\nre_object\n,\n \ndata_line\n):\n\n        \n\"\"\"\n\n\n        Returns the matching string.\n\n\n\n        :param re_object: Regex object\n\n\n        :param data_line: String to be searched\n\n\n\n        :return: Matching String if found, otherwise return 'Not-found'\n\n\n        \"\"\"\n\n        \nsg\n \n=\n \nre_object\n.\nsearch\n(\ndata_line\n)\n\n        \nif\n \nsg\n:\n\n            \nreturn\n \nstr\n(\nsg\n.\ngroup\n())\n\n        \nelse\n:\n\n            \nreturn\n \nstr\n(\n'Not-found'\n)\n\n\n    \ndef\n \nparse_stack_info\n(\nself\n,\n \nstack_name\n):\n\n        \n\"\"\"\n\n\n        Returns a dictionary object containing the region and stack name.\n\n\n\n        :param stack_name: Full stack name arn\n\n\n        :return: Dictionary object containing the region and stack name\n\n\n\n        \"\"\"\n\n        \nstack_info\n \n=\n \ndict\n()\n\n\n        \nregion_re\n \n=\n \nre\n.\ncompile\n(\n'(?<=:)(.\\w-.+(\\w*)-\\d)(?=:)'\n)\n\n        \nstack_name_re\n \n=\n \nre\n.\ncompile\n(\n'(?<=:stack/)(tCaT.*.)(?=/)'\n)\n\n        \nstack_info\n[\n'region'\n]\n \n=\n \nself\n.\nregxfind\n(\nregion_re\n,\n \nstack_name\n)\n\n        \nstack_info\n[\n'stack_name'\n]\n \n=\n \nself\n.\nregxfind\n(\nstack_name_re\n,\n \nstack_name\n)\n\n        \nreturn\n \nstack_info\n\n\n    \ndef\n \nstackcheck\n(\nself\n,\n \nstack_id\n):\n\n        \n\"\"\"\n\n\n        Given the stack id, this function returns the status of the stack as\n\n\n        a list with stack name, region, and status as list items, in the respective\n\n\n        order.\n\n\n\n        :param stack_id: CloudFormation stack id\n\n\n\n        :return: List containing the stack name, region and stack status in the\n\n\n            respective order.\n\n\n        \"\"\"\n\n        \nstackdata\n \n=\n \nself\n.\nparse_stack_info\n(\nstack_id\n)\n\n        \nregion\n \n=\n \nstackdata\n[\n'region'\n]\n\n        \nstack_name\n \n=\n \nstackdata\n[\n'stack_name'\n]\n\n        \ntest_info\n \n=\n \n[]\n\n\n        \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n        \n# noinspection PyBroadException\n\n        \ntry\n:\n\n            \ntest_query\n \n=\n \n(\ncfn\n.\ndescribe_stacks\n(\nStackName\n=\nstack_name\n))\n\n            \nfor\n \nresult\n \nin\n \ntest_query\n[\n'Stacks'\n]:\n\n                \ntest_info\n.\nappend\n(\nstack_name\n)\n\n                \ntest_info\n.\nappend\n(\nregion\n)\n\n                \ntest_info\n.\nappend\n(\nresult\n.\nget\n(\n'StackStatus'\n))\n\n                \nif\n \nresult\n.\nget\n(\n\n                        \n'StackStatus'\n)\n \n==\n \n'CREATE_IN_PROGRESS'\n \nor\n \nresult\n.\nget\n(\n'StackStatus'\n)\n \n==\n \n'DELETE_IN_PROGRESS'\n:\n\n                    \ntest_info\n.\nappend\n(\n1\n)\n\n                \nelse\n:\n\n                    \ntest_info\n.\nappend\n(\n0\n)\n\n        \nexcept\n \nException\n:\n\n            \ntest_info\n.\nappend\n(\nstack_name\n)\n\n            \ntest_info\n.\nappend\n(\nregion\n)\n\n            \ntest_info\n.\nappend\n(\n\"STACK_DELETED\"\n)\n\n            \ntest_info\n.\nappend\n(\n0\n)\n\n        \nreturn\n \ntest_info\n\n\n    \ndef\n \nget_stackstatus\n(\nself\n,\n \ntestdata_list\n,\n \nspeed\n):\n\n        \n\"\"\"\n\n\n        Given a list of TestData objects, this function checks the stack status\n\n\n        of each CloudFormation stack and updates the corresponding TestData object\n\n\n        with the status.\n\n\n\n        :param testdata_list: List of TestData object\n\n\n        :param speed: Interval (in seconds) in which the status has to be checked in loop\n\n\n\n        \"\"\"\n\n        \nactive_tests\n \n=\n \n1\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n        \nwhile\n \nactive_tests\n \n>\n \n0\n:\n\n            \ncurrent_active_tests\n \n=\n \n0\n\n            \nprint\n(\nI\n \n+\n \n\"{}{} {} [{}]{}\"\n.\nformat\n(\n\n                \nheader\n,\n\n                \n'AWS REGION'\n.\nljust\n(\n15\n),\n\n                \n'CLOUDFORMATION STACK STATUS'\n.\nljust\n(\n25\n),\n\n                \n'CLOUDFORMATION STACK NAME'\n,\n\n                \nrst_color\n))\n\n\n            \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n                \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                    \nstackquery\n \n=\n \nself\n.\nstackcheck\n(\nstr\n(\nstack\n[\n'StackId'\n]))\n\n                    \ncurrent_active_tests\n \n=\n \nstackquery\n[\n\n                                               \n3\n]\n \n+\n \ncurrent_active_tests\n\n                    \nprint\n(\nI\n \n+\n \n\"{3}{0} {1} [{2}]{4}\"\n.\nformat\n(\n\n                        \nstackquery\n[\n1\n]\n.\nljust\n(\n15\n),\n\n                        \nstackquery\n[\n2\n]\n.\nljust\n(\n25\n),\n\n                        \nstackquery\n[\n0\n],\n\n                        \nhightlight\n,\n\n                        \nrst_color\n))\n\n                    \nstack\n[\n'status'\n]\n \n=\n \nstackquery\n[\n2\n]\n\n                    \nactive_tests\n \n=\n \ncurrent_active_tests\n\n                    \ntime\n.\nsleep\n(\nspeed\n)\n\n            \nprint\n(\n'\n\\n\n'\n)\n\n\n    \ndef\n \ncleanup\n(\nself\n,\n \ntestdata_list\n,\n \nspeed\n):\n\n        \n\"\"\"\n\n\n        This function deletes the CloudFormation stacks of the given tests.\n\n\n\n        :param testdata_list: List of TestData objects\n\n\n        :param speed: Interval (in seconds) in which the status has to be checked\n\n\n            while deleting the stacks.\n\n\n\n        \"\"\"\n\n        \ndocleanup\n \n=\n \nself\n.\nget_docleanup\n()\n\n        \nif\n \nself\n.\nverbose\n:\n\n            \nprint\n(\nD\n \n+\n \n\"clean-up = \n%s\n \"\n \n%\n \nstr\n(\ndocleanup\n))\n\n\n        \nif\n \ndocleanup\n:\n\n            \nprint\n(\n\"{} |CLEANUP STACKS{}\"\n.\nformat\n(\nself\n.\nnametag\n,\n \nheader\n,\n \nrst_color\n))\n\n            \nself\n.\nstackdelete\n(\ntestdata_list\n)\n\n            \nself\n.\nget_stackstatus\n(\ntestdata_list\n,\n \nspeed\n)\n\n            \nself\n.\ndeep_cleanup\n(\ntestdata_list\n)\n\n        \nelse\n:\n\n            \nprint\n(\nI\n \n+\n \n\"[Retaining Stacks (Cleanup is set to {0}]\"\n.\nformat\n(\ndocleanup\n))\n\n\n    \ndef\n \ndeep_cleanup\n(\nself\n,\n \ntestdata_list\n):\n\n        \n\"\"\"\n\n\n        This function deletes the AWS resources which were not deleted\n\n\n        by deleting CloudFormation stacks.\n\n\n\n        :param testdata_list: List of TestData objects\n\n\n\n        \"\"\"\n\n        \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n            \nfailed_stack_ids\n \n=\n \n[]\n\n            \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                \nif\n \nstr\n(\nstack\n[\n'status'\n])\n \n==\n \n'DELETE_FAILED'\n:\n\n                    \nfailed_stack_ids\n.\nappend\n(\nstack\n[\n'StackId'\n])\n\n            \nif\n \nlen\n(\nfailed_stack_ids\n)\n \n==\n \n0\n:\n\n                \nprint\n(\nI\n \n+\n \n\"All stacks deleted successfully. Deep clean-up not required.\"\n)\n\n                \ncontinue\n\n\n            \nprint\n(\nI\n \n+\n \n\"Few stacks failed to delete. Collecting resources for deep clean-up.\"\n)\n\n            \n# get test region from the stack id\n\n            \nstackdata\n \n=\n \nself\n.\nparse_stack_info\n(\n\n                \nstr\n(\nfailed_stack_ids\n[\n0\n]))\n\n            \nregion\n \n=\n \nstackdata\n[\n'region'\n]\n\n            \nsession\n \n=\n \nboto3\n.\nsession\n.\nSession\n(\nregion_name\n=\nregion\n)\n\n            \ns\n \n=\n \nSweeper\n(\nsession\n)\n\n            \nfailed_stacks\n \n=\n \nself\n.\nget_all_resources\n(\nfailed_stack_ids\n,\n \nregion\n)\n\n            \n# print all resources which failed to delete\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \n\"Resources which failed to delete:\n\\n\n\"\n)\n\n                \nfor\n \nfailed_stack\n \nin\n \nfailed_stacks\n:\n\n                    \nprint\n(\nD\n \n+\n \n\"Stack Id: \"\n \n+\n \nfailed_stack\n[\n'stackId'\n])\n\n                    \nfor\n \nres\n \nin\n \nfailed_stack\n[\n'resources'\n]:\n\n                        \nprint\n(\nD\n \n+\n \n\"{0} = {1}, {2} = {3}, {4} = {5}\"\n.\nformat\n(\n\n                            \n'\n\\n\\t\\t\nLogicalId'\n,\n\n                            \nres\n.\nget\n(\n'logicalId'\n),\n\n                            \n'\n\\n\\t\\t\nPhysicalId'\n,\n\n                            \nres\n.\nget\n(\n'physicalId'\n),\n\n                            \n'\n\\n\\t\\t\nType'\n,\n\n                            \nres\n.\nget\n(\n'resourceType'\n)\n\n                        \n))\n\n                \ns\n.\ndelete_all\n(\nfailed_stacks\n)\n\n\n    \ndef\n \nstackdelete\n(\nself\n,\n \ntestdata_list\n):\n\n        \n\"\"\"\n\n\n        This function deletes the CloudFormation stacks of the given tests.\n\n\n\n        :param testdata_list: List of TestData objects\n\n\n\n        \"\"\"\n\n        \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n            \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                \nstackdata\n \n=\n \nself\n.\nparse_stack_info\n(\n\n                    \nstr\n(\nstack\n[\n'StackId'\n]))\n\n                \nregion\n \n=\n \nstackdata\n[\n'region'\n]\n\n                \nstack_name\n \n=\n \nstackdata\n[\n'stack_name'\n]\n\n                \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n                \ncfn\n.\ndelete_stack\n(\nStackName\n=\nstack_name\n)\n\n\n    \ndef\n \nif_stackexists\n(\nself\n,\n \nstackname\n,\n \nregion\n):\n\n        \n\"\"\"\n\n\n        This function checks if a stack exist with the given stack name.\n\n\n        Returns \"yes\" if exist, otherwise \"no\".\n\n\n\n        :param stackname: Stack name\n\n\n        :param region: AWS region\n\n\n\n        :return: \"yes\" if stack exist, otherwise \"no\"\n\n\n        \"\"\"\n\n        \nexists\n \n=\n \nNone\n\n        \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n        \ntry\n:\n\n            \ncfn\n.\ndescribe_stacks\n(\nStackName\n=\nstackname\n)\n\n            \nexists\n \n=\n \n\"yes\"\n\n        \nexcept\n \nException\n \nas\n \ne\n:\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nexists\n \n=\n \n\"no\"\n\n        \nprint\n(\nI\n \n+\n \n\"Successfully Deleted[\n%s\n]\"\n \n%\n \nstackname\n)\n\n        \nreturn\n \nexists\n\n\n    \ndef\n \ndefine_tests\n(\nself\n,\n \nyamlc\n,\n \ntest\n):\n\n        \n\"\"\"\n\n\n        This function reads the given test config yaml object and defines\n\n\n        the tests as per the given config object.\n\n\n\n        :param yamlc: TaskCat config yaml object\n\n\n        :param test: Test scenarios\n\n\n\n        \"\"\"\n\n        \nfor\n \ntdefs\n \nin\n \nyamlc\n[\n'tests'\n]\n.\nkeys\n():\n\n            \n# print(\"[DEBUG] tdefs = %s\" % tdefs)\n\n            \nif\n \ntdefs\n \n==\n \ntest\n:\n\n                \nt\n \n=\n \nyamlc\n[\n'tests'\n][\ntest\n][\n'template_file'\n]\n\n                \np\n \n=\n \nyamlc\n[\n'tests'\n][\ntest\n][\n'parameter_input'\n]\n\n                \nn\n \n=\n \nyamlc\n[\n'global'\n][\n'qsname'\n]\n\n                \nb\n \n=\n \nself\n.\nget_s3bucket\n()\n\n\n                \n# Checks if cleanup flag is set\n\n                \n# If cleanup is set to 'false' stack will not be deleted after\n\n                \n# launch attempt\n\n                \nif\n \n'cleanup'\n \nin\n \nyamlc\n[\n'global'\n]\n.\nkeys\n():\n\n                    \ncleanupstack\n \n=\n \nyamlc\n[\n'global'\n][\n'cleanup'\n]\n\n                    \nif\n \ncleanupstack\n:\n\n                        \nif\n \nself\n.\nverbose\n:\n\n                            \nprint\n(\nD\n \n+\n \n\"cleanup set to ymal value\"\n)\n\n                            \nself\n.\nset_docleanup\n(\ncleanupstack\n)\n\n                    \nelse\n:\n\n                        \nprint\n(\nI\n \n+\n \n\"Cleanup value set to (false)\"\n)\n\n                        \nself\n.\nset_docleanup\n(\nFalse\n)\n\n                \nelse\n:\n\n                    \n# By default do cleanup unless self.run_cleanup\n\n                    \n# was overwridden (set to False) by -n flag\n\n                    \nif\n \nnot\n \nself\n.\nrun_cleanup\n:\n\n                        \nif\n \nself\n.\nverbose\n:\n\n                            \nprint\n(\nD\n \n+\n \n\"cleanup set by cli flag {0}\"\n.\nformat\n(\nself\n.\nrun_cleanup\n))\n\n                    \nelse\n:\n\n                        \nself\n.\nset_docleanup\n(\nTrue\n)\n\n                        \nif\n \nself\n.\nverbose\n:\n\n                            \nprint\n(\nI\n \n+\n \n\"No cleanup value set\"\n)\n\n                            \nprint\n(\nI\n \n+\n \n\" - (Defaulting to cleanup)\"\n)\n\n\n                \n# Load test setting\n\n                \nself\n.\nset_s3bucket\n(\nb\n)\n\n                \nself\n.\nset_project\n(\nn\n)\n\n                \nself\n.\nset_template_file\n(\nt\n)\n\n                \nself\n.\nset_parameter_file\n(\np\n)\n\n                \nself\n.\nset_template_path\n(\n\n                    \nself\n.\nget_s3_url\n(\nself\n.\nget_template_file\n()))\n\n                \nself\n.\nset_parameter_path\n(\n\n                    \nself\n.\nget_s3_url\n(\nself\n.\nget_parameter_file\n()))\n\n\n                \n# Check to make sure template filenames are correct\n\n                \ntemplate_path\n \n=\n \nself\n.\nget_template_path\n()\n\n                \nif\n \nnot\n \ntemplate_path\n:\n\n                    \nprint\n(\n\"{0} Could not locate {1}\"\n.\nformat\n(\nE\n,\n \nself\n.\nget_template_file\n()))\n\n                    \nprint\n(\n\"{0} Check to make sure filename is correct?\"\n.\nformat\n(\nE\n,\n \nself\n.\nget_template_path\n()))\n\n                    \nquit\n()\n\n\n                \n# Check to make sure parameter filenames are correct\n\n                \nparameter_path\n \n=\n \nself\n.\nget_parameter_path\n()\n\n                \nif\n \nnot\n \nparameter_path\n:\n\n                    \nprint\n(\n\"{0} Could not locate {1}\"\n.\nformat\n(\nE\n,\n \nself\n.\nget_parameter_file\n()))\n\n                    \nprint\n(\n\"{0} Check to make sure filename is correct?\"\n.\nformat\n(\nE\n,\n \nself\n.\nget_parameter_file\n()))\n\n                    \nquit\n()\n\n\n                \nprint\n(\n'\n\\n\n'\n)\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nI\n \n+\n \n\"|Acquiring tests assets for .......[\n%s\n]\"\n \n%\n \ntest\n)\n\n                    \nprint\n(\nD\n \n+\n \n\"|S3 Bucket  => [\n%s\n]\"\n \n%\n \nself\n.\nget_s3bucket\n())\n\n                    \nprint\n(\nD\n \n+\n \n\"|Project    => [\n%s\n]\"\n \n%\n \nself\n.\nget_project\n())\n\n                    \nprint\n(\nD\n \n+\n \n\"|Template   => [\n%s\n]\"\n \n%\n \nself\n.\nget_template_path\n())\n\n                    \nprint\n(\nD\n \n+\n \n\"|Parameter  => [\n%s\n]\"\n \n%\n \nself\n.\nget_parameter_path\n())\n\n                \nif\n \n'regions'\n \nin\n \nyamlc\n[\n'tests'\n][\ntest\n]:\n\n                    \nif\n \nyamlc\n[\n'tests'\n][\ntest\n][\n'regions'\n]\n \nis\n \nnot\n \nNone\n:\n\n                        \nr\n \n=\n \nyamlc\n[\n'tests'\n][\ntest\n][\n'regions'\n]\n\n                        \nself\n.\nset_test_region\n(\nlist\n(\nr\n))\n\n                        \nif\n \nself\n.\nverbose\n:\n\n                            \nprint\n(\nD\n \n+\n \n\"|Defined Regions:\"\n)\n\n                            \nfor\n \nlist_o\n \nin\n \nself\n.\nget_test_region\n():\n\n                                \nprint\n(\n\"\n\\t\\t\\t\n - [\n%s\n]\"\n \n%\n \nlist_o\n)\n\n                \nelse\n:\n\n                    \nglobal_regions\n \n=\n \nself\n.\nget_global_region\n(\nyamlc\n)\n\n                    \nself\n.\nset_test_region\n(\nlist\n(\nglobal_regions\n))\n\n                    \nif\n \nself\n.\nverbose\n:\n\n                        \nprint\n(\nD\n \n+\n \n\"|Global Regions:\"\n)\n\n                        \nfor\n \nlist_o\n \nin\n \nself\n.\nget_test_region\n():\n\n                            \nprint\n(\n\"\n\\t\\t\\t\n - [\n%s\n]\"\n \n%\n \nlist_o\n)\n\n                \nprint\n(\nP\n \n+\n \n\"(Completed) acquisition of [\n%s\n]\"\n \n%\n \ntest\n)\n\n                \nprint\n(\n'\n\\n\n'\n)\n\n\n    \n# Set AWS Credentials\n\n    \ndef\n \naws_api_init\n(\nself\n,\n \nargs\n):\n\n        \n\"\"\"\n\n\n        This function reads the AWS credentials from various sources to ensure\n\n\n        that the client has right credentials defined to successfully run\n\n\n        TaskCat against an AWS account.\n\n\n\n        :param args: Command line arguments for AWS credentials. It could be\n\n\n            either profile name, access key and secret key or none.\n\n\n\n        \"\"\"\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n        \nif\n \nargs\n.\nboto_profile\n:\n\n            \nboto3\n.\nsetup_default_session\n(\nprofile_name\n=\nargs\n.\nboto_profile\n)\n\n            \ntry\n:\n\n                \nsts_client\n \n=\n \nboto3\n.\nclient\n(\n'sts'\n)\n\n                \naccount\n \n=\n \nsts_client\n.\nget_caller_identity\n()\n.\nget\n(\n'Account'\n)\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :AWS AccountNumber: \n\\t\n [\n%s\n]\"\n \n%\n \naccount\n)\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Authenticated via: \n\\t\n [boto-profile] \"\n)\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nprint\n(\nE\n \n+\n \n\"Credential Error - Please check you profile!\"\n)\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\n1\n)\n\n        \nelif\n \nargs\n.\naws_access_key\n \nand\n \nargs\n.\naws_secret_key\n:\n\n            \nboto3\n.\nsetup_default_session\n(\n\n                \naws_access_key_id\n=\nargs\n.\naws_access_key\n,\n\n                \naws_secret_access_key\n=\nargs\n.\naws_secret_key\n)\n\n            \ntry\n:\n\n                \nsts_client\n \n=\n \nboto3\n.\nclient\n(\n'sts'\n)\n\n                \naccount\n \n=\n \nsts_client\n.\nget_caller_identity\n()\n.\nget\n(\n'Account'\n)\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :AWS AccountNumber: \n\\t\n [\n%s\n]\"\n \n%\n \naccount\n)\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Authenticated via: \n\\t\n [role] \"\n)\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nprint\n(\nE\n \n+\n \n\"Credential Error - Please check you keys!\"\n)\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\n1\n)\n\n        \nelse\n:\n\n            \nboto3\n.\nsetup_default_session\n(\n\n                \naws_access_key_id\n=\nargs\n.\naws_access_key\n,\n\n                \naws_secret_access_key\n=\nargs\n.\naws_secret_key\n)\n\n            \ntry\n:\n\n                \nsts_client\n \n=\n \nboto3\n.\nclient\n(\n'sts'\n)\n\n                \naccount\n \n=\n \nsts_client\n.\nget_caller_identity\n()\n.\nget\n(\n'Account'\n)\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :AWS AccountNumber: \n\\t\n [\n%s\n]\"\n \n%\n \naccount\n)\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Authenticated via: \n\\t\n [role] \"\n)\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nprint\n(\nE\n \n+\n \n\"Credential Error - Cannot assume role!\"\n)\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\n1\n)\n\n\n    \ndef\n \nvalidate_yaml\n(\nself\n,\n \nyaml_file\n):\n\n        \n\"\"\"\n\n\n        This function validates the given yaml file.\n\n\n\n        :param yaml_file: Yaml file name\n\n\n\n        \"\"\"\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n        \nrun_tests\n \n=\n \n[]\n\n        \nrequired_global_keys\n \n=\n \n[\n\n            \n'qsname'\n,\n\n            \n'owner'\n,\n\n            \n'reporting'\n,\n\n            \n'regions'\n\n        \n]\n\n\n        \nrequired_test_parameters\n \n=\n \n[\n\n            \n'template_file'\n,\n\n            \n'parameter_input'\n\n        \n]\n\n        \ntry\n:\n\n            \nif\n \nos\n.\npath\n.\nisfile\n(\nyaml_file\n):\n\n                \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Reading Config form: {0}\"\n.\nformat\n(\nyaml_file\n))\n\n                \nwith\n \nopen\n(\nyaml_file\n,\n \n'r'\n)\n \nas\n \ncheckyaml\n:\n\n                    \ncfg_yml\n \n=\n \nyaml\n.\nload\n(\ncheckyaml\n.\nread\n())\n\n                    \nfor\n \nkey\n \nin\n \nrequired_global_keys\n:\n\n                        \nif\n \nkey\n \nin\n \ncfg_yml\n[\n'global'\n]\n.\nkeys\n():\n\n                            \npass\n\n                        \nelse\n:\n\n                            \nprint\n(\n\"global:\n%s\n missing from \"\n \n%\n \nkey\n \n+\n \nyaml_file\n)\n\n                            \nsys\n.\nexit\n(\n1\n)\n\n\n                    \nfor\n \ndefined\n \nin\n \ncfg_yml\n[\n'tests'\n]\n.\nkeys\n():\n\n                        \nrun_tests\n.\nappend\n(\ndefined\n)\n\n                        \nprint\n(\nself\n.\nnametag\n \n+\n \n\" |Queing test => \n%s\n \"\n \n%\n \ndefined\n)\n\n                        \nfor\n \nparms\n \nin\n \ncfg_yml\n[\n'tests'\n][\ndefined\n]\n.\nkeys\n():\n\n                            \nfor\n \nkey\n \nin\n \nrequired_test_parameters\n:\n\n                                \nif\n \nkey\n \nin\n \ncfg_yml\n[\n'tests'\n][\ndefined\n]\n.\nkeys\n():\n\n                                    \npass\n\n                                \nelse\n:\n\n                                    \nprint\n(\n\"No key \n%s\n in test\"\n \n%\n \nkey\n \n+\n \ndefined\n)\n\n                                    \nprint\n(\nE\n \n+\n \n\"While inspecting: \"\n \n+\n \nparms\n)\n\n                                    \nsys\n.\nexit\n(\n1\n)\n\n            \nelse\n:\n\n                \nprint\n(\nE\n \n+\n \n\"Cannot open [\n%s\n]\"\n \n%\n \nyaml_file\n)\n\n                \nsys\n.\nexit\n(\n1\n)\n\n        \nexcept\n \nException\n \nas\n \ne\n:\n\n            \nprint\n(\nE\n \n+\n \n\"config.yml [\n%s\n] is not formatted well!!\"\n \n%\n \nyaml_file\n)\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n            \nsys\n.\nexit\n(\n1\n)\n\n        \nreturn\n \nrun_tests\n\n\n    \ndef\n \ngenreport\n(\nself\n,\n \ntestdata_list\n,\n \ndashboard_filename\n):\n\n        \n\"\"\"\n\n\n        This function generates the test report.\n\n\n\n        :param testdata_list: List of TestData objects\n\n\n        :param dashboard_filename: Report file name\n\n\n\n        \"\"\"\n\n        \ndoc\n \n=\n \nyattag\n.\nDoc\n()\n\n\n        \n# Type of cfnlog return cfn log file\n\n        \n# Type of resource_log return resource log file\n\n        \ndef\n \ngetofile\n(\nregion\n,\n \nstack_name\n,\n \nresource_type\n):\n\n            \nextension\n \n=\n \n'.txt'\n\n            \nif\n \nresource_type\n \n==\n \n'cfnlog'\n:\n\n                \nlocation\n \n=\n \n\"{}-{}-{}{}\"\n.\nformat\n(\nstack_name\n,\n \nregion\n,\n \n'cfnlogs'\n,\n \nextension\n)\n\n                \nreturn\n \nstr\n(\nlocation\n)\n\n            \nelif\n \nresource_type\n \n==\n \n'resource_log'\n:\n\n                \nlocation\n \n=\n \n\"{}-{}-{}{}\"\n.\nformat\n(\nstack_name\n,\n \nregion\n,\n \n'resources'\n,\n \nextension\n)\n\n                \nreturn\n \nstr\n(\nlocation\n)\n\n\n        \ndef\n \nget_teststate\n(\nstackname\n,\n \nregion\n):\n\n            \n# Add try catch and return MANUALLY_DELETED\n\n            \n# Add css test-orange\n\n            \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n            \ntest_query\n \n=\n \ncfn\n.\ndescribe_stacks\n(\nStackName\n=\nstackname\n)\n\n            \nrstatus\n \n=\n \nNone\n\n            \nstatus_css\n \n=\n \nNone\n\n\n            \nfor\n \nresult\n \nin\n \ntest_query\n[\n'Stacks'\n]:\n\n                \nrstatus\n \n=\n \nresult\n.\nget\n(\n'StackStatus'\n)\n\n                \nif\n \nrstatus\n \n==\n \n'CREATE_COMPLETE'\n:\n\n                    \nstatus_css\n \n=\n \n'class=test-green'\n\n                \nelif\n \nrstatus\n \n==\n \n'CREATE_FAILED'\n:\n\n                    \nstatus_css\n \n=\n \n'class=test-red'\n\n                \nelse\n:\n\n                    \nstatus_css\n \n=\n \n'class=test-red'\n\n            \nreturn\n \nrstatus\n,\n \nstatus_css\n\n\n        \ntag\n \n=\n \ndoc\n.\ntag\n\n        \ntext\n \n=\n \ndoc\n.\ntext\n\n        \nlogo\n \n=\n \n'taskcat'\n\n        \nrepo_link\n \n=\n \n'https://github.com/aws-quickstart/taskcat'\n\n        \noutput_css\n \n=\n \n'https://taskcat.s3.amazonaws.com/assets/css/taskcat.css'\n\n        \ndoc_link\n \n=\n \n'http://taskcat.io'\n\n\n        \nwith\n \ntag\n(\n'html'\n):\n\n            \nwith\n \ntag\n(\n'head'\n):\n\n                \ndoc\n.\nstag\n(\n'meta'\n,\n \ncharset\n=\n'utf-8'\n)\n\n                \ndoc\n.\nstag\n(\n\n                    \n'meta'\n,\n \nname\n=\n\"viewport\"\n,\n \ncontent\n=\n\"width=device-width\"\n)\n\n                \ndoc\n.\nstag\n(\n'link'\n,\n \nrel\n=\n'stylesheet'\n,\n\n                         \nhref\n=\noutput_css\n)\n\n                \nwith\n \ntag\n(\n'title'\n):\n\n                    \ntext\n(\n'TaskCat Report'\n)\n\n\n            \nwith\n \ntag\n(\n'body'\n):\n\n                \ntested_on\n \n=\n \ntime\n.\nstrftime\n(\n'%A - %b,\n%d\n,%Y @ %H:%M:%S'\n)\n\n\n                \nwith\n \ntag\n(\n'table'\n,\n \n'class=header-table-fill'\n):\n\n                    \nwith\n \ntag\n(\n'tbody'\n):\n\n                        \nwith\n \ntag\n(\n'th'\n,\n \n'colspan=2'\n):\n\n                            \nwith\n \ntag\n(\n'tr'\n):\n\n                                \nwith\n \ntag\n(\n'td'\n):\n\n                                    \nwith\n \ntag\n(\n'a'\n,\n \nhref\n=\nrepo_link\n):\n\n                                        \ntext\n(\n'GitHub Repo: '\n)\n\n                                        \ntext\n(\nrepo_link\n)\n\n                                        \ndoc\n.\nstag\n(\n'br'\n)\n\n                                    \nwith\n \ntag\n(\n'a'\n,\n \nhref\n=\ndoc_link\n):\n\n                                        \ntext\n(\n'Documentation: '\n)\n\n                                        \ntext\n(\ndoc_link\n)\n\n                                        \ndoc\n.\nstag\n(\n'br'\n)\n\n                                    \ntext\n(\n'Tested on: '\n)\n\n                                    \ntext\n(\ntested_on\n)\n\n                                \nwith\n \ntag\n(\n'td'\n,\n \n'class=taskcat-logo'\n):\n\n                                    \nwith\n \ntag\n(\n'h3'\n):\n\n                                        \ntext\n(\nlogo\n)\n\n            \ndoc\n.\nstag\n(\n'p'\n)\n\n            \nwith\n \ntag\n(\n'table'\n,\n \n'class=table-fill'\n):\n\n                \nwith\n \ntag\n(\n'tbody'\n):\n\n                    \nwith\n \ntag\n(\n'thread'\n):\n\n                        \nwith\n \ntag\n(\n'tr'\n):\n\n                            \nwith\n \ntag\n(\n'th'\n,\n\n                                     \n'class=text-center'\n,\n\n                                     \n'width=25%'\n):\n\n                                \ntext\n(\n'Test Name'\n)\n\n                            \nwith\n \ntag\n(\n'th'\n,\n\n                                     \n'class=text-left'\n,\n\n                                     \n'width=10%'\n):\n\n                                \ntext\n(\n'Tested Region'\n)\n\n                            \nwith\n \ntag\n(\n'th'\n,\n\n                                     \n'class=text-left'\n,\n\n                                     \n'width=30%'\n):\n\n                                \ntext\n(\n'Stack Name'\n)\n\n                            \nwith\n \ntag\n(\n'th'\n,\n\n                                     \n'class=text-left'\n,\n\n                                     \n'width=20%'\n):\n\n                                \ntext\n(\n'Tested Results'\n)\n\n                            \nwith\n \ntag\n(\n'th'\n,\n\n                                     \n'class=text-left'\n,\n\n                                     \n'width=15%'\n):\n\n                                \ntext\n(\n'Test Logs'\n)\n\n\n                            \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n                                \nwith\n \ntag\n(\n'tr'\n,\n \n'class= test-footer'\n):\n\n                                    \nwith\n \ntag\n(\n'td'\n,\n \n'colspan=5'\n):\n\n                                        \ntext\n(\n''\n)\n\n\n                                \ntestname\n \n=\n \ntest\n.\nget_test_name\n()\n\n                                \nprint\n(\nI\n \n+\n \n\"(Generating Reports)\"\n)\n\n                                \nprint\n(\nI\n \n+\n \n\" - Processing {}\"\n.\nformat\n(\ntestname\n))\n\n                                \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                                    \nstate\n \n=\n \nself\n.\nparse_stack_info\n(\n\n                                        \nstr\n(\nstack\n[\n'StackId'\n]))\n\n                                    \nstatus\n,\n \ncss\n \n=\n \nget_teststate\n(\n\n                                        \nstate\n[\n'stack_name'\n],\n\n                                        \nstate\n[\n'region'\n])\n\n\n                                    \nwith\n \ntag\n(\n'tr'\n):\n\n                                        \nwith\n \ntag\n(\n'td'\n,\n\n                                                 \n'class=test-info'\n):\n\n                                            \nwith\n \ntag\n(\n'h3'\n):\n\n                                                \ntext\n(\ntestname\n)\n\n                                        \nwith\n \ntag\n(\n'td'\n,\n\n                                                 \n'class=text-left'\n):\n\n                                            \ntext\n(\nstate\n[\n'region'\n])\n\n                                        \nwith\n \ntag\n(\n'td'\n,\n\n                                                 \n'class=text-left'\n):\n\n                                            \ntext\n(\nstate\n[\n'stack_name'\n])\n\n                                        \nwith\n \ntag\n(\n'td'\n,\n \ncss\n):\n\n                                            \ntext\n(\nstr\n(\nstatus\n))\n\n                                        \nwith\n \ntag\n(\n'td'\n,\n\n                                                 \n'class=text-left'\n):\n\n                                            \nclog\n \n=\n \ngetofile\n(\n\n                                                \nstate\n[\n'region'\n],\n\n                                                \nstate\n[\n'stack_name'\n],\n\n                                                \n'cfnlog'\n)\n\n                                            \n# rlog = getofile(\n\n                                            \n#    state['region'],\n\n                                            \n#    state['stack_name'],\n\n                                            \n#    'resource_log')\n\n                                            \n#\n\n                                            \nwith\n \ntag\n(\n'a'\n,\n \nhref\n=\nclog\n):\n\n                                                \ntext\n(\n'View Logs '\n)\n\n                                                \n# with tag('a', href=rlog):\n\n                                                \n#    text('Resource Logs ')\n\n                            \nwith\n \ntag\n(\n'tr'\n,\n \n'class= test-footer'\n):\n\n                                \nwith\n \ntag\n(\n'td'\n,\n \n'colspan=5'\n):\n\n                                    \nvtag\n \n=\n \n'Generated by {} {}'\n.\nformat\n(\n'taskcat'\n,\n \nversion\n)\n\n                                    \ntext\n(\nvtag\n)\n\n\n                        \ndoc\n.\nstag\n(\n'p'\n)\n\n                        \nprint\n(\n'\n\\n\n'\n)\n\n\n        \nhtmloutput\n \n=\n \nyattag\n.\nindent\n(\ndoc\n.\ngetvalue\n(),\n\n                                   \nindentation\n=\n'    '\n,\n\n                                   \nnewline\n=\n'\n\\r\\n\n'\n,\n\n                                   \nindent_text\n=\nTrue\n)\n\n\n        \nfile\n \n=\n \nopen\n(\ndashboard_filename\n,\n \n'w'\n)\n\n        \nfile\n.\nwrite\n(\nhtmloutput\n)\n\n        \nfile\n.\nclose\n()\n\n\n        \nreturn\n \nhtmloutput\n\n\n    \ndef\n \ncollect_resources\n(\nself\n,\n \ntestdata_list\n,\n \nlogpath\n):\n\n        \n\"\"\"\n\n\n        This function collects the AWS resources information created by the\n\n\n        CloudFormation stack for generating the report.\n\n\n\n        :param testdata_list: List of TestData object\n\n\n        :param logpath: Log file path\n\n\n\n        \"\"\"\n\n        \nresource\n \n=\n \n{}\n\n        \nprint\n(\nI\n \n+\n \n\"(Collecting Resources)\"\n)\n\n        \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n            \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                \nstackinfo\n \n=\n \nself\n.\nparse_stack_info\n(\nstr\n(\nstack\n[\n'StackId'\n]))\n\n                \n# Get stack resources\n\n                \nresource\n[\nstackinfo\n[\n'region'\n]]\n \n=\n \n(\n\n                    \nself\n.\nget_resources\n(\n\n                        \nstr\n(\nstackinfo\n[\n'stack_name'\n]),\n\n                        \nstr\n(\nstackinfo\n[\n'region'\n])\n\n                    \n)\n\n                \n)\n\n                \nextension\n \n=\n \n'.txt'\n\n                \ntest_logpath\n \n=\n \n'{}/{}-{}-{}{}'\n.\nformat\n(\n\n                    \nlogpath\n,\n\n                    \nstackinfo\n[\n'stack_name'\n],\n\n                    \nstackinfo\n[\n'region'\n],\n\n                    \n'resources'\n,\n\n                    \nextension\n)\n\n\n                \n# Write resource logs\n\n                \nfile\n \n=\n \nopen\n(\ntest_logpath\n,\n \n'w'\n)\n\n                \nfile\n.\nwrite\n(\nstr\n(\n\n                    \njson\n.\ndumps\n(\n\n                        \nresource\n,\n\n                        \nindent\n=\n4\n,\n\n                        \nseparators\n=\n(\n','\n,\n \n': '\n))))\n\n                \nfile\n.\nclose\n()\n\n\n    \n@staticmethod\n\n    \ndef\n \nget_cfnlogs\n(\nstackname\n,\n \nregion\n):\n\n        \n\"\"\"\n\n\n        This function returns the event logs of the given stack in a specific format.\n\n\n        :param stackname: Name of the stack\n\n\n        :param region: Region stack belongs to\n\n\n        :return: Event logs of the stack\n\n\n        \"\"\"\n\n\n        \nprint\n(\nI\n \n+\n \n\"Collecting logs for \"\n \n+\n \nstackname\n \n+\n \n\"\n\\\"\\n\n\"\n)\n\n        \n# Collect stack_events\n\n        \nstack_events\n \n=\n \nget_cfn_stack_events\n(\nstackname\n,\n \nregion\n)\n\n        \n# Uncomment line for debug\n\n        \n# pprint.pprint (stack_events)\n\n        \nevents\n \n=\n \n[]\n\n        \nfor\n \nevent\n \nin\n \nstack_events\n:\n\n            \nevent_details\n \n=\n \n{\n'TimeStamp'\n:\n \nevent\n[\n'Timestamp'\n],\n\n                             \n'ResourceStatus'\n:\n \nevent\n[\n'ResourceStatus'\n],\n\n                             \n'ResourceType'\n:\n \nevent\n[\n'ResourceType'\n],\n\n                             \n'LogicalResourceId'\n:\n \nevent\n[\n'LogicalResourceId'\n]}\n\n            \nif\n \n'ResourceStatusReason'\n \nin\n \nevent\n:\n\n                \nevent_details\n[\n'ResourceStatusReason'\n]\n \n=\n \nevent\n[\n'ResourceStatusReason'\n]\n\n            \nelse\n:\n\n                \nevent_details\n[\n'ResourceStatusReason'\n]\n \n=\n \n''\n\n\n            \nevents\n.\nappend\n(\nevent_details\n)\n\n\n        \nreturn\n \nevents\n\n\n    \ndef\n \ncreatecfnlogs\n(\nself\n,\n \ntestdata_list\n,\n \nlogpath\n):\n\n        \n\"\"\"\n\n\n        This function creates the CloudFormation log files.\n\n\n\n        :param testdata_list: List of TestData objects\n\n\n        :param logpath: Log file path\n\n\n        :return:\n\n\n        \"\"\"\n\n        \nprint\n(\nI\n \n+\n \n\"(Collecting CloudFormation Logs)\"\n)\n\n        \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n            \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                \nstackinfo\n \n=\n \nself\n.\nparse_stack_info\n(\nstr\n(\nstack\n[\n'StackId'\n]))\n\n                \nstackname\n \n=\n \nstr\n(\nstackinfo\n[\n'stack_name'\n])\n\n                \nregion\n \n=\n \nstr\n(\nstackinfo\n[\n'region'\n])\n\n                \nextension\n \n=\n \n'.txt'\n\n                \ntest_logpath\n \n=\n \n'{}/{}-{}-{}{}'\n.\nformat\n(\n\n                    \nlogpath\n,\n\n                    \nstackname\n,\n\n                    \nregion\n,\n\n                    \n'cfnlogs'\n,\n\n                    \nextension\n)\n\n                \nself\n.\nwrite_logs\n(\nstr\n(\nstack\n[\n'StackId'\n]),\n \ntest_logpath\n)\n\n\n    \ndef\n \nwrite_logs\n(\nself\n,\n \nstack_id\n,\n \nlogpath\n):\n\n        \n\"\"\"\n\n\n        This function writes the event logs of the given stack and all the child stacks to a given file.\n\n\n        :param stack_id: Stack Id\n\n\n        :param logpath: Log file path\n\n\n        :return: \n\n\n        \"\"\"\n\n        \nstackinfo\n \n=\n \nself\n.\nparse_stack_info\n(\nstr\n(\nstack_id\n))\n\n        \nstackname\n \n=\n \nstr\n(\nstackinfo\n[\n'stack_name'\n])\n\n        \nregion\n \n=\n \nstr\n(\nstackinfo\n[\n'region'\n])\n\n\n        \n# Get stack resources\n\n        \ncfnlogs\n \n=\n \nself\n.\nget_cfnlogs\n(\nstackname\n,\n \nregion\n)\n\n\n        \nif\n \ncfnlogs\n[\n0\n][\n'ResourceStatus'\n]\n \n!=\n \n'CREATE_COMPLETE'\n:\n\n            \nif\n \n'ResourceStatusReason'\n \nin\n \ncfnlogs\n[\n0\n]:\n\n                \nreason\n \n=\n \ncfnlogs\n[\n0\n][\n'ResourceStatusReason'\n]\n\n            \nelse\n:\n\n                \nreason\n \n=\n \n'Unknown'\n\n        \nelse\n:\n\n            \nreason\n \n=\n \n\"Stack launch was successful\"\n\n\n        \nprint\n(\n\"\n\\t\n |StackName: \"\n \n+\n \nstackname\n)\n\n        \nprint\n(\n\"\n\\t\n |Region: \"\n \n+\n \nregion\n)\n\n        \nprint\n(\n\"\n\\t\n |Logging to: \"\n \n+\n \nlogpath\n)\n\n        \nprint\n(\n\"\n\\t\n |Tested on: \"\n \n+\n \nstr\n(\ndatetime\n.\ndatetime\n.\nnow\n()\n.\nstrftime\n(\n\"%A, \n%d\n. %B %Y %I:%M%p\"\n)))\n\n        \nprint\n(\n\"------------------------------------------------------------------------------------------\"\n)\n\n        \nprint\n(\n\"ResourceStatusReason: \"\n)\n\n        \nprint\n(\ntextwrap\n.\nfill\n(\nstr\n(\nreason\n),\n \n85\n))\n\n        \nprint\n(\n\"==========================================================================================\"\n)\n\n        \nwith\n \nopen\n(\nlogpath\n,\n \n\"a\"\n)\n \nas\n \nlog_output\n:\n\n            \nlog_output\n.\nwrite\n(\n\"-----------------------------------------------------------------------------\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"Region: \"\n \n+\n \nregion\n \n+\n \n\"\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"StackName: \"\n \n+\n \nstackname\n \n+\n \n\"\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"*****************************************************************************\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"ResourceStatusReason:  \n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\ntextwrap\n.\nfill\n(\nstr\n(\nreason\n),\n \n85\n)\n \n+\n \n\"\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"*****************************************************************************\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"*****************************************************************************\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"Events:  \n\\n\n\"\n)\n\n            \nlog_output\n.\nwritelines\n(\ntabulate\n.\ntabulate\n(\ncfnlogs\n,\n \nheaders\n=\n\"keys\"\n))\n\n            \nlog_output\n.\nwrite\n(\n\n                \n\"\n\\n\n*****************************************************************************\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"-----------------------------------------------------------------------------\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\"Tested on: \"\n \n+\n \ndatetime\n.\ndatetime\n.\nnow\n()\n.\nstrftime\n(\n\"%A, \n%d\n. %B %Y %I:%M%p\"\n)\n \n+\n \n\"\n\\n\n\"\n)\n\n            \nlog_output\n.\nwrite\n(\n\n                \n\"-----------------------------------------------------------------------------\n\\n\\n\n\"\n)\n\n            \nlog_output\n.\nclose\n()\n\n\n        \n# Collect resources of the stack and get event logs for any child stacks\n\n        \nresources\n \n=\n \nself\n.\nget_resources\n(\nstackname\n,\n \nregion\n,\n \ninclude_stacks\n=\nTrue\n)\n\n        \nfor\n \nresource\n \nin\n \nresources\n:\n\n            \nif\n \nresource\n[\n'resourceType'\n]\n \n==\n \n'AWS::CloudFormation::Stack'\n:\n\n                \nself\n.\nwrite_logs\n(\nresource\n[\n'physicalId'\n],\n \nlogpath\n)\n\n\n    \ndef\n \ncreatereport\n(\nself\n,\n \ntestdata_list\n,\n \nfilename\n):\n\n        \n\"\"\"\n\n\n        This function creates the test report.\n\n\n\n        :param testdata_list: List of TestData objects\n\n\n        :param filename: Report file name\n\n\n        :return:\n\n\n        \"\"\"\n\n        \no_directory\n \n=\n \n'taskcat_outputs'\n\n\n        \n# noinspection PyBroadException\n\n        \ntry\n:\n\n            \nos\n.\nstat\n(\no_directory\n)\n\n        \nexcept\n \nException\n:\n\n            \nos\n.\nmkdir\n(\no_directory\n)\n\n        \nprint\n(\n\"{} |GENERATING REPORTS{}\"\n.\nformat\n(\nself\n.\nnametag\n,\n \nheader\n,\n \nrst_color\n))\n\n        \nprint\n(\nI\n \n+\n \n\"Creating report in [\n%s\n]\"\n \n%\n \no_directory\n)\n\n        \ndashboard_filename\n \n=\n \no_directory\n \n+\n \n\"/\"\n \n+\n \nfilename\n\n\n        \n# Collect recursive logs\n\n        \n# file path is already setup by getofile function in genreports\n\n        \nself\n.\ncreatecfnlogs\n(\ntestdata_list\n,\n \no_directory\n)\n\n\n        \n# Generate html test dashboard\n\n        \n# Uses logpath + region to create View Logs link\n\n        \nself\n.\ngenreport\n(\ntestdata_list\n,\n \ndashboard_filename\n)\n\n\n    \n@property\n\n    \ndef\n \ninterface\n(\nself\n):\n\n        \nparser\n \n=\n \nargparse\n.\nArgumentParser\n(\n\n            \ndescription\n=\n\"\"\"Multi-Region CloudFormation Deployment Tool)\n\n\n            \n\n\n    [Auto-generated stack inputs] \n\n\n    Auto-select available az\n\\'\ns at runtime based test region defined $[_genazX] $[_genaz<number of az\n\\'\ns>] \n\n\n    Generate password during runtime $[_genpass_XX]  $[_genpass_<length>_<type>]\n\n\n        - Parameters value in json input file must start with \n\\'\n$[\n\\'\n end with \n\\'\n]\n\\'\n\n\n    \n\n\n    Example:[ {\n\n\n        \"ParameterKey\": \"AvailabilityZones\",\n\n\n        \"ParameterValue\": \"$[taskcat_genaz_2]\"\n\n\n    } ]\n\n\n    Generates: us-east-1a, us-east-2b\n\n\n    \n\n\n    Example:[ {\n\n\n        \"ParameterKey\": \"AppPassword\",\n\n\n        \"ParameterValue\": \"$[taskcat_genpass_8]\"\n\n\n    } ]\n\n\n    \n\n\n    Generates: tI8zN3iX8 \n\n\n    Optionally: $[taskcat_genpass_8S]\n\n\n    Generates: mA5@cB5!\n\n\n    \n\n\n    For more info see: http://taskcat.io\n\n\n\n        \"\"\"\n,\n\n            \nprog\n=\n'taskcat'\n,\n\n            \nprefix_chars\n=\n'-'\n,\n\n            \nformatter_class\n=\nRawTextHelpFormatter\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-c'\n,\n\n            \n'--config_yml'\n,\n\n            \ntype\n=\nstr\n,\n\n            \nhelp\n=\n\"(Required!) [config.yml] pass '-ey' for example\"\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-P'\n,\n\n            \n'--boto_profile'\n,\n\n            \ntype\n=\nstr\n,\n\n            \nhelp\n=\n\"Authenticate using boto profile\"\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-A'\n,\n\n            \n'--aws_access_key'\n,\n\n            \ntype\n=\nstr\n,\n\n            \nhelp\n=\n\"AWS Access Key\"\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-S'\n,\n\n            \n'--aws_secret_key'\n,\n\n            \ntype\n=\nstr\n,\n\n            \nhelp\n=\n\"AWS Secrect Key\"\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-ey'\n,\n\n            \n'--example_yaml'\n,\n\n            \naction\n=\n'store_true'\n,\n\n            \nhelp\n=\n\"Print out example yaml\"\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-n'\n,\n\n            \n'--no_cleanup'\n,\n\n            \naction\n=\n'store_true'\n,\n\n            \nhelp\n=\n\"Sets cleanup to false (Does not teardown stacks)\"\n)\n\n        \nparser\n.\nadd_argument\n(\n\n            \n'-v'\n,\n\n            \n'--verbose'\n,\n\n            \naction\n=\n'store_true'\n,\n\n            \nhelp\n=\n\"Enables verbosity\"\n)\n\n\n        \nargs\n \n=\n \nparser\n.\nparse_args\n()\n\n\n        \nif\n \nlen\n(\nsys\n.\nargv\n)\n \n==\n \n1\n:\n\n            \nprint\n(\nparser\n.\nprint_help\n())\n\n            \nsys\n.\nexit\n(\n0\n)\n\n\n        \nif\n \nargs\n.\nexample_yaml\n:\n\n            \nprint\n(\n\"#An example: config.yml file to be used with \n%s\n \"\n \n%\n \n__name__\n)\n\n            \nprint\n(\nyaml_cfg\n)\n\n            \nsys\n.\nexit\n(\n0\n)\n\n\n        \nif\n \nargs\n.\nverbose\n:\n\n            \nself\n.\nverbose\n \n=\n \nTrue\n\n        \n# Overrides Defaults for cleanup but does not overwrite config.yml\n\n        \nif\n \nargs\n.\nno_cleanup\n:\n\n            \nself\n.\nrun_cleanup\n \n=\n \nFalse\n\n\n        \nif\n \nargs\n.\nboto_profile\n \nis\n \nnot\n \nNone\n:\n\n            \nif\n \nargs\n.\naws_access_key\n \nis\n \nnot\n \nNone\n \nor\n \nargs\n.\naws_secret_key\n \nis\n \nnot\n \nNone\n:\n\n                \nparser\n.\nerror\n(\n\"Cannot use boto profile -P (--boto_profile)\"\n \n+\n\n                             \n\"with --aws_access_key or --aws_secret_key\"\n)\n\n                \nprint\n(\nparser\n.\nprint_help\n())\n\n                \nsys\n.\nexit\n(\n1\n)\n\n\n        \nreturn\n \nargs\n\n\n    \ndef\n \nwelcome\n(\nself\n,\n \nprog_name\n=\n'taskcat.io'\n):\n\n        \nbanner\n \n=\n \npyfiglet\n.\nFiglet\n(\nfont\n=\n'standard'\n)\n\n        \nself\n.\nbanner\n \n=\n \nbanner\n\n        \nprint\n(\n\"{0}\"\n.\nformat\n(\nbanner\n.\nrenderText\n(\nprog_name\n),\n \n'\n\\n\n'\n))\n\n        \nprint\n(\n\"version \n%s\n\"\n \n%\n \nversion\n)\n\n\n\n\n  \n\n\n\n\n\n      \n\n          \nAncestors (in MRO)\n\n          \n\n          \nTaskCat\n\n          \nbuiltins.object\n\n          \n\n          \nStatic methods\n\n\n  \n\n    \n\n    \ndef \n__init__\n(\nself, nametag='[taskcat]')\n\n    \n\n\n\n\n\n    \nInitialize self.  See help(type(self)) for accurate signature.\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \n__init__\n(\nself\n,\n \nnametag\n=\n'[taskcat]'\n):\n\n    \nself\n.\nnametag\n \n=\n \n'{1}{0}{2}'\n.\nformat\n(\nnametag\n,\n \nname_color\n,\n \nrst_color\n)\n\n    \nself\n.\nproject\n \n=\n \nNone\n\n    \nself\n.\nbanner\n \n=\n \nNone\n\n    \nself\n.\ncapabilities\n \n=\n \n[]\n\n    \nself\n.\nverbose\n \n=\n \nFalse\n\n    \nself\n.\nconfig\n \n=\n \n'config.yml'\n\n    \nself\n.\ntest_region\n \n=\n \n[]\n\n    \nself\n.\ns3bucket\n \n=\n \nNone\n\n    \nself\n.\ntemplate_path\n \n=\n \nNone\n\n    \nself\n.\nparameter_path\n \n=\n \nNone\n\n    \nself\n.\ndefult_region\n \n=\n \n\"us-east-1\"\n\n    \nself\n.\n_template_file\n \n=\n \nNone\n\n    \nself\n.\n_parameter_file\n \n=\n \nNone\n\n    \nself\n.\n_parameter_path\n \n=\n \nNone\n\n    \nself\n.\n_termsize\n \n=\n \n110\n\n    \nself\n.\n_banner\n \n=\n \n\"\"\n\n    \nself\n.\n_report\n \n=\n \nFalse\n\n    \nself\n.\n_use_global\n \n=\n \nFalse\n\n    \nself\n.\n_password\n \n=\n \nNone\n\n    \nself\n.\nrun_cleanup\n \n=\n \nTrue\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \naws_api_init\n(\nself, args)\n\n    \n\n\n\n\n\n    \nThis function reads the AWS credentials from various sources to ensure\nthat the client has right credentials defined to successfully run\nTaskCat against an AWS account.\n\n\n:param args: Command line arguments for AWS credentials. It could be\n    either profile name, access key and secret key or none.\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \naws_api_init\n(\nself\n,\n \nargs\n):\n\n    \n\"\"\"\n\n\n    This function reads the AWS credentials from various sources to ensure\n\n\n    that the client has right credentials defined to successfully run\n\n\n    TaskCat against an AWS account.\n\n\n    :param args: Command line arguments for AWS credentials. It could be\n\n\n        either profile name, access key and secret key or none.\n\n\n    \"\"\"\n\n    \nprint\n(\n'\n\\n\n'\n)\n\n    \nif\n \nargs\n.\nboto_profile\n:\n\n        \nboto3\n.\nsetup_default_session\n(\nprofile_name\n=\nargs\n.\nboto_profile\n)\n\n        \ntry\n:\n\n            \nsts_client\n \n=\n \nboto3\n.\nclient\n(\n'sts'\n)\n\n            \naccount\n \n=\n \nsts_client\n.\nget_caller_identity\n()\n.\nget\n(\n'Account'\n)\n\n            \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :AWS AccountNumber: \n\\t\n [\n%s\n]\"\n \n%\n \naccount\n)\n\n            \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Authenticated via: \n\\t\n [boto-profile] \"\n)\n\n        \nexcept\n \nException\n \nas\n \ne\n:\n\n            \nprint\n(\nE\n \n+\n \n\"Credential Error - Please check you profile!\"\n)\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n            \nsys\n.\nexit\n(\n1\n)\n\n    \nelif\n \nargs\n.\naws_access_key\n \nand\n \nargs\n.\naws_secret_key\n:\n\n        \nboto3\n.\nsetup_default_session\n(\n\n            \naws_access_key_id\n=\nargs\n.\naws_access_key\n,\n\n            \naws_secret_access_key\n=\nargs\n.\naws_secret_key\n)\n\n        \ntry\n:\n\n            \nsts_client\n \n=\n \nboto3\n.\nclient\n(\n'sts'\n)\n\n            \naccount\n \n=\n \nsts_client\n.\nget_caller_identity\n()\n.\nget\n(\n'Account'\n)\n\n            \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :AWS AccountNumber: \n\\t\n [\n%s\n]\"\n \n%\n \naccount\n)\n\n            \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Authenticated via: \n\\t\n [role] \"\n)\n\n        \nexcept\n \nException\n \nas\n \ne\n:\n\n            \nprint\n(\nE\n \n+\n \n\"Credential Error - Please check you keys!\"\n)\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n            \nsys\n.\nexit\n(\n1\n)\n\n    \nelse\n:\n\n        \nboto3\n.\nsetup_default_session\n(\n\n            \naws_access_key_id\n=\nargs\n.\naws_access_key\n,\n\n            \naws_secret_access_key\n=\nargs\n.\naws_secret_key\n)\n\n        \ntry\n:\n\n            \nsts_client\n \n=\n \nboto3\n.\nclient\n(\n'sts'\n)\n\n            \naccount\n \n=\n \nsts_client\n.\nget_caller_identity\n()\n.\nget\n(\n'Account'\n)\n\n            \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :AWS AccountNumber: \n\\t\n [\n%s\n]\"\n \n%\n \naccount\n)\n\n            \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Authenticated via: \n\\t\n [role] \"\n)\n\n        \nexcept\n \nException\n \nas\n \ne\n:\n\n            \nprint\n(\nE\n \n+\n \n\"Credential Error - Cannot assume role!\"\n)\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n            \nsys\n.\nexit\n(\n1\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \ncleanup\n(\nself, testdata_list, speed)\n\n    \n\n\n\n\n\n    \nThis function deletes the CloudFormation stacks of the given tests.\n\n\n:param testdata_list: List of TestData objects\n:param speed: Interval (in seconds) in which the status has to be checked\n    while deleting the stacks.\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \ncleanup\n(\nself\n,\n \ntestdata_list\n,\n \nspeed\n):\n\n    \n\"\"\"\n\n\n    This function deletes the CloudFormation stacks of the given tests.\n\n\n    :param testdata_list: List of TestData objects\n\n\n    :param speed: Interval (in seconds) in which the status has to be checked\n\n\n        while deleting the stacks.\n\n\n    \"\"\"\n\n    \ndocleanup\n \n=\n \nself\n.\nget_docleanup\n()\n\n    \nif\n \nself\n.\nverbose\n:\n\n        \nprint\n(\nD\n \n+\n \n\"clean-up = \n%s\n \"\n \n%\n \nstr\n(\ndocleanup\n))\n\n    \nif\n \ndocleanup\n:\n\n        \nprint\n(\n\"{} |CLEANUP STACKS{}\"\n.\nformat\n(\nself\n.\nnametag\n,\n \nheader\n,\n \nrst_color\n))\n\n        \nself\n.\nstackdelete\n(\ntestdata_list\n)\n\n        \nself\n.\nget_stackstatus\n(\ntestdata_list\n,\n \nspeed\n)\n\n        \nself\n.\ndeep_cleanup\n(\ntestdata_list\n)\n\n    \nelse\n:\n\n        \nprint\n(\nI\n \n+\n \n\"[Retaining Stacks (Cleanup is set to {0}]\"\n.\nformat\n(\ndocleanup\n))\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \ncollect_resources\n(\nself, testdata_list, logpath)\n\n    \n\n\n\n\n\n    \nThis function collects the AWS resources information created by the\nCloudFormation stack for generating the report.\n\n\n:param testdata_list: List of TestData object\n:param logpath: Log file path\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \ncollect_resources\n(\nself\n,\n \ntestdata_list\n,\n \nlogpath\n):\n\n    \n\"\"\"\n\n\n    This function collects the AWS resources information created by the\n\n\n    CloudFormation stack for generating the report.\n\n\n    :param testdata_list: List of TestData object\n\n\n    :param logpath: Log file path\n\n\n    \"\"\"\n\n    \nresource\n \n=\n \n{}\n\n    \nprint\n(\nI\n \n+\n \n\"(Collecting Resources)\"\n)\n\n    \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n        \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n            \nstackinfo\n \n=\n \nself\n.\nparse_stack_info\n(\nstr\n(\nstack\n[\n'StackId'\n]))\n\n            \n# Get stack resources\n\n            \nresource\n[\nstackinfo\n[\n'region'\n]]\n \n=\n \n(\n\n                \nself\n.\nget_resources\n(\n\n                    \nstr\n(\nstackinfo\n[\n'stack_name'\n]),\n\n                    \nstr\n(\nstackinfo\n[\n'region'\n])\n\n                \n)\n\n            \n)\n\n            \nextension\n \n=\n \n'.txt'\n\n            \ntest_logpath\n \n=\n \n'{}/{}-{}-{}{}'\n.\nformat\n(\n\n                \nlogpath\n,\n\n                \nstackinfo\n[\n'stack_name'\n],\n\n                \nstackinfo\n[\n'region'\n],\n\n                \n'resources'\n,\n\n                \nextension\n)\n\n            \n# Write resource logs\n\n            \nfile\n \n=\n \nopen\n(\ntest_logpath\n,\n \n'w'\n)\n\n            \nfile\n.\nwrite\n(\nstr\n(\n\n                \njson\n.\ndumps\n(\n\n                    \nresource\n,\n\n                    \nindent\n=\n4\n,\n\n                    \nseparators\n=\n(\n','\n,\n \n': '\n))))\n\n            \nfile\n.\nclose\n()\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \ncreatecfnlogs\n(\nself, testdata_list, logpath)\n\n    \n\n\n\n\n\n    \nThis function creates the CloudFormation log files.\n\n\n:param testdata_list: List of TestData objects\n:param logpath: Log file path\n:return:\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \ncreatecfnlogs\n(\nself\n,\n \ntestdata_list\n,\n \nlogpath\n):\n\n    \n\"\"\"\n\n\n    This function creates the CloudFormation log files.\n\n\n    :param testdata_list: List of TestData objects\n\n\n    :param logpath: Log file path\n\n\n    :return:\n\n\n    \"\"\"\n\n    \nprint\n(\nI\n \n+\n \n\"(Collecting CloudFormation Logs)\"\n)\n\n    \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n        \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n            \nstackinfo\n \n=\n \nself\n.\nparse_stack_info\n(\nstr\n(\nstack\n[\n'StackId'\n]))\n\n            \nstackname\n \n=\n \nstr\n(\nstackinfo\n[\n'stack_name'\n])\n\n            \nregion\n \n=\n \nstr\n(\nstackinfo\n[\n'region'\n])\n\n            \nextension\n \n=\n \n'.txt'\n\n            \ntest_logpath\n \n=\n \n'{}/{}-{}-{}{}'\n.\nformat\n(\n\n                \nlogpath\n,\n\n                \nstackname\n,\n\n                \nregion\n,\n\n                \n'cfnlogs'\n,\n\n                \nextension\n)\n\n            \nself\n.\nwrite_logs\n(\nstr\n(\nstack\n[\n'StackId'\n]),\n \ntest_logpath\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \ncreatereport\n(\nself, testdata_list, filename)\n\n    \n\n\n\n\n\n    \nThis function creates the test report.\n\n\n:param testdata_list: List of TestData objects\n:param filename: Report file name\n:return:\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \ncreatereport\n(\nself\n,\n \ntestdata_list\n,\n \nfilename\n):\n\n    \n\"\"\"\n\n\n    This function creates the test report.\n\n\n    :param testdata_list: List of TestData objects\n\n\n    :param filename: Report file name\n\n\n    :return:\n\n\n    \"\"\"\n\n    \no_directory\n \n=\n \n'taskcat_outputs'\n\n    \n# noinspection PyBroadException\n\n    \ntry\n:\n\n        \nos\n.\nstat\n(\no_directory\n)\n\n    \nexcept\n \nException\n:\n\n        \nos\n.\nmkdir\n(\no_directory\n)\n\n    \nprint\n(\n\"{} |GENERATING REPORTS{}\"\n.\nformat\n(\nself\n.\nnametag\n,\n \nheader\n,\n \nrst_color\n))\n\n    \nprint\n(\nI\n \n+\n \n\"Creating report in [\n%s\n]\"\n \n%\n \no_directory\n)\n\n    \ndashboard_filename\n \n=\n \no_directory\n \n+\n \n\"/\"\n \n+\n \nfilename\n\n    \n# Collect recursive logs\n\n    \n# file path is already setup by getofile function in genreports\n\n    \nself\n.\ncreatecfnlogs\n(\ntestdata_list\n,\n \no_directory\n)\n\n    \n# Generate html test dashboard\n\n    \n# Uses logpath + region to create View Logs link\n\n    \nself\n.\ngenreport\n(\ntestdata_list\n,\n \ndashboard_filename\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \ndeep_cleanup\n(\nself, testdata_list)\n\n    \n\n\n\n\n\n    \nThis function deletes the AWS resources which were not deleted\nby deleting CloudFormation stacks.\n\n\n:param testdata_list: List of TestData objects\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \ndeep_cleanup\n(\nself\n,\n \ntestdata_list\n):\n\n    \n\"\"\"\n\n\n    This function deletes the AWS resources which were not deleted\n\n\n    by deleting CloudFormation stacks.\n\n\n    :param testdata_list: List of TestData objects\n\n\n    \"\"\"\n\n    \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n        \nfailed_stack_ids\n \n=\n \n[]\n\n        \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n            \nif\n \nstr\n(\nstack\n[\n'status'\n])\n \n==\n \n'DELETE_FAILED'\n:\n\n                \nfailed_stack_ids\n.\nappend\n(\nstack\n[\n'StackId'\n])\n\n        \nif\n \nlen\n(\nfailed_stack_ids\n)\n \n==\n \n0\n:\n\n            \nprint\n(\nI\n \n+\n \n\"All stacks deleted successfully. Deep clean-up not required.\"\n)\n\n            \ncontinue\n\n        \nprint\n(\nI\n \n+\n \n\"Few stacks failed to delete. Collecting resources for deep clean-up.\"\n)\n\n        \n# get test region from the stack id\n\n        \nstackdata\n \n=\n \nself\n.\nparse_stack_info\n(\n\n            \nstr\n(\nfailed_stack_ids\n[\n0\n]))\n\n        \nregion\n \n=\n \nstackdata\n[\n'region'\n]\n\n        \nsession\n \n=\n \nboto3\n.\nsession\n.\nSession\n(\nregion_name\n=\nregion\n)\n\n        \ns\n \n=\n \nSweeper\n(\nsession\n)\n\n        \nfailed_stacks\n \n=\n \nself\n.\nget_all_resources\n(\nfailed_stack_ids\n,\n \nregion\n)\n\n        \n# print all resources which failed to delete\n\n        \nif\n \nself\n.\nverbose\n:\n\n            \nprint\n(\nD\n \n+\n \n\"Resources which failed to delete:\n\\n\n\"\n)\n\n            \nfor\n \nfailed_stack\n \nin\n \nfailed_stacks\n:\n\n                \nprint\n(\nD\n \n+\n \n\"Stack Id: \"\n \n+\n \nfailed_stack\n[\n'stackId'\n])\n\n                \nfor\n \nres\n \nin\n \nfailed_stack\n[\n'resources'\n]:\n\n                    \nprint\n(\nD\n \n+\n \n\"{0} = {1}, {2} = {3}, {4} = {5}\"\n.\nformat\n(\n\n                        \n'\n\\n\\t\\t\nLogicalId'\n,\n\n                        \nres\n.\nget\n(\n'logicalId'\n),\n\n                        \n'\n\\n\\t\\t\nPhysicalId'\n,\n\n                        \nres\n.\nget\n(\n'physicalId'\n),\n\n                        \n'\n\\n\\t\\t\nType'\n,\n\n                        \nres\n.\nget\n(\n'resourceType'\n)\n\n                    \n))\n\n            \ns\n.\ndelete_all\n(\nfailed_stacks\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \ndefine_tests\n(\nself, yamlc, test)\n\n    \n\n\n\n\n\n    \nThis function reads the given test config yaml object and defines\nthe tests as per the given config object.\n\n\n:param yamlc: TaskCat config yaml object\n:param test: Test scenarios\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \ndefine_tests\n(\nself\n,\n \nyamlc\n,\n \ntest\n):\n\n    \n\"\"\"\n\n\n    This function reads the given test config yaml object and defines\n\n\n    the tests as per the given config object.\n\n\n    :param yamlc: TaskCat config yaml object\n\n\n    :param test: Test scenarios\n\n\n    \"\"\"\n\n    \nfor\n \ntdefs\n \nin\n \nyamlc\n[\n'tests'\n]\n.\nkeys\n():\n\n        \n# print(\"[DEBUG] tdefs = %s\" % tdefs)\n\n        \nif\n \ntdefs\n \n==\n \ntest\n:\n\n            \nt\n \n=\n \nyamlc\n[\n'tests'\n][\ntest\n][\n'template_file'\n]\n\n            \np\n \n=\n \nyamlc\n[\n'tests'\n][\ntest\n][\n'parameter_input'\n]\n\n            \nn\n \n=\n \nyamlc\n[\n'global'\n][\n'qsname'\n]\n\n            \nb\n \n=\n \nself\n.\nget_s3bucket\n()\n\n            \n# Checks if cleanup flag is set\n\n            \n# If cleanup is set to 'false' stack will not be deleted after\n\n            \n# launch attempt\n\n            \nif\n \n'cleanup'\n \nin\n \nyamlc\n[\n'global'\n]\n.\nkeys\n():\n\n                \ncleanupstack\n \n=\n \nyamlc\n[\n'global'\n][\n'cleanup'\n]\n\n                \nif\n \ncleanupstack\n:\n\n                    \nif\n \nself\n.\nverbose\n:\n\n                        \nprint\n(\nD\n \n+\n \n\"cleanup set to ymal value\"\n)\n\n                        \nself\n.\nset_docleanup\n(\ncleanupstack\n)\n\n                \nelse\n:\n\n                    \nprint\n(\nI\n \n+\n \n\"Cleanup value set to (false)\"\n)\n\n                    \nself\n.\nset_docleanup\n(\nFalse\n)\n\n            \nelse\n:\n\n                \n# By default do cleanup unless self.run_cleanup\n\n                \n# was overwridden (set to False) by -n flag\n\n                \nif\n \nnot\n \nself\n.\nrun_cleanup\n:\n\n                    \nif\n \nself\n.\nverbose\n:\n\n                        \nprint\n(\nD\n \n+\n \n\"cleanup set by cli flag {0}\"\n.\nformat\n(\nself\n.\nrun_cleanup\n))\n\n                \nelse\n:\n\n                    \nself\n.\nset_docleanup\n(\nTrue\n)\n\n                    \nif\n \nself\n.\nverbose\n:\n\n                        \nprint\n(\nI\n \n+\n \n\"No cleanup value set\"\n)\n\n                        \nprint\n(\nI\n \n+\n \n\" - (Defaulting to cleanup)\"\n)\n\n            \n# Load test setting\n\n            \nself\n.\nset_s3bucket\n(\nb\n)\n\n            \nself\n.\nset_project\n(\nn\n)\n\n            \nself\n.\nset_template_file\n(\nt\n)\n\n            \nself\n.\nset_parameter_file\n(\np\n)\n\n            \nself\n.\nset_template_path\n(\n\n                \nself\n.\nget_s3_url\n(\nself\n.\nget_template_file\n()))\n\n            \nself\n.\nset_parameter_path\n(\n\n                \nself\n.\nget_s3_url\n(\nself\n.\nget_parameter_file\n()))\n\n            \n# Check to make sure template filenames are correct\n\n            \ntemplate_path\n \n=\n \nself\n.\nget_template_path\n()\n\n            \nif\n \nnot\n \ntemplate_path\n:\n\n                \nprint\n(\n\"{0} Could not locate {1}\"\n.\nformat\n(\nE\n,\n \nself\n.\nget_template_file\n()))\n\n                \nprint\n(\n\"{0} Check to make sure filename is correct?\"\n.\nformat\n(\nE\n,\n \nself\n.\nget_template_path\n()))\n\n                \nquit\n()\n\n            \n# Check to make sure parameter filenames are correct\n\n            \nparameter_path\n \n=\n \nself\n.\nget_parameter_path\n()\n\n            \nif\n \nnot\n \nparameter_path\n:\n\n                \nprint\n(\n\"{0} Could not locate {1}\"\n.\nformat\n(\nE\n,\n \nself\n.\nget_parameter_file\n()))\n\n                \nprint\n(\n\"{0} Check to make sure filename is correct?\"\n.\nformat\n(\nE\n,\n \nself\n.\nget_parameter_file\n()))\n\n                \nquit\n()\n\n            \nprint\n(\n'\n\\n\n'\n)\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nI\n \n+\n \n\"|Acquiring tests assets for .......[\n%s\n]\"\n \n%\n \ntest\n)\n\n                \nprint\n(\nD\n \n+\n \n\"|S3 Bucket  => [\n%s\n]\"\n \n%\n \nself\n.\nget_s3bucket\n())\n\n                \nprint\n(\nD\n \n+\n \n\"|Project    => [\n%s\n]\"\n \n%\n \nself\n.\nget_project\n())\n\n                \nprint\n(\nD\n \n+\n \n\"|Template   => [\n%s\n]\"\n \n%\n \nself\n.\nget_template_path\n())\n\n                \nprint\n(\nD\n \n+\n \n\"|Parameter  => [\n%s\n]\"\n \n%\n \nself\n.\nget_parameter_path\n())\n\n            \nif\n \n'regions'\n \nin\n \nyamlc\n[\n'tests'\n][\ntest\n]:\n\n                \nif\n \nyamlc\n[\n'tests'\n][\ntest\n][\n'regions'\n]\n \nis\n \nnot\n \nNone\n:\n\n                    \nr\n \n=\n \nyamlc\n[\n'tests'\n][\ntest\n][\n'regions'\n]\n\n                    \nself\n.\nset_test_region\n(\nlist\n(\nr\n))\n\n                    \nif\n \nself\n.\nverbose\n:\n\n                        \nprint\n(\nD\n \n+\n \n\"|Defined Regions:\"\n)\n\n                        \nfor\n \nlist_o\n \nin\n \nself\n.\nget_test_region\n():\n\n                            \nprint\n(\n\"\n\\t\\t\\t\n - [\n%s\n]\"\n \n%\n \nlist_o\n)\n\n            \nelse\n:\n\n                \nglobal_regions\n \n=\n \nself\n.\nget_global_region\n(\nyamlc\n)\n\n                \nself\n.\nset_test_region\n(\nlist\n(\nglobal_regions\n))\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \n\"|Global Regions:\"\n)\n\n                    \nfor\n \nlist_o\n \nin\n \nself\n.\nget_test_region\n():\n\n                        \nprint\n(\n\"\n\\t\\t\\t\n - [\n%s\n]\"\n \n%\n \nlist_o\n)\n\n            \nprint\n(\nP\n \n+\n \n\"(Completed) acquisition of [\n%s\n]\"\n \n%\n \ntest\n)\n\n            \nprint\n(\n'\n\\n\n'\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \ngenpassword\n(\nself, pass_length, pass_type)\n\n    \n\n\n\n\n\n    \nReturns a password of given length and type.\n\n\n:param pass_length: Length of the desired password\n:param pass_type: Type of the desired password - String only OR Alphanumeric\n    * A = AlphaNumeric, Example 'vGceIP8EHC'\n:return: Password of given length and type\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \ngenpassword\n(\nself\n,\n \npass_length\n,\n \npass_type\n):\n\n    \n\"\"\"\n\n\n    Returns a password of given length and type.\n\n\n    :param pass_length: Length of the desired password\n\n\n    :param pass_type: Type of the desired password - String only OR Alphanumeric\n\n\n        * A = AlphaNumeric, Example 'vGceIP8EHC'\n\n\n    :return: Password of given length and type\n\n\n    \"\"\"\n\n    \nif\n \nself\n.\nverbose\n:\n\n        \nprint\n(\nD\n \n+\n \n\"Auto generating password\"\n)\n\n        \nprint\n(\nD\n \n+\n \n\"Pass size => {0}\"\n.\nformat\n(\npass_length\n))\n\n    \npassword\n \n=\n \n[]\n\n    \nnumbers\n \n=\n \n\"1234567890\"\n\n    \nlowercase\n \n=\n \n\"abcdefghijklmnopqrstuvwxyz\"\n\n    \nuppercase\n \n=\n \n\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n    \nspecialchars\n \n=\n \n\"!#$&{*:[=,]-_%@+\"\n\n    \n# Generates password string with:\n\n    \n# lowercase,uppercase and numeric chars\n\n    \nif\n \npass_type\n \n==\n \n'A'\n:\n\n        \nprint\n(\nD\n \n+\n \n\"Pass type => {0}\"\n.\nformat\n(\n'alpha-numeric'\n))\n\n        \nwhile\n \nlen\n(\npassword\n)\n \n<\n \npass_length\n:\n\n            \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nlowercase\n))\n\n            \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nuppercase\n))\n\n            \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nnumbers\n))\n\n    \n# Generates password string with:\n\n    \n# lowercase,uppercase, numbers and special chars\n\n    \nelif\n \npass_type\n \n==\n \n'S'\n:\n\n        \nprint\n(\nD\n \n+\n \n\"Pass type => ('specialchars')\"\n)\n\n        \nwhile\n \nlen\n(\npassword\n)\n \n<\n \npass_length\n:\n\n            \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nlowercase\n))\n\n            \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nuppercase\n))\n\n            \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nnumbers\n))\n\n            \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nspecialchars\n))\n\n    \nelse\n:\n\n        \n# If no passtype is defined (None)\n\n        \n# Defaults to alpha-numeric\n\n        \n# Generates password string with:\n\n        \n# lowercase,uppercase, numbers and special chars\n\n        \nprint\n(\nD\n \n+\n \n\"Pass type => default ('alpha-numeric')\"\n)\n\n        \nwhile\n \nlen\n(\npassword\n)\n \n<\n \npass_length\n:\n\n            \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nlowercase\n))\n\n            \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nuppercase\n))\n\n            \npassword\n.\nappend\n(\nrandom\n.\nchoice\n(\nnumbers\n))\n\n    \nreturn\n \n''\n.\njoin\n(\npassword\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \ngenreport\n(\nself, testdata_list, dashboard_filename)\n\n    \n\n\n\n\n\n    \nThis function generates the test report.\n\n\n:param testdata_list: List of TestData objects\n:param dashboard_filename: Report file name\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \ngenreport\n(\nself\n,\n \ntestdata_list\n,\n \ndashboard_filename\n):\n\n    \n\"\"\"\n\n\n    This function generates the test report.\n\n\n    :param testdata_list: List of TestData objects\n\n\n    :param dashboard_filename: Report file name\n\n\n    \"\"\"\n\n    \ndoc\n \n=\n \nyattag\n.\nDoc\n()\n\n    \n# Type of cfnlog return cfn log file\n\n    \n# Type of resource_log return resource log file\n\n    \ndef\n \ngetofile\n(\nregion\n,\n \nstack_name\n,\n \nresource_type\n):\n\n        \nextension\n \n=\n \n'.txt'\n\n        \nif\n \nresource_type\n \n==\n \n'cfnlog'\n:\n\n            \nlocation\n \n=\n \n\"{}-{}-{}{}\"\n.\nformat\n(\nstack_name\n,\n \nregion\n,\n \n'cfnlogs'\n,\n \nextension\n)\n\n            \nreturn\n \nstr\n(\nlocation\n)\n\n        \nelif\n \nresource_type\n \n==\n \n'resource_log'\n:\n\n            \nlocation\n \n=\n \n\"{}-{}-{}{}\"\n.\nformat\n(\nstack_name\n,\n \nregion\n,\n \n'resources'\n,\n \nextension\n)\n\n            \nreturn\n \nstr\n(\nlocation\n)\n\n    \ndef\n \nget_teststate\n(\nstackname\n,\n \nregion\n):\n\n        \n# Add try catch and return MANUALLY_DELETED\n\n        \n# Add css test-orange\n\n        \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n        \ntest_query\n \n=\n \ncfn\n.\ndescribe_stacks\n(\nStackName\n=\nstackname\n)\n\n        \nrstatus\n \n=\n \nNone\n\n        \nstatus_css\n \n=\n \nNone\n\n        \nfor\n \nresult\n \nin\n \ntest_query\n[\n'Stacks'\n]:\n\n            \nrstatus\n \n=\n \nresult\n.\nget\n(\n'StackStatus'\n)\n\n            \nif\n \nrstatus\n \n==\n \n'CREATE_COMPLETE'\n:\n\n                \nstatus_css\n \n=\n \n'class=test-green'\n\n            \nelif\n \nrstatus\n \n==\n \n'CREATE_FAILED'\n:\n\n                \nstatus_css\n \n=\n \n'class=test-red'\n\n            \nelse\n:\n\n                \nstatus_css\n \n=\n \n'class=test-red'\n\n        \nreturn\n \nrstatus\n,\n \nstatus_css\n\n    \ntag\n \n=\n \ndoc\n.\ntag\n\n    \ntext\n \n=\n \ndoc\n.\ntext\n\n    \nlogo\n \n=\n \n'taskcat'\n\n    \nrepo_link\n \n=\n \n'https://github.com/aws-quickstart/taskcat'\n\n    \noutput_css\n \n=\n \n'https://taskcat.s3.amazonaws.com/assets/css/taskcat.css'\n\n    \ndoc_link\n \n=\n \n'http://taskcat.io'\n\n    \nwith\n \ntag\n(\n'html'\n):\n\n        \nwith\n \ntag\n(\n'head'\n):\n\n            \ndoc\n.\nstag\n(\n'meta'\n,\n \ncharset\n=\n'utf-8'\n)\n\n            \ndoc\n.\nstag\n(\n\n                \n'meta'\n,\n \nname\n=\n\"viewport\"\n,\n \ncontent\n=\n\"width=device-width\"\n)\n\n            \ndoc\n.\nstag\n(\n'link'\n,\n \nrel\n=\n'stylesheet'\n,\n\n                     \nhref\n=\noutput_css\n)\n\n            \nwith\n \ntag\n(\n'title'\n):\n\n                \ntext\n(\n'TaskCat Report'\n)\n\n        \nwith\n \ntag\n(\n'body'\n):\n\n            \ntested_on\n \n=\n \ntime\n.\nstrftime\n(\n'%A - %b,\n%d\n,%Y @ %H:%M:%S'\n)\n\n            \nwith\n \ntag\n(\n'table'\n,\n \n'class=header-table-fill'\n):\n\n                \nwith\n \ntag\n(\n'tbody'\n):\n\n                    \nwith\n \ntag\n(\n'th'\n,\n \n'colspan=2'\n):\n\n                        \nwith\n \ntag\n(\n'tr'\n):\n\n                            \nwith\n \ntag\n(\n'td'\n):\n\n                                \nwith\n \ntag\n(\n'a'\n,\n \nhref\n=\nrepo_link\n):\n\n                                    \ntext\n(\n'GitHub Repo: '\n)\n\n                                    \ntext\n(\nrepo_link\n)\n\n                                    \ndoc\n.\nstag\n(\n'br'\n)\n\n                                \nwith\n \ntag\n(\n'a'\n,\n \nhref\n=\ndoc_link\n):\n\n                                    \ntext\n(\n'Documentation: '\n)\n\n                                    \ntext\n(\ndoc_link\n)\n\n                                    \ndoc\n.\nstag\n(\n'br'\n)\n\n                                \ntext\n(\n'Tested on: '\n)\n\n                                \ntext\n(\ntested_on\n)\n\n                            \nwith\n \ntag\n(\n'td'\n,\n \n'class=taskcat-logo'\n):\n\n                                \nwith\n \ntag\n(\n'h3'\n):\n\n                                    \ntext\n(\nlogo\n)\n\n        \ndoc\n.\nstag\n(\n'p'\n)\n\n        \nwith\n \ntag\n(\n'table'\n,\n \n'class=table-fill'\n):\n\n            \nwith\n \ntag\n(\n'tbody'\n):\n\n                \nwith\n \ntag\n(\n'thread'\n):\n\n                    \nwith\n \ntag\n(\n'tr'\n):\n\n                        \nwith\n \ntag\n(\n'th'\n,\n\n                                 \n'class=text-center'\n,\n\n                                 \n'width=25%'\n):\n\n                            \ntext\n(\n'Test Name'\n)\n\n                        \nwith\n \ntag\n(\n'th'\n,\n\n                                 \n'class=text-left'\n,\n\n                                 \n'width=10%'\n):\n\n                            \ntext\n(\n'Tested Region'\n)\n\n                        \nwith\n \ntag\n(\n'th'\n,\n\n                                 \n'class=text-left'\n,\n\n                                 \n'width=30%'\n):\n\n                            \ntext\n(\n'Stack Name'\n)\n\n                        \nwith\n \ntag\n(\n'th'\n,\n\n                                 \n'class=text-left'\n,\n\n                                 \n'width=20%'\n):\n\n                            \ntext\n(\n'Tested Results'\n)\n\n                        \nwith\n \ntag\n(\n'th'\n,\n\n                                 \n'class=text-left'\n,\n\n                                 \n'width=15%'\n):\n\n                            \ntext\n(\n'Test Logs'\n)\n\n                        \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n                            \nwith\n \ntag\n(\n'tr'\n,\n \n'class= test-footer'\n):\n\n                                \nwith\n \ntag\n(\n'td'\n,\n \n'colspan=5'\n):\n\n                                    \ntext\n(\n''\n)\n\n                            \ntestname\n \n=\n \ntest\n.\nget_test_name\n()\n\n                            \nprint\n(\nI\n \n+\n \n\"(Generating Reports)\"\n)\n\n                            \nprint\n(\nI\n \n+\n \n\" - Processing {}\"\n.\nformat\n(\ntestname\n))\n\n                            \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                                \nstate\n \n=\n \nself\n.\nparse_stack_info\n(\n\n                                    \nstr\n(\nstack\n[\n'StackId'\n]))\n\n                                \nstatus\n,\n \ncss\n \n=\n \nget_teststate\n(\n\n                                    \nstate\n[\n'stack_name'\n],\n\n                                    \nstate\n[\n'region'\n])\n\n                                \nwith\n \ntag\n(\n'tr'\n):\n\n                                    \nwith\n \ntag\n(\n'td'\n,\n\n                                             \n'class=test-info'\n):\n\n                                        \nwith\n \ntag\n(\n'h3'\n):\n\n                                            \ntext\n(\ntestname\n)\n\n                                    \nwith\n \ntag\n(\n'td'\n,\n\n                                             \n'class=text-left'\n):\n\n                                        \ntext\n(\nstate\n[\n'region'\n])\n\n                                    \nwith\n \ntag\n(\n'td'\n,\n\n                                             \n'class=text-left'\n):\n\n                                        \ntext\n(\nstate\n[\n'stack_name'\n])\n\n                                    \nwith\n \ntag\n(\n'td'\n,\n \ncss\n):\n\n                                        \ntext\n(\nstr\n(\nstatus\n))\n\n                                    \nwith\n \ntag\n(\n'td'\n,\n\n                                             \n'class=text-left'\n):\n\n                                        \nclog\n \n=\n \ngetofile\n(\n\n                                            \nstate\n[\n'region'\n],\n\n                                            \nstate\n[\n'stack_name'\n],\n\n                                            \n'cfnlog'\n)\n\n                                        \n# rlog = getofile(\n\n                                        \n#    state['region'],\n\n                                        \n#    state['stack_name'],\n\n                                        \n#    'resource_log')\n\n                                        \n#\n\n                                        \nwith\n \ntag\n(\n'a'\n,\n \nhref\n=\nclog\n):\n\n                                            \ntext\n(\n'View Logs '\n)\n\n                                            \n# with tag('a', href=rlog):\n\n                                            \n#    text('Resource Logs ')\n\n                        \nwith\n \ntag\n(\n'tr'\n,\n \n'class= test-footer'\n):\n\n                            \nwith\n \ntag\n(\n'td'\n,\n \n'colspan=5'\n):\n\n                                \nvtag\n \n=\n \n'Generated by {} {}'\n.\nformat\n(\n'taskcat'\n,\n \nversion\n)\n\n                                \ntext\n(\nvtag\n)\n\n                    \ndoc\n.\nstag\n(\n'p'\n)\n\n                    \nprint\n(\n'\n\\n\n'\n)\n\n    \nhtmloutput\n \n=\n \nyattag\n.\nindent\n(\ndoc\n.\ngetvalue\n(),\n\n                               \nindentation\n=\n'    '\n,\n\n                               \nnewline\n=\n'\n\\r\\n\n'\n,\n\n                               \nindent_text\n=\nTrue\n)\n\n    \nfile\n \n=\n \nopen\n(\ndashboard_filename\n,\n \n'w'\n)\n\n    \nfile\n.\nwrite\n(\nhtmloutput\n)\n\n    \nfile\n.\nclose\n()\n\n    \nreturn\n \nhtmloutput\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_all_resources\n(\nself, stackids, region)\n\n    \n\n\n\n\n\n    \nGiven a list of stackids, function returns the list of dictionary items, where each\nitem consist of stackId and the resources associated with that stack.\n\n\n:param stackids: List of Stack Ids\n:param region: AWS region\n:return: A list of dictionary object in the following format\n        [\n            {\n                'stackId': 'string',\n                'resources': [\n                    {\n                       'logicalId': 'string',\n                       'physicalId': 'string',\n                       'resourceType': 'String'\n                    },\n                ]\n            },\n        ]\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_all_resources\n(\nself\n,\n \nstackids\n,\n \nregion\n):\n\n    \n\"\"\"\n\n\n    Given a list of stackids, function returns the list of dictionary items, where each\n\n\n    item consist of stackId and the resources associated with that stack.\n\n\n    :param stackids: List of Stack Ids\n\n\n    :param region: AWS region\n\n\n    :return: A list of dictionary object in the following format\n\n\n            [\n\n\n                {\n\n\n                    'stackId': 'string',\n\n\n                    'resources': [\n\n\n                        {\n\n\n                           'logicalId': 'string',\n\n\n                           'physicalId': 'string',\n\n\n                           'resourceType': 'String'\n\n\n                        },\n\n\n                    ]\n\n\n                },\n\n\n            ]\n\n\n    \"\"\"\n\n    \nl_all_resources\n \n=\n \n[]\n\n    \nfor\n \nanId\n \nin\n \nstackids\n:\n\n        \nd\n \n=\n \n{\n\n            \n'stackId'\n:\n \nanId\n,\n\n            \n'resources'\n:\n \nself\n.\nget_resources\n(\nanId\n,\n \nregion\n)\n\n        \n}\n\n        \nl_all_resources\n.\nappend\n(\nd\n)\n\n    \nreturn\n \nl_all_resources\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_available_azs\n(\nregion, count)\n\n    \n\n\n\n\n\n    \nReturns a list of availability zones in a given region.\n\n\n:param region: Region for the availability zones\n:param count: Minimum number of availability zones needed\n\n\n:return: List of availability zones in a given region\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \n@staticmethod\n\n\ndef\n \nget_available_azs\n(\nregion\n,\n \ncount\n):\n\n    \n\"\"\"\n\n\n    Returns a list of availability zones in a given region.\n\n\n    :param region: Region for the availability zones\n\n\n    :param count: Minimum number of availability zones needed\n\n\n    :return: List of availability zones in a given region\n\n\n    \"\"\"\n\n    \navailable_azs\n \n=\n \n[]\n\n    \nec2_client\n \n=\n \nboto3\n.\nclient\n(\n'ec2'\n,\n \nregion_name\n=\nregion\n)\n\n    \navailability_zones\n \n=\n \nec2_client\n.\ndescribe_availability_zones\n(\n\n        \nFilters\n=\n[{\n'Name'\n:\n \n'state'\n,\n \n'Values'\n:\n \n[\n'available'\n]}])\n\n    \nfor\n \naz\n \nin\n \navailability_zones\n[\n'AvailabilityZones'\n]:\n\n        \navailable_azs\n.\nappend\n(\naz\n[\n'ZoneName'\n])\n\n    \nif\n \nlen\n(\navailable_azs\n)\n \n<\n \ncount\n:\n\n        \nprint\n(\n\"{0}!Only {1} az's are available in {2}\"\n.\nformat\n(\nE\n,\n \nlen\n(\navailable_azs\n),\n \nregion\n))\n\n        \nquit\n()\n\n    \nelse\n:\n\n        \nazs\n \n=\n \n','\n.\njoin\n(\navailable_azs\n[:\ncount\n])\n\n        \nreturn\n \nazs\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_capabilities\n(\nself)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_capabilities\n(\nself\n):\n\n    \nreturn\n \nself\n.\ncapabilities\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_cfnlogs\n(\nstackname, region)\n\n    \n\n\n\n\n\n    \nThis function returns the event logs of the given stack in a specific format.\n:param stackname: Name of the stack\n:param region: Region stack belongs to\n:return: Event logs of the stack\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \n@staticmethod\n\n\ndef\n \nget_cfnlogs\n(\nstackname\n,\n \nregion\n):\n\n    \n\"\"\"\n\n\n    This function returns the event logs of the given stack in a specific format.\n\n\n    :param stackname: Name of the stack\n\n\n    :param region: Region stack belongs to\n\n\n    :return: Event logs of the stack\n\n\n    \"\"\"\n\n    \nprint\n(\nI\n \n+\n \n\"Collecting logs for \"\n \n+\n \nstackname\n \n+\n \n\"\n\\\"\\n\n\"\n)\n\n    \n# Collect stack_events\n\n    \nstack_events\n \n=\n \nget_cfn_stack_events\n(\nstackname\n,\n \nregion\n)\n\n    \n# Uncomment line for debug\n\n    \n# pprint.pprint (stack_events)\n\n    \nevents\n \n=\n \n[]\n\n    \nfor\n \nevent\n \nin\n \nstack_events\n:\n\n        \nevent_details\n \n=\n \n{\n'TimeStamp'\n:\n \nevent\n[\n'Timestamp'\n],\n\n                         \n'ResourceStatus'\n:\n \nevent\n[\n'ResourceStatus'\n],\n\n                         \n'ResourceType'\n:\n \nevent\n[\n'ResourceType'\n],\n\n                         \n'LogicalResourceId'\n:\n \nevent\n[\n'LogicalResourceId'\n]}\n\n        \nif\n \n'ResourceStatusReason'\n \nin\n \nevent\n:\n\n            \nevent_details\n[\n'ResourceStatusReason'\n]\n \n=\n \nevent\n[\n'ResourceStatusReason'\n]\n\n        \nelse\n:\n\n            \nevent_details\n[\n'ResourceStatusReason'\n]\n \n=\n \n''\n\n        \nevents\n.\nappend\n(\nevent_details\n)\n\n    \nreturn\n \nevents\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_config\n(\nself)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_config\n(\nself\n):\n\n    \nreturn\n \nself\n.\nconfig\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_default_region\n(\nself)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_default_region\n(\nself\n):\n\n    \nreturn\n \nself\n.\ndefult_region\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_docleanup\n(\nself)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_docleanup\n(\nself\n):\n\n    \nreturn\n \nself\n.\nrun_cleanup\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_global_region\n(\nself, yamlcfg)\n\n    \n\n\n\n\n\n    \nReturns a list of regions defined under global region in the yml config file.\n\n\n:param yamlcfg: Content of the yml config file\n:return: List of regions\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_global_region\n(\nself\n,\n \nyamlcfg\n):\n\n    \n\"\"\"\n\n\n    Returns a list of regions defined under global region in the yml config file.\n\n\n    :param yamlcfg: Content of the yml config file\n\n\n    :return: List of regions\n\n\n    \"\"\"\n\n    \ng_regions\n \n=\n \n[]\n\n    \nfor\n \nkeys\n \nin\n \nyamlcfg\n[\n'global'\n]\n.\nkeys\n():\n\n        \nif\n \n'region'\n \nin\n \nkeys\n:\n\n            \ntry\n:\n\n                \niter\n(\nyamlcfg\n[\n'global'\n][\n'regions'\n])\n\n                \nnamespace\n \n=\n \n'global'\n\n                \nfor\n \nregion\n \nin\n \nyamlcfg\n[\n'global'\n][\n'regions'\n]:\n\n                    \n# print(\"found region %s\" % region)\n\n                    \ng_regions\n.\nappend\n(\nregion\n)\n\n                    \nself\n.\n_use_global\n \n=\n \nTrue\n\n            \nexcept\n \nTypeError\n:\n\n                \nprint\n(\n\"No regions defined in [\n%s\n]:\"\n \n%\n \nnamespace\n)\n\n                \nprint\n(\n\"Please correct region defs[\n%s\n]:\"\n \n%\n \nnamespace\n)\n\n    \nreturn\n \ng_regions\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_parameter_file\n(\nself)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_parameter_file\n(\nself\n):\n\n    \nreturn\n \nself\n.\n_parameter_file\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_parameter_path\n(\nself)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_parameter_path\n(\nself\n):\n\n    \nreturn\n \nself\n.\nparameter_path\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_password\n(\nself)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_password\n(\nself\n):\n\n    \nreturn\n \nself\n.\n_password\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_project\n(\nself)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_project\n(\nself\n):\n\n    \nreturn\n \nself\n.\nproject\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_resources\n(\nself, stackname, region, include_stacks=False)\n\n    \n\n\n\n\n\n    \nGiven a stackname, and region function returns the list of dictionary items, where each item\nconsist of logicalId, physicalId and resourceType of the aws resource associated\nwith the stack.\n\n\n:param include_stacks: \n:param stackname: CloudFormation stack name\n:param region: AWS region\n:return: List of objects in the following format\n     [\n         {\n             'logicalId': 'string',\n             'physicalId': 'string',\n             'resourceType': 'String'\n         },\n     ]\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_resources\n(\nself\n,\n \nstackname\n,\n \nregion\n,\n \ninclude_stacks\n=\nFalse\n):\n\n    \n\"\"\"\n\n\n    Given a stackname, and region function returns the list of dictionary items, where each item\n\n\n    consist of logicalId, physicalId and resourceType of the aws resource associated\n\n\n    with the stack.\n\n\n    :param include_stacks: \n\n\n    :param stackname: CloudFormation stack name\n\n\n    :param region: AWS region\n\n\n    :return: List of objects in the following format\n\n\n         [\n\n\n             {\n\n\n                 'logicalId': 'string',\n\n\n                 'physicalId': 'string',\n\n\n                 'resourceType': 'String'\n\n\n             },\n\n\n         ]\n\n\n    \"\"\"\n\n    \nl_resources\n \n=\n \n[]\n\n    \nself\n.\nget_resources_helper\n(\nstackname\n,\n \nregion\n,\n \nl_resources\n,\n \ninclude_stacks\n)\n\n    \nreturn\n \nl_resources\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_resources_helper\n(\nself, stackname, region, l_resources, include_stacks)\n\n    \n\n\n\n\n\n    \nThis is a helper function of get_resources function. Check get_resources function for details.\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_resources_helper\n(\nself\n,\n \nstackname\n,\n \nregion\n,\n \nl_resources\n,\n \ninclude_stacks\n):\n\n    \n\"\"\"\n\n\n    This is a helper function of get_resources function. Check get_resources function for details.\n\n\n    \"\"\"\n\n    \nif\n \nstackname\n \n!=\n \n'None'\n:\n\n        \ntry\n:\n\n            \ncfn\n \n=\n \nboto3\n.\nclient\n(\n\n                \n'cloudformation'\n,\n \nregion\n)\n\n            \nresult\n \n=\n \ncfn\n.\ndescribe_stack_resources\n(\n\n                \nStackName\n=\nstackname\n)\n\n            \nstackresources\n \n=\n \nresult\n.\nget\n(\n'StackResources'\n)\n\n            \nfor\n \nresource\n \nin\n \nstackresources\n:\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \n\"Resources: for {}\"\n.\nformat\n(\nstackname\n))\n\n                    \nprint\n(\nD\n \n+\n \n\"{0} = {1}, {2} = {3}, {4} = {5}\"\n.\nformat\n(\n\n                        \n'\n\\n\\t\\t\nLogicalId'\n,\n\n                        \nresource\n.\nget\n(\n'LogicalResourceId'\n),\n\n                        \n'\n\\n\\t\\t\nPhysicalId'\n,\n\n                        \nresource\n.\nget\n(\n'PhysicalResourceId'\n),\n\n                        \n'\n\\n\\t\\t\nType'\n,\n\n                        \nresource\n.\nget\n(\n'ResourceType'\n)\n\n                    \n))\n\n                \n# if resource is a stack and has a physical resource id (NOTE: physical id will be missing if stack creation is failed)\n\n                \nif\n \nresource\n.\nget\n(\n\n                        \n'ResourceType'\n)\n \n==\n \n'AWS::CloudFormation::Stack'\n \nand\n \n'PhysicalResourceId'\n \nin\n \nresource\n:\n\n                    \nif\n \ninclude_stacks\n:\n\n                        \nd\n \n=\n \n{\n'logicalId'\n:\n \nresource\n.\nget\n(\n'LogicalResourceId'\n),\n\n                             \n'physicalId'\n:\n \nresource\n.\nget\n(\n'PhysicalResourceId'\n),\n\n                             \n'resourceType'\n:\n \nresource\n.\nget\n(\n'ResourceType'\n)}\n\n                        \nl_resources\n.\nappend\n(\nd\n)\n\n                    \nstackdata\n \n=\n \nself\n.\nparse_stack_info\n(\n\n                        \nstr\n(\nresource\n.\nget\n(\n'PhysicalResourceId'\n)))\n\n                    \nregion\n \n=\n \nstackdata\n[\n'region'\n]\n\n                    \nself\n.\nget_resources_helper\n(\nresource\n.\nget\n(\n'PhysicalResourceId'\n),\n \nregion\n,\n \nl_resources\n,\n\n                                              \ninclude_stacks\n)\n\n                \n# else if resource is not a stack and has a physical resource id (NOTE: physical id will be missing if stack creation is failed)\n\n                \nelif\n \nresource\n.\nget\n(\n\n                        \n'ResourceType'\n)\n \n!=\n \n'AWS::CloudFormation::Stack'\n \nand\n \n'PhysicalResourceId'\n \nin\n \nresource\n:\n\n                    \nd\n \n=\n \n{\n'logicalId'\n:\n \nresource\n.\nget\n(\n'LogicalResourceId'\n),\n\n                         \n'physicalId'\n:\n \nresource\n.\nget\n(\n'PhysicalResourceId'\n),\n\n                         \n'resourceType'\n:\n \nresource\n.\nget\n(\n'ResourceType'\n)}\n\n                    \nl_resources\n.\nappend\n(\nd\n)\n\n        \nexcept\n \nException\n \nas\n \ne\n:\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n            \nsys\n.\nexit\n(\nF\n \n+\n \n\"Unable to get resources for stack \n%s\n\"\n \n%\n \nstackname\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_s3_url\n(\nself, key)\n\n    \n\n\n\n\n\n    \nReturns S3 url of a given object.\n\n\n:param key: Name of the object whose S3 url is being returned\n:return: S3 url of the given key\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_s3_url\n(\nself\n,\n \nkey\n):\n\n    \n\"\"\"\n\n\n    Returns S3 url of a given object.\n\n\n    :param key: Name of the object whose S3 url is being returned\n\n\n    :return: S3 url of the given key\n\n\n    \"\"\"\n\n    \nclient\n \n=\n \nboto3\n.\nclient\n(\n's3'\n,\n \nconfig\n=\nConfig\n(\nsignature_version\n=\n's3v4'\n))\n\n    \nbucket_location\n \n=\n \nclient\n.\nget_bucket_location\n(\n\n        \nBucket\n=\nself\n.\nget_s3bucket\n())\n\n    \nresult\n \n=\n \nclient\n.\nlist_objects\n(\nBucket\n=\nself\n.\nget_s3bucket\n(),\n\n                                 \nPrefix\n=\nself\n.\nget_project\n())\n\n    \ncontents\n \n=\n \nresult\n.\nget\n(\n'Contents'\n)\n\n    \nfor\n \ns3obj\n \nin\n \ncontents\n:\n\n        \nfor\n \nmetadata\n \nin\n \ns3obj\n.\nitems\n():\n\n            \nif\n \nmetadata\n[\n0\n]\n \n==\n \n'Key'\n:\n\n                \nif\n \nkey\n \nin\n \nmetadata\n[\n1\n]:\n\n                    \n# Finding exact match\n\n                    \nterms\n \n=\n \nmetadata\n[\n1\n]\n.\nsplit\n(\n\"/\"\n)\n\n                    \nif\n \nkey\n \n==\n \nterms\n[\n-\n1\n]:\n\n                        \nif\n \nbucket_location\n[\n\n                            \n'LocationConstraint'\n\n                        \n]\n \nis\n \nnot\n \nNone\n:\n\n                            \no_url\n \n=\n \n\"https://s3-{0}.{1}/{2}/{3}\"\n.\nformat\n(\n\n                                \nbucket_location\n[\n'LocationConstraint'\n],\n\n                                \n\"amazonaws.com\"\n,\n\n                                \nself\n.\nget_s3bucket\n(),\n\n                                \nmetadata\n[\n1\n])\n\n                            \nreturn\n \no_url\n\n                        \nelse\n:\n\n                            \namzns3\n \n=\n \n's3.amazonaws.com'\n\n                            \no_url\n \n=\n \n\"https://{0}/{1}/{2}\"\n.\nformat\n(\namzns3\n,\n \nself\n.\nget_s3bucket\n(),\n \nmetadata\n[\n1\n])\n\n                            \nreturn\n \no_url\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_s3bucket\n(\nself)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_s3bucket\n(\nself\n):\n\n    \nreturn\n \nstr\n(\nself\n.\ns3bucket\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_s3contents\n(\nurl)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \n@staticmethod\n\n\ndef\n \nget_s3contents\n(\nurl\n):\n\n    \npayload\n \n=\n \nrequests\n.\nget\n(\nurl\n)\n\n    \nreturn\n \npayload\n.\ntext\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_stackstatus\n(\nself, testdata_list, speed)\n\n    \n\n\n\n\n\n    \nGiven a list of TestData objects, this function checks the stack status\nof each CloudFormation stack and updates the corresponding TestData object\nwith the status.\n\n\n:param testdata_list: List of TestData object\n:param speed: Interval (in seconds) in which the status has to be checked in loop\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_stackstatus\n(\nself\n,\n \ntestdata_list\n,\n \nspeed\n):\n\n    \n\"\"\"\n\n\n    Given a list of TestData objects, this function checks the stack status\n\n\n    of each CloudFormation stack and updates the corresponding TestData object\n\n\n    with the status.\n\n\n    :param testdata_list: List of TestData object\n\n\n    :param speed: Interval (in seconds) in which the status has to be checked in loop\n\n\n    \"\"\"\n\n    \nactive_tests\n \n=\n \n1\n\n    \nprint\n(\n'\n\\n\n'\n)\n\n    \nwhile\n \nactive_tests\n \n>\n \n0\n:\n\n        \ncurrent_active_tests\n \n=\n \n0\n\n        \nprint\n(\nI\n \n+\n \n\"{}{} {} [{}]{}\"\n.\nformat\n(\n\n            \nheader\n,\n\n            \n'AWS REGION'\n.\nljust\n(\n15\n),\n\n            \n'CLOUDFORMATION STACK STATUS'\n.\nljust\n(\n25\n),\n\n            \n'CLOUDFORMATION STACK NAME'\n,\n\n            \nrst_color\n))\n\n        \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n            \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n                \nstackquery\n \n=\n \nself\n.\nstackcheck\n(\nstr\n(\nstack\n[\n'StackId'\n]))\n\n                \ncurrent_active_tests\n \n=\n \nstackquery\n[\n\n                                           \n3\n]\n \n+\n \ncurrent_active_tests\n\n                \nprint\n(\nI\n \n+\n \n\"{3}{0} {1} [{2}]{4}\"\n.\nformat\n(\n\n                    \nstackquery\n[\n1\n]\n.\nljust\n(\n15\n),\n\n                    \nstackquery\n[\n2\n]\n.\nljust\n(\n25\n),\n\n                    \nstackquery\n[\n0\n],\n\n                    \nhightlight\n,\n\n                    \nrst_color\n))\n\n                \nstack\n[\n'status'\n]\n \n=\n \nstackquery\n[\n2\n]\n\n                \nactive_tests\n \n=\n \ncurrent_active_tests\n\n                \ntime\n.\nsleep\n(\nspeed\n)\n\n        \nprint\n(\n'\n\\n\n'\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_template_file\n(\nself)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_template_file\n(\nself\n):\n\n    \nreturn\n \nself\n.\n_template_file\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_template_path\n(\nself)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_template_path\n(\nself\n):\n\n    \nreturn\n \nself\n.\ntemplate_path\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nget_test_region\n(\nself)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nget_test_region\n(\nself\n):\n\n    \nreturn\n \nself\n.\ntest_region\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nif_stackexists\n(\nself, stackname, region)\n\n    \n\n\n\n\n\n    \nThis function checks if a stack exist with the given stack name.\nReturns \"yes\" if exist, otherwise \"no\".\n\n\n:param stackname: Stack name\n:param region: AWS region\n\n\n:return: \"yes\" if stack exist, otherwise \"no\"\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nif_stackexists\n(\nself\n,\n \nstackname\n,\n \nregion\n):\n\n    \n\"\"\"\n\n\n    This function checks if a stack exist with the given stack name.\n\n\n    Returns \"yes\" if exist, otherwise \"no\".\n\n\n    :param stackname: Stack name\n\n\n    :param region: AWS region\n\n\n    :return: \"yes\" if stack exist, otherwise \"no\"\n\n\n    \"\"\"\n\n    \nexists\n \n=\n \nNone\n\n    \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n    \ntry\n:\n\n        \ncfn\n.\ndescribe_stacks\n(\nStackName\n=\nstackname\n)\n\n        \nexists\n \n=\n \n\"yes\"\n\n    \nexcept\n \nException\n \nas\n \ne\n:\n\n        \nif\n \nself\n.\nverbose\n:\n\n            \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n            \nexists\n \n=\n \n\"no\"\n\n    \nprint\n(\nI\n \n+\n \n\"Successfully Deleted[\n%s\n]\"\n \n%\n \nstackname\n)\n\n    \nreturn\n \nexists\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nparse_stack_info\n(\nself, stack_name)\n\n    \n\n\n\n\n\n    \nReturns a dictionary object containing the region and stack name.\n\n\n:param stack_name: Full stack name arn\n:return: Dictionary object containing the region and stack name\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nparse_stack_info\n(\nself\n,\n \nstack_name\n):\n\n    \n\"\"\"\n\n\n    Returns a dictionary object containing the region and stack name.\n\n\n    :param stack_name: Full stack name arn\n\n\n    :return: Dictionary object containing the region and stack name\n\n\n    \"\"\"\n\n    \nstack_info\n \n=\n \ndict\n()\n\n    \nregion_re\n \n=\n \nre\n.\ncompile\n(\n'(?<=:)(.\\w-.+(\\w*)-\\d)(?=:)'\n)\n\n    \nstack_name_re\n \n=\n \nre\n.\ncompile\n(\n'(?<=:stack/)(tCaT.*.)(?=/)'\n)\n\n    \nstack_info\n[\n'region'\n]\n \n=\n \nself\n.\nregxfind\n(\nregion_re\n,\n \nstack_name\n)\n\n    \nstack_info\n[\n'stack_name'\n]\n \n=\n \nself\n.\nregxfind\n(\nstack_name_re\n,\n \nstack_name\n)\n\n    \nreturn\n \nstack_info\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nregxfind\n(\nre_object, data_line)\n\n    \n\n\n\n\n\n    \nReturns the matching string.\n\n\n:param re_object: Regex object\n:param data_line: String to be searched\n\n\n:return: Matching String if found, otherwise return 'Not-found'\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \n@staticmethod\n\n\ndef\n \nregxfind\n(\nre_object\n,\n \ndata_line\n):\n\n    \n\"\"\"\n\n\n    Returns the matching string.\n\n\n    :param re_object: Regex object\n\n\n    :param data_line: String to be searched\n\n\n    :return: Matching String if found, otherwise return 'Not-found'\n\n\n    \"\"\"\n\n    \nsg\n \n=\n \nre_object\n.\nsearch\n(\ndata_line\n)\n\n    \nif\n \nsg\n:\n\n        \nreturn\n \nstr\n(\nsg\n.\ngroup\n())\n\n    \nelse\n:\n\n        \nreturn\n \nstr\n(\n'Not-found'\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nset_capabilities\n(\nself, ability)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nset_capabilities\n(\nself\n,\n \nability\n):\n\n    \nself\n.\ncapabilities\n.\nappend\n(\nability\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nset_config\n(\nself, config_yml)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nset_config\n(\nself\n,\n \nconfig_yml\n):\n\n    \nif\n \nos\n.\npath\n.\nisfile\n(\nconfig_yml\n):\n\n        \nself\n.\nconfig\n \n=\n \nconfig_yml\n\n    \nelse\n:\n\n        \nprint\n(\n\"Cannot locate file \n%s\n\"\n \n%\n \nconfig_yml\n)\n\n        \nexit\n(\n1\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nset_default_region\n(\nself, region)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nset_default_region\n(\nself\n,\n \nregion\n):\n\n    \nself\n.\ndefult_region\n \n=\n \nregion\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nset_docleanup\n(\nself, cleanup_value)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nset_docleanup\n(\nself\n,\n \ncleanup_value\n):\n\n    \nself\n.\nrun_cleanup\n \n=\n \ncleanup_value\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nset_parameter_file\n(\nself, parameter)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nset_parameter_file\n(\nself\n,\n \nparameter\n):\n\n    \nself\n.\n_parameter_file\n \n=\n \nparameter\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nset_parameter_path\n(\nself, parameter)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nset_parameter_path\n(\nself\n,\n \nparameter\n):\n\n    \nself\n.\nparameter_path\n \n=\n \nparameter\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nset_password\n(\nself, password)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nset_password\n(\nself\n,\n \npassword\n):\n\n    \nself\n.\n_password\n \n=\n \npassword\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nset_project\n(\nself, project)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nset_project\n(\nself\n,\n \nproject\n):\n\n    \nself\n.\nproject\n \n=\n \nproject\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nset_s3bucket\n(\nself, bucket)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nset_s3bucket\n(\nself\n,\n \nbucket\n):\n\n    \nself\n.\ns3bucket\n \n=\n \nbucket\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nset_template_file\n(\nself, template)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nset_template_file\n(\nself\n,\n \ntemplate\n):\n\n    \nself\n.\n_template_file\n \n=\n \ntemplate\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nset_template_path\n(\nself, template)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nset_template_path\n(\nself\n,\n \ntemplate\n):\n\n    \nself\n.\ntemplate_path\n \n=\n \ntemplate\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nset_test_region\n(\nself, region_list)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nset_test_region\n(\nself\n,\n \nregion_list\n):\n\n    \nself\n.\ntest_region\n \n=\n \n[]\n\n    \nfor\n \nregion\n \nin\n \nregion_list\n:\n\n        \nself\n.\ntest_region\n.\nappend\n(\nregion\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nstackcheck\n(\nself, stack_id)\n\n    \n\n\n\n\n\n    \nGiven the stack id, this function returns the status of the stack as\na list with stack name, region, and status as list items, in the respective\norder.\n\n\n:param stack_id: CloudFormation stack id\n\n\n:return: List containing the stack name, region and stack status in the\n    respective order.\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nstackcheck\n(\nself\n,\n \nstack_id\n):\n\n    \n\"\"\"\n\n\n    Given the stack id, this function returns the status of the stack as\n\n\n    a list with stack name, region, and status as list items, in the respective\n\n\n    order.\n\n\n    :param stack_id: CloudFormation stack id\n\n\n    :return: List containing the stack name, region and stack status in the\n\n\n        respective order.\n\n\n    \"\"\"\n\n    \nstackdata\n \n=\n \nself\n.\nparse_stack_info\n(\nstack_id\n)\n\n    \nregion\n \n=\n \nstackdata\n[\n'region'\n]\n\n    \nstack_name\n \n=\n \nstackdata\n[\n'stack_name'\n]\n\n    \ntest_info\n \n=\n \n[]\n\n    \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n    \n# noinspection PyBroadException\n\n    \ntry\n:\n\n        \ntest_query\n \n=\n \n(\ncfn\n.\ndescribe_stacks\n(\nStackName\n=\nstack_name\n))\n\n        \nfor\n \nresult\n \nin\n \ntest_query\n[\n'Stacks'\n]:\n\n            \ntest_info\n.\nappend\n(\nstack_name\n)\n\n            \ntest_info\n.\nappend\n(\nregion\n)\n\n            \ntest_info\n.\nappend\n(\nresult\n.\nget\n(\n'StackStatus'\n))\n\n            \nif\n \nresult\n.\nget\n(\n\n                    \n'StackStatus'\n)\n \n==\n \n'CREATE_IN_PROGRESS'\n \nor\n \nresult\n.\nget\n(\n'StackStatus'\n)\n \n==\n \n'DELETE_IN_PROGRESS'\n:\n\n                \ntest_info\n.\nappend\n(\n1\n)\n\n            \nelse\n:\n\n                \ntest_info\n.\nappend\n(\n0\n)\n\n    \nexcept\n \nException\n:\n\n        \ntest_info\n.\nappend\n(\nstack_name\n)\n\n        \ntest_info\n.\nappend\n(\nregion\n)\n\n        \ntest_info\n.\nappend\n(\n\"STACK_DELETED\"\n)\n\n        \ntest_info\n.\nappend\n(\n0\n)\n\n    \nreturn\n \ntest_info\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nstackcreate\n(\nself, taskcat_cfg, test_list, sprefix)\n\n    \n\n\n\n\n\n    \nThis function creates CloudFormation stack for the given tests.\n\n\n:param taskcat_cfg: TaskCat config as yaml object\n:param test_list: List of tests\n:param sprefix: Special prefix as string. Purpose of this param is to use it for tagging\n    the stack.\n\n\n:return: List of TestData objects\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nstackcreate\n(\nself\n,\n \ntaskcat_cfg\n,\n \ntest_list\n,\n \nsprefix\n):\n\n    \n\"\"\"\n\n\n    This function creates CloudFormation stack for the given tests.\n\n\n    :param taskcat_cfg: TaskCat config as yaml object\n\n\n    :param test_list: List of tests\n\n\n    :param sprefix: Special prefix as string. Purpose of this param is to use it for tagging\n\n\n        the stack.\n\n\n    :return: List of TestData objects\n\n\n    \"\"\"\n\n    \ntestdata_list\n \n=\n \n[]\n\n    \nself\n.\nset_capabilities\n(\n'CAPABILITY_IAM'\n)\n\n    \nfor\n \ntest\n \nin\n \ntest_list\n:\n\n        \ntestdata\n \n=\n \nTestData\n()\n\n        \ntestdata\n.\nset_test_name\n(\ntest\n)\n\n        \nprint\n(\n\"{0}{1}|PREPARING TO LAUNCH => {2}{3}\"\n.\nformat\n(\nI\n,\n \nheader\n,\n \ntest\n,\n \nrst_color\n))\n\n        \nsname\n \n=\n \nstr\n(\nsig\n)\n\n        \nstackname\n \n=\n \nsname\n \n+\n \n'-'\n \n+\n \nsprefix\n \n+\n \n'-'\n \n+\n \ntest\n \n+\n \n'-'\n \n+\n \njobid\n[:\n4\n]\n\n        \nself\n.\ndefine_tests\n(\ntaskcat_cfg\n,\n \ntest\n)\n\n        \nfor\n \nregion\n \nin\n \nself\n.\nget_test_region\n():\n\n            \nprint\n(\nI\n \n+\n \n\"Preparing to launch in region [\n%s\n] \"\n \n%\n \nregion\n)\n\n            \ntry\n:\n\n                \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n                \ns_parmsdata\n \n=\n \nrequests\n.\nget\n(\nself\n.\nget_parameter_path\n())\n.\ntext\n\n                \ns_parms\n \n=\n \njson\n.\nloads\n(\ns_parmsdata\n)\n\n                \n# gentype = None\n\n                \n# Auto-generated stack inputs\n\n                \n# (Passwords)\n\n                \n# Value that matches the following pattern will be replaced\n\n                \n# - Parameters must start with $[\n\n                \n# - Parameters must end with ]\n\n                \n# - genpass in invoked when _genpass_X is found\n\n                \n# - X is lengeth of the string\n\n                \n# Example: $[taskcat_genpass_8]\n\n                \n# Optionally - you can specify the type of password by adding\n\n                \n# - A aplha-numeric passwords\n\n                \n# - S passwords with special characters\n\n                \n# Example: $[taskcat_genpass_8A]\n\n                \n# Generates: tI8zN3iX8\n\n                \n# or\n\n                \n# Example: $[taskcat_genpass_8S]\n\n                \n# Generates: mA5@cB5!\n\n                \n# (Availablity Zones)\n\n                \n# Value that matches the following pattern will be replaced\n\n                \n# - Parameters must start with $[\n\n                \n# - Parameters must end with ]\n\n                \n# - genaz in invoked when _genaz_X is found\n\n                \n# - A number of AZ's will be selected from the region\n\n                \n#   the stack is attempting to launch\n\n                \n# Example: $[taskcat_genaz_2] (if the region is us-east-2)\n\n                \n# Generates: us-east-1a, us-east-2b\n\n                \nfor\n \nparmdict\n \nin\n \ns_parms\n:\n\n                    \nfor\n \n_\n \nin\n \nparmdict\n:\n\n                        \nparam_value\n \n=\n \nparmdict\n[\n'ParameterValue'\n]\n\n                        \n# Determines the size of the password to generate\n\n                        \ncount_re\n \n=\n \nre\n.\ncompile\n(\n'(?!\\w+_genpass_)\\d{1,2}'\n)\n\n                        \n# Determines the type of password to generate\n\n                        \ngentype_re\n \n=\n \nre\n.\ncompile\n(\n\n                            \n'(?!\\w+_genpass_\\d{1,2}])([AS])'\n)\n\n                        \n# Determines if _genpass has been requested\n\n                        \ngenpass_re\n \n=\n \nre\n.\ncompile\n(\n\n                            \n'\\$\\[\\w+_genpass?(\\w)_\\d{1,2}\\w?]$'\n)\n\n                        \n# Determines if _genaz has been requested\n\n                        \ngenaz_re\n \n=\n \nre\n.\ncompile\n(\n'\\$\\[\\w+_genaz_\\d]'\n)\n\n                        \n# Determines if s3 replacement was requested\n\n                        \ngets3replace\n \n=\n \nre\n.\ncompile\n(\n'\\$\\[\\w+_url_.+]$'\n)\n\n                        \ngeturl_re\n \n=\n \nre\n.\ncompile\n(\n'(?<=._url_)(.+)(?=]$)'\n)\n\n                        \nif\n \ngets3replace\n.\nsearch\n(\nparam_value\n):\n\n                            \nurl\n \n=\n \nself\n.\nregxfind\n(\ngeturl_re\n,\n \nparam_value\n)\n\n                            \nparam_value\n \n=\n \nself\n.\nget_s3contents\n(\nurl\n)\n\n                            \nif\n \nself\n.\nverbose\n:\n\n                                \nprint\n(\n\"Raw content of url {}\"\n.\nformat\n(\nurl\n))\n\n                                \nprint\n(\nparam_value\n)\n\n                            \nparmdict\n[\n'ParameterValue'\n]\n \n=\n \nparam_value\n\n                        \n# Autogenerated value to password input in runtime\n\n                        \nif\n \ngenpass_re\n.\nsearch\n(\nparam_value\n):\n\n                            \npasslen\n \n=\n \nint\n(\n\n                                \nself\n.\nregxfind\n(\ncount_re\n,\n \nparam_value\n))\n\n                            \ngentype\n \n=\n \nself\n.\nregxfind\n(\n\n                                \ngentype_re\n,\n \nparam_value\n)\n\n                            \nif\n \nnot\n \ngentype\n:\n\n                                \n# Set default password type\n\n                                \n# A vaule of D will generate a simple alpha\n\n                                \n# aumeric password\n\n                                \ngentype\n \n=\n \n'D'\n\n                            \nif\n \npasslen\n:\n\n                                \nif\n \nself\n.\nverbose\n:\n\n                                    \nprint\n(\n\"{}AutoGen values for {}\"\n.\nformat\n(\nD\n,\n \nparam_value\n))\n\n                                \nparam_value\n \n=\n \nself\n.\ngenpassword\n(\n\n                                    \npasslen\n,\n \ngentype\n)\n\n                                \nparmdict\n[\n'ParameterValue'\n]\n \n=\n \nparam_value\n\n                        \nif\n \ngenaz_re\n.\nsearch\n(\nparam_value\n):\n\n                            \nnumazs\n \n=\n \nint\n(\n\n                                \nself\n.\nregxfind\n(\ncount_re\n,\n \nparam_value\n))\n\n                            \nif\n \nnumazs\n:\n\n                                \nif\n \nself\n.\nverbose\n:\n\n                                    \nprint\n(\nD\n \n+\n \n\"Selecting availability zones\"\n)\n\n                                    \nprint\n(\nD\n \n+\n \n\"Requested \n%s\n az's\"\n \n%\n \nnumazs\n)\n\n                                \nparam_value\n \n=\n \nself\n.\nget_available_azs\n(\n\n                                    \nregion\n,\n\n                                    \nnumazs\n)\n\n                                \nparmdict\n[\n'ParameterValue'\n]\n \n=\n \nparam_value\n\n                            \nelse\n:\n\n                                \nprint\n(\nI\n \n+\n \n\"$[taskcat_genaz_(!)]\"\n)\n\n                                \nprint\n(\nI\n \n+\n \n\"Number of az's not specified!\"\n)\n\n                                \nprint\n(\nI\n \n+\n \n\" - (Defaulting to 1 az)\"\n)\n\n                                \nparam_value\n \n=\n \nself\n.\nget_available_azs\n(\n\n                                    \nregion\n,\n\n                                    \n1\n)\n\n                                \nparmdict\n[\n'ParameterValue'\n]\n \n=\n \nparam_value\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nD\n \n+\n \n\"Creating Boto Connection region=\n%s\n\"\n \n%\n \nregion\n)\n\n                    \nprint\n(\nD\n \n+\n \n\"StackName=\"\n \n+\n \nstackname\n)\n\n                    \nprint\n(\nD\n \n+\n \n\"DisableRollback=True\"\n)\n\n                    \nprint\n(\nD\n \n+\n \n\"TemplateURL=\n%s\n\"\n \n%\n \nself\n.\nget_template_path\n())\n\n                    \nprint\n(\nD\n \n+\n \n\"Capabilities=\n%s\n\"\n \n%\n \nself\n.\nget_capabilities\n())\n\n                    \nprint\n(\nD\n \n+\n \n\"Parameters:\"\n)\n\n                    \nprint\n(\njson\n.\ndumps\n(\ns_parms\n,\n \nsort_keys\n=\nTrue\n,\n \nindent\n=\n11\n,\n \nseparators\n=\n(\n','\n,\n \n': '\n)))\n\n                \nstackdata\n \n=\n \ncfn\n.\ncreate_stack\n(\n\n                    \nStackName\n=\nstackname\n,\n\n                    \nDisableRollback\n=\nTrue\n,\n\n                    \nTemplateURL\n=\nself\n.\nget_template_path\n(),\n\n                    \nParameters\n=\ns_parms\n,\n\n                    \nCapabilities\n=\nself\n.\nget_capabilities\n())\n\n                \ntestdata\n.\nadd_test_stack\n(\nstackdata\n)\n\n            \nexcept\n \nException\n \nas\n \ne\n:\n\n                \nif\n \nself\n.\nverbose\n:\n\n                    \nprint\n(\nE\n \n+\n \nstr\n(\ne\n))\n\n                \nsys\n.\nexit\n(\nF\n \n+\n \n\"Cannot launch \n%s\n\"\n \n%\n \nself\n.\nget_template_file\n())\n\n        \ntestdata_list\n.\nappend\n(\ntestdata\n)\n\n    \nprint\n(\n'\n\\n\n'\n)\n\n    \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n        \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n            \nprint\n(\n\"{} |{}LAUNCHING STACKS{}\"\n.\nformat\n(\nself\n.\nnametag\n,\n \nheader\n,\n \nrst_color\n))\n\n            \nprint\n(\n\"{} {}{} {} {}\"\n.\nformat\n(\n\n                \nI\n,\n\n                \nheader\n,\n\n                \ntest\n.\nget_test_name\n(),\n\n                \nstr\n(\nstack\n[\n'StackId'\n])\n.\nsplit\n(\n':stack'\n,\n \n1\n),\n\n                \nrst_color\n))\n\n    \nreturn\n \ntestdata_list\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nstackdelete\n(\nself, testdata_list)\n\n    \n\n\n\n\n\n    \nThis function deletes the CloudFormation stacks of the given tests.\n\n\n:param testdata_list: List of TestData objects\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nstackdelete\n(\nself\n,\n \ntestdata_list\n):\n\n    \n\"\"\"\n\n\n    This function deletes the CloudFormation stacks of the given tests.\n\n\n    :param testdata_list: List of TestData objects\n\n\n    \"\"\"\n\n    \nfor\n \ntest\n \nin\n \ntestdata_list\n:\n\n        \nfor\n \nstack\n \nin\n \ntest\n.\nget_test_stacks\n():\n\n            \nstackdata\n \n=\n \nself\n.\nparse_stack_info\n(\n\n                \nstr\n(\nstack\n[\n'StackId'\n]))\n\n            \nregion\n \n=\n \nstackdata\n[\n'region'\n]\n\n            \nstack_name\n \n=\n \nstackdata\n[\n'stack_name'\n]\n\n            \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nregion\n)\n\n            \ncfn\n.\ndelete_stack\n(\nStackName\n=\nstack_name\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nstage_in_s3\n(\nself, taskcat_cfg)\n\n    \n\n\n\n\n\n    \nUpload templates and other artifacts to s3.\n\n\nThis function creates the s3 bucket with name provided in the config yml file. If\nno bucket name provided, it creates the s3 bucket using project name provided in\nconfig yml file. And uploads the templates and other artifacts to the s3 bucket.\n\n\n:param taskcat_cfg: Taskcat configuration provided in yml file\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nstage_in_s3\n(\nself\n,\n \ntaskcat_cfg\n):\n\n    \n\"\"\"\n\n\n    Upload templates and other artifacts to s3.\n\n\n    This function creates the s3 bucket with name provided in the config yml file. If\n\n\n    no bucket name provided, it creates the s3 bucket using project name provided in\n\n\n    config yml file. And uploads the templates and other artifacts to the s3 bucket.\n\n\n    :param taskcat_cfg: Taskcat configuration provided in yml file\n\n\n    \"\"\"\n\n    \nprint\n(\n'\n\\n\n'\n)\n\n    \nprint\n(\n\"{} |CONTENTS OF  S3 BUCKET{}\"\n.\nformat\n(\nself\n.\nnametag\n,\n \nheader\n,\n \nrst_color\n))\n\n    \nproject\n \n=\n \ntaskcat_cfg\n[\n'global'\n][\n'qsname'\n]\n\n    \ns3\n \n=\n \nboto3\n.\nresource\n(\n's3'\n)\n\n    \nif\n \n's3bucket'\n \nin\n \ntaskcat_cfg\n[\n'global'\n]\n.\nkeys\n():\n\n        \nbucket\n \n=\n \ns3\n.\nBucket\n(\ntaskcat_cfg\n[\n'global'\n][\n's3bucket'\n])\n\n        \nprint\n(\nI\n \n+\n \n\"Staging Bucket => \"\n \n+\n \nbucket\n.\nname\n)\n\n        \nself\n.\nset_s3bucket\n(\nbucket\n.\nname\n)\n\n    \nelse\n:\n\n        \nauto_bucket\n \n=\n \n'taskcat-'\n \n+\n \nproject\n \n+\n \n\"-\"\n \n+\n \njobid\n[:\n8\n]\n\n        \nprint\n(\nI\n \n+\n \n\"Staging Bucket => \"\n \n+\n \nauto_bucket\n)\n\n        \ns3\n.\ncreate_bucket\n(\nBucket\n=\nauto_bucket\n)\n\n        \nbucket\n \n=\n \ns3\n.\nBucket\n(\nauto_bucket\n)\n\n        \nself\n.\nset_s3bucket\n(\nbucket\n.\nname\n)\n\n    \nself\n.\nset_project\n(\nproject\n)\n\n    \nif\n \nos\n.\npath\n.\nisdir\n(\nproject\n):\n\n        \nfsmap\n \n=\n \nbuildmap\n(\n'.'\n,\n \nproject\n)\n\n    \nelse\n:\n\n        \nexample1\n \n=\n \n'''\n\n\n        # Name of example project = [projectx]\n\n\n        # Command issued to run taskcat = taskcat.py -c projectx/ci/config.yml\n\n\n        Hint: if taskcat.py is not in your path specify the full path to taskcat.py\n\n\n        \n\n\n        # Example of expected directory/project structure\n\n\n        projectx\n\n\n        \u251c\u2500\u2500 LICENSE.txt\n\n\n        \u251c\u2500\u2500 ci\n\n\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 taskcat.yml         # TaskCat Configuration file\n\n\n        \u2502\u00a0\u00a0 \u251c\u2500\u2500 projectx-input.json # Inputs to pass during stackcreation\n\n\n        \u251c\u2500\u2500 scripts\n\n\n        \u2502\u00a0\u00a0 \u2514\u2500\u2500 project-userdata.sh # Any scripts that is part of this project\n\n\n        \u2514\u2500\u2500 templates\n\n\n            \u2514\u2500\u2500 projectx.template\n\n\n        # Contents of taskcat.yml\n\n\n        global:\n\n\n          qsname: projectx\n\n\n          regions:\n\n\n            - us-east-1\n\n\n            - us-west-1\n\n\n            - us-west-2\n\n\n         \n\n\n        tests:\n\n\n          projectx-test:\n\n\n            template_file: projectx.template\n\n\n            parameter_input: projectx-input.json\n\n\n            '''\n\n        \nprint\n(\n'''\n\\t\\t\n Hint: The name specfied as value of qsname ({})\n\n\n                must match the root directory of your project'''\n.\nformat\n(\nproject\n))\n\n        \nprint\n(\n\"{0}!Cannot find directory [{1}] in {2}\"\n.\nformat\n(\nE\n,\n \nproject\n,\n \nos\n.\ngetcwd\n()))\n\n        \nprint\n(\n\"\n\\n\\t\n    Example:{}\"\n.\nformat\n(\nexample1\n,\n \n'\n\\n\n'\n))\n\n        \nprint\n(\nI\n \n+\n \n\"Please cd to where you project is located\"\n)\n\n        \nsys\n.\nexit\n(\n1\n)\n\n    \nfor\n \nfilename\n \nin\n \nfsmap\n:\n\n        \ntry\n:\n\n            \nupload\n \n=\n \nre\n.\nsub\n(\n'^./'\n,\n \n''\n,\n \nfilename\n)\n\n            \nbucket\n.\nAcl\n()\n.\nput\n(\nACL\n=\n'public-read'\n)\n\n            \nbucket\n.\nupload_file\n(\nfilename\n,\n\n                               \nupload\n,\n\n                               \nExtraArgs\n=\n{\n'ACL'\n:\n \n'public-read'\n})\n\n        \nexcept\n \nException\n \nas\n \ne\n:\n\n            \nprint\n(\n\"Cannot Upload to bucket => \n%s\n\"\n \n%\n \nbucket\n.\nname\n)\n\n            \nprint\n(\nE\n \n+\n \n\"Check that you bucketname is correct\"\n)\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n            \nsys\n.\nexit\n(\n1\n)\n\n    \nfor\n \nobj\n \nin\n \nbucket\n.\nobjects\n.\nall\n():\n\n        \no\n \n=\n \nstr\n(\n'{0}/{1}'\n.\nformat\n(\nself\n.\nget_s3bucket\n(),\n \nobj\n.\nkey\n))\n\n        \nprint\n(\no\n)\n\n    \nprint\n(\n'\n\\n\n'\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nvalidate_json\n(\nself, jsonin)\n\n    \n\n\n\n\n\n    \nThis function validates the given JSON.\n\n\n:param jsonin: Json object to be validated\n\n\n:return: TRUE if given Json is valid, FALSE otherwise.\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nvalidate_json\n(\nself\n,\n \njsonin\n):\n\n    \n\"\"\"\n\n\n    This function validates the given JSON.\n\n\n    :param jsonin: Json object to be validated\n\n\n    :return: TRUE if given Json is valid, FALSE otherwise.\n\n\n    \"\"\"\n\n    \ntry\n:\n\n        \nparms\n \n=\n \njson\n.\nloads\n(\njsonin\n)\n\n        \nif\n \nself\n.\nverbose\n:\n\n            \nprint\n(\njson\n.\ndumps\n(\nparms\n,\n \nindent\n=\n11\n,\n \nseparators\n=\n(\n','\n,\n \n': '\n)))\n\n    \nexcept\n \nValueError\n \nas\n \ne\n:\n\n        \nprint\n(\nE\n \n+\n \nstr\n(\ne\n))\n\n        \nreturn\n \nFalse\n\n    \nreturn\n \nTrue\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nvalidate_parameters\n(\nself, taskcat_cfg, test_list)\n\n    \n\n\n\n\n\n    \nThis function validates the parameters file of the CloudFormation template.\n\n\n:param taskcat_cfg: TaskCat config yaml object\n:param test_list: List of tests\n\n\n:return: TRUE if the parameters file is valid, else FALSE\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nvalidate_parameters\n(\nself\n,\n \ntaskcat_cfg\n,\n \ntest_list\n):\n\n    \n\"\"\"\n\n\n    This function validates the parameters file of the CloudFormation template.\n\n\n    :param taskcat_cfg: TaskCat config yaml object\n\n\n    :param test_list: List of tests\n\n\n    :return: TRUE if the parameters file is valid, else FALSE\n\n\n    \"\"\"\n\n    \nfor\n \ntest\n \nin\n \ntest_list\n:\n\n        \nself\n.\ndefine_tests\n(\ntaskcat_cfg\n,\n \ntest\n)\n\n        \nprint\n(\nself\n.\nnametag\n \n+\n \n\" |Validate JSON input in test[\n%s\n]\"\n \n%\n \ntest\n)\n\n        \nif\n \nself\n.\nverbose\n:\n\n            \nprint\n(\nD\n \n+\n \n\"parameter_path = \n%s\n\"\n \n%\n \nself\n.\nget_parameter_path\n())\n\n        \ninputparms\n \n=\n \nrequests\n.\nget\n(\nself\n.\nget_parameter_path\n())\n.\ntext\n\n        \njsonstatus\n \n=\n \nself\n.\nvalidate_json\n(\ninputparms\n)\n\n        \nif\n \nself\n.\nverbose\n:\n\n            \nprint\n(\nD\n \n+\n \n\"jsonstatus = \n%s\n\"\n \n%\n \njsonstatus\n)\n\n        \nif\n \njsonstatus\n:\n\n            \nprint\n(\nP\n \n+\n \n\"Validated [\n%s\n]\"\n \n%\n \nself\n.\nget_parameter_file\n())\n\n        \nelse\n:\n\n            \nprint\n(\nD\n \n+\n \n\"parameter_file = \n%s\n\"\n \n%\n \nself\n.\nget_parameter_file\n())\n\n            \nsys\n.\nexit\n(\nF\n \n+\n \n\"Cannot validate \n%s\n\"\n \n%\n \nself\n.\nget_parameter_file\n())\n\n    \nreturn\n \nTrue\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nvalidate_template\n(\nself, taskcat_cfg, test_list)\n\n    \n\n\n\n\n\n    \nReturns TRUE if all the template files are valid, otherwise FALSE.\n\n\n:param taskcat_cfg: TaskCat config object\n:param test_list: List of tests\n\n\n:return: TRUE if templates are valid, else FALSE\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nvalidate_template\n(\nself\n,\n \ntaskcat_cfg\n,\n \ntest_list\n):\n\n    \n\"\"\"\n\n\n    Returns TRUE if all the template files are valid, otherwise FALSE.\n\n\n    :param taskcat_cfg: TaskCat config object\n\n\n    :param test_list: List of tests\n\n\n    :return: TRUE if templates are valid, else FALSE\n\n\n    \"\"\"\n\n    \n# Load global regions\n\n    \nself\n.\nset_test_region\n(\nself\n.\nget_global_region\n(\ntaskcat_cfg\n))\n\n    \nfor\n \ntest\n \nin\n \ntest_list\n:\n\n        \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Validate Template in test[\n%s\n]\"\n \n%\n \ntest\n)\n\n        \nself\n.\ndefine_tests\n(\ntaskcat_cfg\n,\n \ntest\n)\n\n        \ntry\n:\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \n\"Default region [\n%s\n]\"\n \n%\n \nself\n.\nget_default_region\n())\n\n            \ncfn\n \n=\n \nboto3\n.\nclient\n(\n'cloudformation'\n,\n \nself\n.\nget_default_region\n())\n\n            \ncfn\n.\nvalidate_template\n(\nTemplateURL\n=\nself\n.\nget_s3_url\n(\nself\n.\nget_template_file\n()))\n\n            \nresult\n \n=\n \ncfn\n.\nvalidate_template\n(\nTemplateURL\n=\nself\n.\nget_s3_url\n(\nself\n.\nget_template_file\n()))\n\n            \nprint\n(\nP\n \n+\n \n\"Validated [\n%s\n]\"\n \n%\n \nself\n.\nget_template_file\n())\n\n            \ncfn_result\n \n=\n \n(\nresult\n[\n'Description'\n])\n\n            \nprint\n(\nI\n \n+\n \n\"Description  [\n%s\n]\"\n \n%\n \ntextwrap\n.\nfill\n(\ncfn_result\n))\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \ncfn_params\n \n=\n \njson\n.\ndumps\n(\nresult\n[\n'Parameters'\n],\n \nindent\n=\n11\n,\n \nseparators\n=\n(\n','\n,\n \n': '\n))\n\n                \nprint\n(\nD\n \n+\n \n\"Parameters:\"\n)\n\n                \nprint\n(\ncfn_params\n)\n\n        \nexcept\n \nException\n \nas\n \ne\n:\n\n            \nif\n \nself\n.\nverbose\n:\n\n                \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n            \nsys\n.\nexit\n(\nF\n \n+\n \n\"Cannot validate \n%s\n\"\n \n%\n \nself\n.\nget_template_file\n())\n\n    \nprint\n(\n'\n\\n\n'\n)\n\n    \nreturn\n \nTrue\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nvalidate_yaml\n(\nself, yaml_file)\n\n    \n\n\n\n\n\n    \nThis function validates the given yaml file.\n\n\n:param yaml_file: Yaml file name\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nvalidate_yaml\n(\nself\n,\n \nyaml_file\n):\n\n    \n\"\"\"\n\n\n    This function validates the given yaml file.\n\n\n    :param yaml_file: Yaml file name\n\n\n    \"\"\"\n\n    \nprint\n(\n'\n\\n\n'\n)\n\n    \nrun_tests\n \n=\n \n[]\n\n    \nrequired_global_keys\n \n=\n \n[\n\n        \n'qsname'\n,\n\n        \n'owner'\n,\n\n        \n'reporting'\n,\n\n        \n'regions'\n\n    \n]\n\n    \nrequired_test_parameters\n \n=\n \n[\n\n        \n'template_file'\n,\n\n        \n'parameter_input'\n\n    \n]\n\n    \ntry\n:\n\n        \nif\n \nos\n.\npath\n.\nisfile\n(\nyaml_file\n):\n\n            \nprint\n(\nself\n.\nnametag\n \n+\n \n\" :Reading Config form: {0}\"\n.\nformat\n(\nyaml_file\n))\n\n            \nwith\n \nopen\n(\nyaml_file\n,\n \n'r'\n)\n \nas\n \ncheckyaml\n:\n\n                \ncfg_yml\n \n=\n \nyaml\n.\nload\n(\ncheckyaml\n.\nread\n())\n\n                \nfor\n \nkey\n \nin\n \nrequired_global_keys\n:\n\n                    \nif\n \nkey\n \nin\n \ncfg_yml\n[\n'global'\n]\n.\nkeys\n():\n\n                        \npass\n\n                    \nelse\n:\n\n                        \nprint\n(\n\"global:\n%s\n missing from \"\n \n%\n \nkey\n \n+\n \nyaml_file\n)\n\n                        \nsys\n.\nexit\n(\n1\n)\n\n                \nfor\n \ndefined\n \nin\n \ncfg_yml\n[\n'tests'\n]\n.\nkeys\n():\n\n                    \nrun_tests\n.\nappend\n(\ndefined\n)\n\n                    \nprint\n(\nself\n.\nnametag\n \n+\n \n\" |Queing test => \n%s\n \"\n \n%\n \ndefined\n)\n\n                    \nfor\n \nparms\n \nin\n \ncfg_yml\n[\n'tests'\n][\ndefined\n]\n.\nkeys\n():\n\n                        \nfor\n \nkey\n \nin\n \nrequired_test_parameters\n:\n\n                            \nif\n \nkey\n \nin\n \ncfg_yml\n[\n'tests'\n][\ndefined\n]\n.\nkeys\n():\n\n                                \npass\n\n                            \nelse\n:\n\n                                \nprint\n(\n\"No key \n%s\n in test\"\n \n%\n \nkey\n \n+\n \ndefined\n)\n\n                                \nprint\n(\nE\n \n+\n \n\"While inspecting: \"\n \n+\n \nparms\n)\n\n                                \nsys\n.\nexit\n(\n1\n)\n\n        \nelse\n:\n\n            \nprint\n(\nE\n \n+\n \n\"Cannot open [\n%s\n]\"\n \n%\n \nyaml_file\n)\n\n            \nsys\n.\nexit\n(\n1\n)\n\n    \nexcept\n \nException\n \nas\n \ne\n:\n\n        \nprint\n(\nE\n \n+\n \n\"config.yml [\n%s\n] is not formatted well!!\"\n \n%\n \nyaml_file\n)\n\n        \nif\n \nself\n.\nverbose\n:\n\n            \nprint\n(\nD\n \n+\n \nstr\n(\ne\n))\n\n        \nsys\n.\nexit\n(\n1\n)\n\n    \nreturn\n \nrun_tests\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nwelcome\n(\nself, prog_name='taskcat.io')\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nwelcome\n(\nself\n,\n \nprog_name\n=\n'taskcat.io'\n):\n\n    \nbanner\n \n=\n \npyfiglet\n.\nFiglet\n(\nfont\n=\n'standard'\n)\n\n    \nself\n.\nbanner\n \n=\n \nbanner\n\n    \nprint\n(\n\"{0}\"\n.\nformat\n(\nbanner\n.\nrenderText\n(\nprog_name\n),\n \n'\n\\n\n'\n))\n\n    \nprint\n(\n\"version \n%s\n\"\n \n%\n \nversion\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \nwrite_logs\n(\nself, stack_id, logpath)\n\n    \n\n\n\n\n\n    \nThis function writes the event logs of the given stack and all the child stacks to a given file.\n:param stack_id: Stack Id\n:param logpath: Log file path\n:return:\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \nwrite_logs\n(\nself\n,\n \nstack_id\n,\n \nlogpath\n):\n\n    \n\"\"\"\n\n\n    This function writes the event logs of the given stack and all the child stacks to a given file.\n\n\n    :param stack_id: Stack Id\n\n\n    :param logpath: Log file path\n\n\n    :return: \n\n\n    \"\"\"\n\n    \nstackinfo\n \n=\n \nself\n.\nparse_stack_info\n(\nstr\n(\nstack_id\n))\n\n    \nstackname\n \n=\n \nstr\n(\nstackinfo\n[\n'stack_name'\n])\n\n    \nregion\n \n=\n \nstr\n(\nstackinfo\n[\n'region'\n])\n\n    \n# Get stack resources\n\n    \ncfnlogs\n \n=\n \nself\n.\nget_cfnlogs\n(\nstackname\n,\n \nregion\n)\n\n    \nif\n \ncfnlogs\n[\n0\n][\n'ResourceStatus'\n]\n \n!=\n \n'CREATE_COMPLETE'\n:\n\n        \nif\n \n'ResourceStatusReason'\n \nin\n \ncfnlogs\n[\n0\n]:\n\n            \nreason\n \n=\n \ncfnlogs\n[\n0\n][\n'ResourceStatusReason'\n]\n\n        \nelse\n:\n\n            \nreason\n \n=\n \n'Unknown'\n\n    \nelse\n:\n\n        \nreason\n \n=\n \n\"Stack launch was successful\"\n\n    \nprint\n(\n\"\n\\t\n |StackName: \"\n \n+\n \nstackname\n)\n\n    \nprint\n(\n\"\n\\t\n |Region: \"\n \n+\n \nregion\n)\n\n    \nprint\n(\n\"\n\\t\n |Logging to: \"\n \n+\n \nlogpath\n)\n\n    \nprint\n(\n\"\n\\t\n |Tested on: \"\n \n+\n \nstr\n(\ndatetime\n.\ndatetime\n.\nnow\n()\n.\nstrftime\n(\n\"%A, \n%d\n. %B %Y %I:%M%p\"\n)))\n\n    \nprint\n(\n\"------------------------------------------------------------------------------------------\"\n)\n\n    \nprint\n(\n\"ResourceStatusReason: \"\n)\n\n    \nprint\n(\ntextwrap\n.\nfill\n(\nstr\n(\nreason\n),\n \n85\n))\n\n    \nprint\n(\n\"==========================================================================================\"\n)\n\n    \nwith\n \nopen\n(\nlogpath\n,\n \n\"a\"\n)\n \nas\n \nlog_output\n:\n\n        \nlog_output\n.\nwrite\n(\n\"-----------------------------------------------------------------------------\n\\n\n\"\n)\n\n        \nlog_output\n.\nwrite\n(\n\"Region: \"\n \n+\n \nregion\n \n+\n \n\"\n\\n\n\"\n)\n\n        \nlog_output\n.\nwrite\n(\n\"StackName: \"\n \n+\n \nstackname\n \n+\n \n\"\n\\n\n\"\n)\n\n        \nlog_output\n.\nwrite\n(\n\"*****************************************************************************\n\\n\n\"\n)\n\n        \nlog_output\n.\nwrite\n(\n\"ResourceStatusReason:  \n\\n\n\"\n)\n\n        \nlog_output\n.\nwrite\n(\ntextwrap\n.\nfill\n(\nstr\n(\nreason\n),\n \n85\n)\n \n+\n \n\"\n\\n\n\"\n)\n\n        \nlog_output\n.\nwrite\n(\n\"*****************************************************************************\n\\n\n\"\n)\n\n        \nlog_output\n.\nwrite\n(\n\"*****************************************************************************\n\\n\n\"\n)\n\n        \nlog_output\n.\nwrite\n(\n\"Events:  \n\\n\n\"\n)\n\n        \nlog_output\n.\nwritelines\n(\ntabulate\n.\ntabulate\n(\ncfnlogs\n,\n \nheaders\n=\n\"keys\"\n))\n\n        \nlog_output\n.\nwrite\n(\n\n            \n\"\n\\n\n*****************************************************************************\n\\n\n\"\n)\n\n        \nlog_output\n.\nwrite\n(\n\"-----------------------------------------------------------------------------\n\\n\n\"\n)\n\n        \nlog_output\n.\nwrite\n(\n\"Tested on: \"\n \n+\n \ndatetime\n.\ndatetime\n.\nnow\n()\n.\nstrftime\n(\n\"%A, \n%d\n. %B %Y %I:%M%p\"\n)\n \n+\n \n\"\n\\n\n\"\n)\n\n        \nlog_output\n.\nwrite\n(\n\n            \n\"-----------------------------------------------------------------------------\n\\n\\n\n\"\n)\n\n        \nlog_output\n.\nclose\n()\n\n    \n# Collect resources of the stack and get event logs for any child stacks\n\n    \nresources\n \n=\n \nself\n.\nget_resources\n(\nstackname\n,\n \nregion\n,\n \ninclude_stacks\n=\nTrue\n)\n\n    \nfor\n \nresource\n \nin\n \nresources\n:\n\n        \nif\n \nresource\n[\n'resourceType'\n]\n \n==\n \n'AWS::CloudFormation::Stack'\n:\n\n            \nself\n.\nwrite_logs\n(\nresource\n[\n'physicalId'\n],\n \nlogpath\n)\n\n\n\n\n  \n\n\n\n\n  \n\n\n          \nInstance variables\n\n            \n\n            \nvar \nbanner\n\n\n\n\n\n  \n\n\n\n\n            \n\n            \n\n            \nvar \ncapabilities\n\n\n\n\n\n  \n\n\n\n\n            \n\n            \n\n            \nvar \nconfig\n\n\n\n\n\n  \n\n\n\n\n            \n\n            \n\n            \nvar \ndefult_region\n\n\n\n\n\n  \n\n\n\n\n            \n\n            \n\n            \nvar \ninterface\n\n\n\n\n\n  \n\n\n\n\n            \n\n            \n\n            \nvar \nnametag\n\n\n\n\n\n  \n\n\n\n\n            \n\n            \n\n            \nvar \nparameter_path\n\n\n\n\n\n  \n\n\n\n\n            \n\n            \n\n            \nvar \nproject\n\n\n\n\n\n  \n\n\n\n\n            \n\n            \n\n            \nvar \nrun_cleanup\n\n\n\n\n\n  \n\n\n\n\n            \n\n            \n\n            \nvar \ns3bucket\n\n\n\n\n\n  \n\n\n\n\n            \n\n            \n\n            \nvar \ntemplate_path\n\n\n\n\n\n  \n\n\n\n\n            \n\n            \n\n            \nvar \ntest_region\n\n\n\n\n\n  \n\n\n\n\n            \n\n            \n\n            \nvar \nverbose\n\n\n\n\n\n  \n\n\n\n\n            \n\n      \n\n      \n\n\n  \n\n\n    \n\n  \n \n\n  \n\n    \n\n      Documentation generated by\n      \npdoc 0.3.2\n\n    \n\n\n    \npdoc is in the public domain with the\n      \nUNLICENSE\n\n\n    \nDesign by \nKailash Nadh",
            "title": "Pip Module (taskcat)"
        },
        {
            "location": "/pip/sweeper.m/",
            "text": "<title>sweeper API documentation</title>\n<meta name=\"description\" content=\"\" />\n\n\n\n\n\n\n\n<ul>\n<li>{\n  box-sizing: border-box;\n}\n/<em>! normalize.css v1.1.1 | MIT License | git.io/normalize </em>/</li>\n</ul>\n<p>/<em> ==========================================================================\n   HTML5 display definitions\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Correct <code>block</code> display not defined in IE 6/7/8/9 and Firefox 3.\n </em>/</p>\n<p>article,\naside,\ndetails,\nfigcaption,\nfigure,\nfooter,\nheader,\nhgroup,\nmain,\nnav,\nsection,\nsummary {\n    display: block;\n}</p>\n<p>/*<em>\n * Correct <code>inline-block</code> display not defined in IE 6/7/8/9 and Firefox 3.\n </em>/</p>\n<p>audio,\ncanvas,\nvideo {\n    display: inline-block;\n    <em>display: inline;\n    </em>zoom: 1;\n}</p>\n<p>/*<em>\n * Prevent modern browsers from displaying <code>audio</code> without controls.\n * Remove excess height in iOS 5 devices.\n </em>/</p>\n<p>audio:not([controls]) {\n    display: none;\n    height: 0;\n}</p>\n<p>/*<em>\n * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.\n * Known issue: no IE 6 support.\n </em>/</p>\n<p>[hidden] {\n    display: none;\n}</p>\n<p>/<em> ==========================================================================\n   Base\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * 1. Prevent system color scheme&rsquo;s background color being used in Firefox, IE,\n *    and Opera.\n * 2. Prevent system color scheme&rsquo;s text color being used in Firefox, IE, and\n *    Opera.\n * 3. Correct text resizing oddly in IE 6/7 when body <code>font-size</code> is set using\n *    <code>em</code> units.\n * 4. Prevent iOS text size adjust after orientation change, without disabling\n *    user zoom.\n </em>/</p>\n<p>html {\n    background: #fff; /<em> 1 </em>/\n    color: #000; /<em> 2 </em>/\n    font-size: 100%; /<em> 3 </em>/\n    -webkit-text-size-adjust: 100%; /<em> 4 </em>/\n    -ms-text-size-adjust: 100%; /<em> 4 </em>/\n}</p>\n<p>/*<em>\n * Address <code>font-family</code> inconsistency between <code>textarea</code> and other form\n * elements.\n </em>/</p>\n<p>html,\nbutton,\ninput,\nselect,\ntextarea {\n    font-family: sans-serif;\n}</p>\n<p>/*<em>\n * Address margins handled incorrectly in IE 6/7.\n </em>/</p>\n<p>body {\n    margin: 0;\n}</p>\n<p>/<em> ==========================================================================\n   Links\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Address <code>outline</code> inconsistency between Chrome and other browsers.\n </em>/</p>\n<p>a:focus {\n    outline: thin dotted;\n}</p>\n<p>/*<em>\n * Improve readability when focused and also mouse hovered in all browsers.\n </em>/</p>\n<p>a:active,\na:hover {\n    outline: 0;\n}</p>\n<p>/<em> ==========================================================================\n   Typography\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Address font sizes and margins set differently in IE 6/7.\n * Address font sizes within <code>section</code> and <code>article</code> in Firefox 4+, Safari 5,\n * and Chrome.\n </em>/</p>\n<p>h1 {\n    font-size: 2em;\n    margin: 0.67em 0;\n}</p>\n<p>h2 {\n    font-size: 1.5em;\n    margin: 0.83em 0;\n}</p>\n<p>h3 {\n    font-size: 1.17em;\n    margin: 1em 0;\n}</p>\n<p>h4 {\n    font-size: 1em;\n    margin: 1.33em 0;\n}</p>\n<p>h5 {\n    font-size: 0.83em;\n    margin: 1.67em 0;\n}</p>\n<p>h6 {\n    font-size: 0.67em;\n    margin: 2.33em 0;\n}</p>\n<p>/*<em>\n * Address styling not present in IE 7/8/9, Safari 5, and Chrome.\n </em>/</p>\n<p>abbr[title] {\n    border-bottom: 1px dotted;\n}</p>\n<p>/*<em>\n * Address style set to <code>bolder</code> in Firefox 3+, Safari 4/5, and Chrome.\n </em>/</p>\n<p>b,\nstrong {\n    font-weight: bold;\n}</p>\n<p>blockquote {\n    margin: 1em 40px;\n}</p>\n<p>/*<em>\n * Address styling not present in Safari 5 and Chrome.\n </em>/</p>\n<p>dfn {\n    font-style: italic;\n}</p>\n<p>/*<em>\n * Address differences between Firefox and other browsers.\n * Known issue: no IE 6/7 normalization.\n </em>/</p>\n<p>hr {\n    -moz-box-sizing: content-box;\n    box-sizing: content-box;\n    height: 0;\n}</p>\n<p>/*<em>\n * Address styling not present in IE 6/7/8/9.\n </em>/</p>\n<p>mark {\n    background: #ff0;\n    color: #000;\n}</p>\n<p>/*<em>\n * Address margins set differently in IE 6/7.\n </em>/</p>\n<p>p,\npre {\n    margin: 1em 0;\n}</p>\n<p>/*<em>\n * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.\n </em>/</p>\n<p>code,\nkbd,\npre,\nsamp {\n    font-family: monospace, serif;\n    _font-family: &lsquo;courier new&rsquo;, monospace;\n    font-size: 1em;\n}</p>\n<p>/*<em>\n * Improve readability of pre-formatted text in all browsers.\n </em>/</p>\n<p>pre {\n    white-space: pre;\n    white-space: pre-wrap;\n    word-wrap: break-word;\n}</p>\n<p>/*<em>\n * Address CSS quotes not supported in IE 6/7.\n </em>/</p>\n<p>q {\n    quotes: none;\n}</p>\n<p>/*<em>\n * Address <code>quotes</code> property not supported in Safari 4.\n </em>/</p>\n<p>q:before,\nq:after {\n    content: &lsquo;&rsquo;;\n    content: none;\n}</p>\n<p>/*<em>\n * Address inconsistent and variable font size in all browsers.\n </em>/</p>\n<p>small {\n    font-size: 80%;\n}</p>\n<p>/*<em>\n * Prevent <code>sub</code> and <code>sup</code> affecting <code>line-height</code> in all browsers.\n </em>/</p>\n<p>sub,\nsup {\n    font-size: 75%;\n    line-height: 0;\n    position: relative;\n    vertical-align: baseline;\n}</p>\n<p>sup {\n    top: -0.5em;\n}</p>\n<p>sub {\n    bottom: -0.25em;\n}</p>\n<p>/<em> ==========================================================================\n   Lists\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Address margins set differently in IE 6/7.\n </em>/</p>\n<p>dl,\nmenu,\nol,\nul {\n    margin: 1em 0;\n}</p>\n<p>dd {\n    margin: 0 0 0 40px;\n}</p>\n<p>/*<em>\n * Address paddings set differently in IE 6/7.\n </em>/</p>\n<p>menu,\nol,\nul {\n    padding: 0 0 0 40px;\n}</p>\n<p>/*<em>\n * Correct list images handled incorrectly in IE 7.\n </em>/</p>\n<p>nav ul,\nnav ol {\n    list-style: none;\n    list-style-image: none;\n}</p>\n<p>/<em> ==========================================================================\n   Embedded content\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * 1. Remove border when inside <code>a</code> element in IE 6/7/8/9 and Firefox 3.\n * 2. Improve image quality when scaled in IE 7.\n </em>/</p>\n<p>img {\n    border: 0; /<em> 1 </em>/\n    -ms-interpolation-mode: bicubic; /<em> 2 </em>/\n}</p>\n<p>/*<em>\n * Correct overflow displayed oddly in IE 9.\n </em>/</p>\n<p>svg:not(:root) {\n    overflow: hidden;\n}</p>\n<p>/<em> ==========================================================================\n   Figures\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.\n </em>/</p>\n<p>figure {\n    margin: 0;\n}</p>\n<p>/<em> ==========================================================================\n   Forms\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Correct margin displayed oddly in IE 6/7.\n </em>/</p>\n<p>form {\n    margin: 0;\n}</p>\n<p>/*<em>\n * Define consistent border, margin, and padding.\n </em>/</p>\n<p>fieldset {\n    border: 1px solid #c0c0c0;\n    margin: 0 2px;\n    padding: 0.35em 0.625em 0.75em;\n}</p>\n<p>/*<em>\n * 1. Correct color not being inherited in IE 6/7/8/9.\n * 2. Correct text not wrapping in Firefox 3.\n * 3. Correct alignment displayed oddly in IE 6/7.\n </em>/</p>\n<p>legend {\n    border: 0; /<em> 1 </em>/\n    padding: 0;\n    white-space: normal; /<em> 2 </em>/\n    <em>margin-left: -7px; /</em> 3 */\n}</p>\n<p>/*<em>\n * 1. Correct font size not being inherited in all browsers.\n * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,\n *    and Chrome.\n * 3. Improve appearance and consistency in all browsers.\n </em>/</p>\n<p>button,\ninput,\nselect,\ntextarea {\n    font-size: 100%; /<em> 1 </em>/\n    margin: 0; /<em> 2 </em>/\n    vertical-align: baseline; /<em> 3 </em>/\n    <em>vertical-align: middle; /</em> 3 */\n}</p>\n<p>/*<em>\n * Address Firefox 3+ setting <code>line-height</code> on <code>input</code> using <code>!important</code> in\n * the UA stylesheet.\n </em>/</p>\n<p>button,\ninput {\n    line-height: normal;\n}</p>\n<p>/*<em>\n * Address inconsistent <code>text-transform</code> inheritance for <code>button</code> and <code>select</code>.\n * All other form control elements do not inherit <code>text-transform</code> values.\n * Correct <code>button</code> style inheritance in Chrome, Safari 5+, and IE 6+.\n * Correct <code>select</code> style inheritance in Firefox 4+ and Opera.\n </em>/</p>\n<p>button,\nselect {\n    text-transform: none;\n}</p>\n<p>/<em><em>\n * 1. Avoid the WebKit bug in Android 4.0.</em> where (2) destroys native <code>audio</code>\n *    and <code>video</code> controls.\n * 2. Correct inability to style clickable <code>input</code> types in iOS.\n * 3. Improve usability and consistency of cursor style between image-type\n *    <code>input</code> and others.\n * 4. Remove inner spacing in IE 7 without affecting normal text inputs.\n *    Known issue: inner spacing remains in IE 6.\n </em>/</p>\n<p>button,\nhtml input[type=&rdquo;button&rdquo;], /<em> 1 </em>/\ninput[type=&rdquo;reset&rdquo;],\ninput[type=&rdquo;submit&rdquo;] {\n    -webkit-appearance: button; /<em> 2 </em>/\n    cursor: pointer; /<em> 3 </em>/\n    <em>overflow: visible;  /</em> 4 */\n}</p>\n<p>/*<em>\n * Re-set default cursor for disabled elements.\n </em>/</p>\n<p>button[disabled],\nhtml input[disabled] {\n    cursor: default;\n}</p>\n<p>/*<em>\n * 1. Address box sizing set to content-box in IE 8/9.\n * 2. Remove excess padding in IE 8/9.\n * 3. Remove excess padding in IE 7.\n *    Known issue: excess padding remains in IE 6.\n </em>/</p>\n<p>input[type=&rdquo;checkbox&rdquo;],\ninput[type=&rdquo;radio&rdquo;] {\n    box-sizing: border-box; /<em> 1 </em>/\n    padding: 0; /<em> 2 </em>/\n    <em>height: 13px; /</em> 3 <em>/\n    </em>width: 13px; /<em> 3 </em>/\n}</p>\n<p>/*<em>\n * 1. Address <code>appearance</code> set to <code>searchfield</code> in Safari 5 and Chrome.\n * 2. Address <code>box-sizing</code> set to <code>border-box</code> in Safari 5 and Chrome\n *    (include <code>-moz</code> to future-proof).\n </em>/</p>\n<p>input[type=&rdquo;search&rdquo;] {\n    -webkit-appearance: textfield; /<em> 1 </em>/\n    -moz-box-sizing: content-box;\n    -webkit-box-sizing: content-box; /<em> 2 </em>/\n    box-sizing: content-box;\n}</p>\n<p>/*<em>\n * Remove inner padding and search cancel button in Safari 5 and Chrome\n * on OS X.\n </em>/</p>\n<p>input[type=&rdquo;search&rdquo;]::-webkit-search-cancel-button,\ninput[type=&rdquo;search&rdquo;]::-webkit-search-decoration {\n    -webkit-appearance: none;\n}</p>\n<p>/*<em>\n * Remove inner padding and border in Firefox 3+.\n </em>/</p>\n<p>button::-moz-focus-inner,\ninput::-moz-focus-inner {\n    border: 0;\n    padding: 0;\n}</p>\n<p>/*<em>\n * 1. Remove default vertical scrollbar in IE 6/7/8/9.\n * 2. Improve readability and alignment in all browsers.\n </em>/</p>\n<p>textarea {\n    overflow: auto; /<em> 1 </em>/\n    vertical-align: top; /<em> 2 </em>/\n}</p>\n<p>/<em> ==========================================================================\n   Tables\n   ========================================================================== </em>/</p>\n<p>/*<em>\n * Remove most spacing between table cells.\n </em>/</p>\n<p>table {\n    border-collapse: collapse;\n    border-spacing: 0;\n}</p>\n\n\n\n\n\n\n<p>html, body {\n    margin: 0;\n    padding: 0;\n    min-height: 100%;\n  }\n  body {\n    background: #fff;\n    font-family: &ldquo;Source Sans Pro&rdquo;, &ldquo;Helvetica Neueue&rdquo;, Helvetica, sans;\n    font-weight: 300;\n    font-size: 16px;\n    line-height: 1.6em;\n  }\n  #content {\n    width: 70%;\n    max-width: 850px;\n    float: left;\n    padding: 30px 60px;\n    border-left: 1px solid #ddd;\n  }\n  #sidebar {\n    width: 25%;\n    float: left;\n    padding: 30px;\n    overflow: hidden;\n  }\n  #nav {\n    font-size: 130%;\n    margin: 0 0 15px 0;\n  }</p>\n<p>#top {\n    display: block;\n    position: fixed;\n    bottom: 5px;\n    left: 5px;\n    font-size: .85em;\n    text-transform: uppercase;\n  }</p>\n<p>#footer {\n    font-size: .75em;\n    padding: 5px 30px;\n    border-top: 1px solid #ddd;\n    text-align: right;\n  }\n    #footer p {\n      margin: 0 0 0 30px;\n      display: inline-block;\n    }</p>\n<p>h1, h2, h3, h4, h5 {\n    font-weight: 300;\n  }\n  h1 {\n    font-size: 2.5em;\n    line-height: 1.1em;\n    margin: 0 0 .50em 0;\n  }</p>\n<p>h2 {\n    font-size: 1.75em;\n    margin: 1em 0 .50em 0;\n  }</p>\n<p>h3 {\n    margin: 25px 0 10px 0;\n  }</p>\n<p>h4 {\n    margin: 0;\n    font-size: 105%;\n  }</p>\n<p>a {\n    color: #058;\n    text-decoration: none;\n    transition: color .3s ease-in-out;\n  }</p>\n<p>a:hover {\n    color: #e08524;\n    transition: color .3s ease-in-out;\n  }</p>\n<p>pre, code, .mono, .name {\n    font-family: &ldquo;Ubuntu Mono&rdquo;, &ldquo;Cousine&rdquo;, &ldquo;DejaVu Sans Mono&rdquo;, monospace;\n  }</p>\n<p>.title .name {\n    font-weight: bold;\n  }\n  .section-title {\n    margin-top: 2em;\n  }\n  .ident {\n    color: #900;\n  }</p>\n<p>code {\n    background: #f9f9f9;\n  } </p>\n<p>pre {\n    background: #fefefe;\n    border: 1px solid #ddd;\n    box-shadow: 2px 2px 0 #f3f3f3;\n    margin: 0 30px;\n    padding: 15px 30px;\n  }</p>\n<p>.codehilite {\n    margin: 0 30px 10px 30px;\n  }</p>\n<pre><code>.codehilite pre {\n  margin: 0;\n}\n.codehilite .err { background: #ff3300; color: #fff !important; }\n</code></pre>\n<p>table#module-list {\n    font-size: 110%;\n  }</p>\n<pre><code>table#module-list tr td:first-child {\n  padding-right: 10px;\n  white-space: nowrap;\n}\n\ntable#module-list td {\n  vertical-align: top;\n  padding-bottom: 8px;\n}\n\n  table#module-list td p {\n    margin: 0 0 7px 0;\n  }\n</code></pre>\n<p>.def {\n    display: table;\n  }</p>\n<pre><code>.def p {\n  display: table-cell;\n  vertical-align: top;\n  text-align: left;\n}\n\n.def p:first-child {\n  white-space: nowrap;\n}\n\n.def p:last-child {\n  width: 100%;\n}\n</code></pre>\n<p>#index {\n    list-style-type: none;\n    margin: 0;\n    padding: 0;\n  }\n    ul#index .class_name {\n      /<em> font-size: 110%; </em>/\n      font-weight: bold;\n    }\n    #index ul {\n      margin: 0;\n    }</p>\n<p>.item {\n    margin: 0 0 15px 0;\n  }</p>\n<pre><code>.item .class {\n  margin: 0 0 25px 30px;\n}\n\n  .item .class ul.class_list {\n    margin: 0 0 20px 0;\n  }\n\n.item .name {\n  background: #fafafa;\n  margin: 0;\n  font-weight: bold;\n  padding: 5px 10px;\n  border-radius: 3px;\n  display: inline-block;\n  min-width: 40%;\n}\n  .item .name:hover {\n    background: #f6f6f6;\n  }\n\n.item .empty_desc {\n  margin: 0 0 5px 0;\n  padding: 0;\n}\n\n.item .inheritance {\n  margin: 3px 0 0 30px;\n}\n\n.item .inherited {\n  color: #666;\n}\n\n.item .desc {\n  padding: 0 8px;\n  margin: 0;\n}\n\n  .item .desc p {\n    margin: 0 0 10px 0;\n  }\n\n.source_cont {\n  margin: 0;\n  padding: 0;\n}\n\n.source_link a {\n  background: #ffc300;\n  font-weight: 400;\n  font-size: .75em;\n  text-transform: uppercase;\n  color: #fff;\n  text-shadow: 1px 1px 0 #f4b700;\n\n  padding: 3px 8px;\n  border-radius: 2px;\n  transition: background .3s ease-in-out;\n}\n  .source_link a:hover {\n    background: #FF7200;\n    text-shadow: none;\n    transition: background .3s ease-in-out;\n  }\n\n.source {\n  display: none;\n  max-height: 600px;\n  overflow-y: scroll;\n  margin-bottom: 15px;\n}\n\n  .source .codehilite {\n    margin: 0;\n  }\n</code></pre>\n<p>.desc h1, .desc h2, .desc h3 {\n    font-size: 100% !important;\n  }\n  .clear {\n    clear: both;\n  }</p>\n<p>@media all and (max-width: 950px) {\n    #sidebar {\n      width: 35%;\n    }\n    #content {\n      width: 65%;\n    }\n  }\n  @media all and (max-width: 650px) {\n    #top {\n      display: none;\n    }\n    #sidebar {\n      float: none;\n      width: auto;\n    }\n    #content {\n      float: none;\n      width: auto;\n      padding: 30px;\n    }</p>\n<pre><code>#index ul {\n  padding: 0;\n  margin-bottom: 15px;\n}\n#index ul li {\n  display: inline-block;\n  margin-right: 30px;\n}\n#footer {\n  text-align: left;\n}\n#footer p {\n  display: block;\n  margin: inherit;\n}\n</code></pre>\n<p>}</p>\n<p>/<strong><em>*</em></strong><strong><em>*</em></strong><strong><em>*</em></strong><strong><em>*</em></strong>*/</p>\n\n\n\n\n\n  .codehilite .hll { background-color: #ffffcc }\n.codehilite  { background: #f8f8f8; }\n.codehilite .c { color: #408080; font-style: italic } /<em> Comment </em>/\n.codehilite .err { border: 1px solid #FF0000 } /<em> Error </em>/\n.codehilite .k { color: #008000; font-weight: bold } /<em> Keyword </em>/\n.codehilite .o { color: #666666 } /<em> Operator </em>/\n.codehilite .ch { color: #408080; font-style: italic } /<em> Comment.Hashbang </em>/\n.codehilite .cm { color: #408080; font-style: italic } /<em> Comment.Multiline </em>/\n.codehilite .cp { color: #BC7A00 } /<em> Comment.Preproc </em>/\n.codehilite .cpf { color: #408080; font-style: italic } /<em> Comment.PreprocFile </em>/\n.codehilite .c1 { color: #408080; font-style: italic } /<em> Comment.Single </em>/\n.codehilite .cs { color: #408080; font-style: italic } /<em> Comment.Special </em>/\n.codehilite .gd { color: #A00000 } /<em> Generic.Deleted </em>/\n.codehilite .ge { font-style: italic } /<em> Generic.Emph </em>/\n.codehilite .gr { color: #FF0000 } /<em> Generic.Error </em>/\n.codehilite .gh { color: #000080; font-weight: bold } /<em> Generic.Heading </em>/\n.codehilite .gi { color: #00A000 } /<em> Generic.Inserted </em>/\n.codehilite .go { color: #888888 } /<em> Generic.Output </em>/\n.codehilite .gp { color: #000080; font-weight: bold } /<em> Generic.Prompt </em>/\n.codehilite .gs { font-weight: bold } /<em> Generic.Strong </em>/\n.codehilite .gu { color: #800080; font-weight: bold } /<em> Generic.Subheading </em>/\n.codehilite .gt { color: #0044DD } /<em> Generic.Traceback </em>/\n.codehilite .kc { color: #008000; font-weight: bold } /<em> Keyword.Constant </em>/\n.codehilite .kd { color: #008000; font-weight: bold } /<em> Keyword.Declaration </em>/\n.codehilite .kn { color: #008000; font-weight: bold } /<em> Keyword.Namespace </em>/\n.codehilite .kp { color: #008000 } /<em> Keyword.Pseudo </em>/\n.codehilite .kr { color: #008000; font-weight: bold } /<em> Keyword.Reserved </em>/\n.codehilite .kt { color: #B00040 } /<em> Keyword.Type </em>/\n.codehilite .m { color: #666666 } /<em> Literal.Number </em>/\n.codehilite .s { color: #BA2121 } /<em> Literal.String </em>/\n.codehilite .na { color: #7D9029 } /<em> Name.Attribute </em>/\n.codehilite .nb { color: #008000 } /<em> Name.Builtin </em>/\n.codehilite .nc { color: #0000FF; font-weight: bold } /<em> Name.Class </em>/\n.codehilite .no { color: #880000 } /<em> Name.Constant </em>/\n.codehilite .nd { color: #AA22FF } /<em> Name.Decorator </em>/\n.codehilite .ni { color: #999999; font-weight: bold } /<em> Name.Entity </em>/\n.codehilite .ne { color: #D2413A; font-weight: bold } /<em> Name.Exception </em>/\n.codehilite .nf { color: #0000FF } /<em> Name.Function </em>/\n.codehilite .nl { color: #A0A000 } /<em> Name.Label </em>/\n.codehilite .nn { color: #0000FF; font-weight: bold } /<em> Name.Namespace </em>/\n.codehilite .nt { color: #008000; font-weight: bold } /<em> Name.Tag </em>/\n.codehilite .nv { color: #19177C } /<em> Name.Variable </em>/\n.codehilite .ow { color: #AA22FF; font-weight: bold } /<em> Operator.Word </em>/\n.codehilite .w { color: #bbbbbb } /<em> Text.Whitespace </em>/\n.codehilite .mb { color: #666666 } /<em> Literal.Number.Bin </em>/\n.codehilite .mf { color: #666666 } /<em> Literal.Number.Float </em>/\n.codehilite .mh { color: #666666 } /<em> Literal.Number.Hex </em>/\n.codehilite .mi { color: #666666 } /<em> Literal.Number.Integer </em>/\n.codehilite .mo { color: #666666 } /<em> Literal.Number.Oct </em>/\n.codehilite .sa { color: #BA2121 } /<em> Literal.String.Affix </em>/\n.codehilite .sb { color: #BA2121 } /<em> Literal.String.Backtick </em>/\n.codehilite .sc { color: #BA2121 } /<em> Literal.String.Char </em>/\n.codehilite .dl { color: #BA2121 } /<em> Literal.String.Delimiter </em>/\n.codehilite .sd { color: #BA2121; font-style: italic } /<em> Literal.String.Doc </em>/\n.codehilite .s2 { color: #BA2121 } /<em> Literal.String.Double </em>/\n.codehilite .se { color: #BB6622; font-weight: bold } /<em> Literal.String.Escape </em>/\n.codehilite .sh { color: #BA2121 } /<em> Literal.String.Heredoc </em>/\n.codehilite .si { color: #BB6688; font-weight: bold } /<em> Literal.String.Interpol </em>/\n.codehilite .sx { color: #008000 } /<em> Literal.String.Other </em>/\n.codehilite .sr { color: #BB6688 } /<em> Literal.String.Regex </em>/\n.codehilite .s1 { color: #BA2121 } /<em> Literal.String.Single </em>/\n.codehilite .ss { color: #19177C } /<em> Literal.String.Symbol </em>/\n.codehilite .bp { color: #008000 } /<em> Name.Builtin.Pseudo </em>/\n.codehilite .fm { color: #0000FF } /<em> Name.Function.Magic </em>/\n.codehilite .vc { color: #19177C } /<em> Name.Variable.Class </em>/\n.codehilite .vg { color: #19177C } /<em> Name.Variable.Global </em>/\n.codehilite .vi { color: #19177C } /<em> Name.Variable.Instance </em>/\n.codehilite .vm { color: #19177C } /<em> Name.Variable.Magic </em>/\n.codehilite .il { color: #666666 } /<em> Literal.Number.Integer.Long </em>/\n  \n\n\n\n\n<p>/<em> ==========================================================================\n   EXAMPLE Media Queries for Responsive Design.\n   These examples override the primary (&lsquo;mobile first&rsquo;) styles.\n   Modify as content requires.\n   ========================================================================== </em>/</p>\n<p>@media only screen and (min-width: 35em) {\n    /<em> Style adjustments for viewports that meet the condition </em>/\n}</p>\n<p>@media print,\n       (-o-min-device-pixel-ratio: 5/4),\n       (-webkit-min-device-pixel-ratio: 1.25),\n       (min-resolution: 120dpi) {\n    /<em> Style adjustments for high resolution devices </em>/\n}</p>\n<p>/<em> ==========================================================================\n   Print styles.\n   Inlined to avoid required HTTP connection: h5bp.com/r\n   ========================================================================== </em>/</p>\n<p>@media print {\n    * {\n        background: transparent !important;\n        color: #000 !important; /<em> Black prints faster: h5bp.com/s </em>/\n        box-shadow: none !important;\n        text-shadow: none !important;\n    }</p>\n<pre><code>a,\na:visited {\n    text-decoration: underline;\n}\n\na[href]:after {\n    content: \" (\" attr(href) \")\";\n}\n\nabbr[title]:after {\n    content: \" (\" attr(title) \")\";\n}\n\n/*\n * Don't show links for images, or javascript/internal links\n */\n\n.ir a:after,\na[href^=\"javascript:\"]:after,\na[href^=\"#\"]:after {\n    content: \"\";\n}\n\npre,\nblockquote {\n    border: 1px solid #999;\n    page-break-inside: avoid;\n}\n\nthead {\n    display: table-header-group; /* h5bp.com/t */\n}\n\ntr,\nimg {\n    page-break-inside: avoid;\n}\n\nimg {\n    max-width: 100% !important;\n}\n\n@page {\n    margin: 0.5cm;\n}\n\np,\nh2,\nh3 {\n    orphans: 3;\n    widows: 3;\n}\n\nh2,\nh3 {\n    page-break-after: avoid;\n}\n</code></pre>\n<p>}</p>\n\n\n\n\n\n  function toggle(id, $link) {\n    $node = document.getElementById(id);\n    if (!$node)\n    return;\n    if (!$node.style.display || $node.style.display == &lsquo;none&rsquo;) {\n    $node.style.display = &lsquo;block&rsquo;;\n    $link.innerHTML = &lsquo;Hide source &nequiv;&lsquo;;\n    } else {\n    $node.style.display = &lsquo;none&rsquo;;\n    $link.innerHTML = &lsquo;Show source &equiv;&lsquo;;\n    }\n  }\n  \n\n\n\n\n\n\nTop\n\n\n\n\n  \n\n    \nIndex\n\n    \n\n\n\n    \nClasses\n\n      \n\n        \n\n        \nSweeper\n\n\n\n  \n\n    \n__init__\n\n    \ndelete_all\n\n  \n\n\n        \n\n      \n\n    \n\n\n    \n\n  \n\n\n    \n\n\n\n\n\n\n\n  \n\n  \nsweeper\n module\n\n\n\n  \nShow source \u2261\n\n  \n\n    \n#!/usr/bin/env python\n\n\n# -*- coding: UTF-8 -*-\n\n\n# authors:\n\n\n# Shivansh Singh sshvans@amazon.com\n\n\n\nfrom\n \n__future__\n \nimport\n \nprint_function\n\n\nfrom\n \n__future__\n \nimport\n \nabsolute_import\n\n\nimport\n \nbotocore\n\n\nfrom\n \nbotocore.exceptions\n \nimport\n \nClientError\n\n\nimport\n \nlogging\n\n\n\ndebug\n \n=\n \n''\n\n\nerror\n \n=\n \n''\n\n\ncheck\n \n=\n \n''\n\n\nfail\n \n=\n \n''\n\n\ninfo\n \n=\n \n''\n\n\nheader\n \n=\n \n'\n\\x1b\n[1;41;0m'\n\n\nhightlight\n \n=\n \n'\n\\x1b\n[0;30;47m'\n\n\nname_color\n \n=\n \n'\n\\x1b\n[0;37;44m'\n\n\naqua\n \n=\n \n'\n\\x1b\n[0;30;46m'\n\n\ngreen\n \n=\n \n'\n\\x1b\n[0;30;42m'\n\n\nwhite\n \n=\n \n'\n\\x1b\n[0;30;47m'\n\n\norange\n \n=\n \n'\n\\x1b\n[0;30;43m'\n\n\nred\n \n=\n \n'\n\\x1b\n[0;30;41m'\n\n\nrst_color\n \n=\n \n'\n\\x1b\n[0m'\n\n\nE\n \n=\n \n'{1}[ERROR {0} ]{2} :'\n.\nformat\n(\nerror\n,\n \nred\n,\n \nrst_color\n)\n\n\nD\n \n=\n \n'{1}[DEBUG {0} ]{2} :'\n.\nformat\n(\ndebug\n,\n \naqua\n,\n \nrst_color\n)\n\n\nP\n \n=\n \n'{1}[PASS  {0} ]{2} :'\n.\nformat\n(\ncheck\n,\n \ngreen\n,\n \nrst_color\n)\n\n\nF\n \n=\n \n'{1}[FAIL  {0} ]{2} :'\n.\nformat\n(\nfail\n,\n \nred\n,\n \nrst_color\n)\n\n\nI\n \n=\n \n'{1}[INFO  {0} ]{2} :'\n.\nformat\n(\ninfo\n,\n \norange\n,\n \nrst_color\n)\n\n\n\n# create logger\n\n\nlogger\n \n=\n \nlogging\n.\ngetLogger\n(\n'Sweeper'\n)\n\n\nlogger\n.\nsetLevel\n(\nlogging\n.\nDEBUG\n)\n\n\n\n# create console handler and set level to debug\n\n\nch\n \n=\n \nlogging\n.\nStreamHandler\n()\n\n\nch\n.\nsetLevel\n(\nlogging\n.\nDEBUG\n)\n\n\n\n# create formatter\n\n\nformatter\n \n=\n \nlogging\n.\nFormatter\n(\n\n    \n'\n%(asctime)s\n - \n%(name)s\n - \n%(levelname)s\n - \n%(message)s\n'\n)\n\n\n\n# add formatter to ch\n\n\nch\n.\nsetFormatter\n(\nformatter\n)\n\n\n\n# add ch to logger\n\n\nlogger\n.\naddHandler\n(\nch\n)\n\n\n\n# Sweeper class provide functions to delete the AWS resources as per the\n\n\n# defined rules.\n\n\n\n\n# noinspection PyUnresolvedReferences,PyUnresolvedReferences,PyUnresolvedReferences,PyUnresolvedReferences\n\n\nclass\n \nSweeper\n(\nobject\n):\n\n\n    \n# Given an s3 bucket name, this function deletes all the versions of the bucket\n\n    \n# Param:\n\n    \n#   bucket_name - Name of the bucket to delete\n\n\n    \ndef\n \n__delete_s3_bucket\n(\nself\n,\n \nbucket_name\n):\n\n        \ns3_resource\n \n=\n \nself\n.\nsession\n.\nresource\n(\n's3'\n)\n\n        \nlogger\n.\ninfo\n(\n'Working on bucket [\n%s\n]'\n,\n \nbucket_name\n)\n\n        \nbucket_resource\n \n=\n \ns3_resource\n.\nBucket\n(\nbucket_name\n)\n\n        \nlogger\n.\ninfo\n(\n\"Getting and deleting all object versions\"\n)\n\n        \ntry\n:\n\n            \nobject_versions\n \n=\n \nbucket_resource\n.\nobject_versions\n.\nall\n()\n\n            \nfor\n \nobject_version\n \nin\n \nobject_versions\n:\n\n                \n# TODO: Delete sets of 1000 object versions to reduce delete\n\n                \n# requests\n\n                \nobject_version\n.\ndelete\n()\n\n        \nexcept\n \nClientError\n \nas\n \ne\n:\n\n            \nif\n \ne\n.\nresponse\n[\n'Error'\n][\n'Code'\n]\n \n==\n \n'AccessDenied'\n:\n\n                \nlogger\n.\nwarning\n(\n\"Unable to delete object versions. (AccessDenied)\"\n)\n\n            \nif\n \ne\n.\nresponse\n[\n'Error'\n][\n'Code'\n]\n \n==\n \n'NoSuchBucket'\n:\n\n                \nlogger\n.\nwarning\n(\n\"Unable to get versions. (NoSuchBucket)\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ne\n)\n\n        \nlogger\n.\ninfo\n(\n'Deleting bucket [\n%s\n]'\n,\n \nbucket_name\n)\n\n        \ntry\n:\n\n            \nbucket_resource\n.\ndelete\n()\n\n        \nexcept\n \nbotocore\n.\nexceptions\n.\nClientError\n \nas\n \ne\n:\n\n            \nif\n \ne\n.\nresponse\n[\n'Error'\n][\n'Code'\n]\n \n==\n \n'NoSuchBucket'\n:\n\n                \nlogger\n.\nwarning\n(\n\"Bucket was already deleted. (NoSuchBucket)\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ne\n)\n\n\n    \n# Given a volume id, this function deletes the volume with given id\n\n    \n# Param:\n\n    \n#   volume_id - Id of the volume to be deleted\n\n\n    \ndef\n \n__delete_volume\n(\nself\n,\n \nvolume_id\n):\n\n        \nec2_client\n \n=\n \nself\n.\nsession\n.\nclient\n(\n'ec2'\n)\n\n        \nlogger\n.\ninfo\n(\n'Deleting EBS Volume [\n%s\n]'\n,\n \nvolume_id\n)\n\n        \ntry\n:\n\n            \nec2_client\n.\ndelete_volume\n(\nVolumeId\n=\nvolume_id\n)\n\n        \nexcept\n \nClientError\n \nas\n \ne\n:\n\n            \nif\n \ne\n.\nresponse\n[\n'Error'\n][\n'Code'\n]\n \n==\n \n'AccessDenied'\n:\n\n                \nlogger\n.\nwarning\n(\n\"Unable to delete volume. (AccessDenied)\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ne\n)\n\n\n    \n# Given a Security Group Id, this function deletes the security group with given Id.\n\n    \n# Param:\n\n    \n# sg_id - Id of the Security Group which needs to be deleted\n\n\n    \ndef\n \n__delete_sg\n(\nself\n,\n \nsg_id\n):\n\n        \nec2_client\n \n=\n \nself\n.\nsession\n.\nclient\n(\n'ec2'\n)\n\n        \nlogger\n.\ninfo\n(\n'Deleting Security Group [\n%s\n]'\n,\n \nsg_id\n)\n\n        \ntry\n:\n\n            \nec2_client\n.\ndelete_security_group\n(\nGroupId\n=\nsg_id\n)\n\n        \nexcept\n \nClientError\n \nas\n \ne\n:\n\n            \nif\n \ne\n.\nresponse\n[\n'Error'\n][\n'Code'\n]\n \n==\n \n'InvalidGroup.InUse'\n:\n\n                \nlogger\n.\nwarning\n(\n\"Unable to delete Security group. It is in-use.\"\n)\n\n            \nif\n \ne\n.\nresponse\n[\n'Error'\n][\n'Code'\n]\n \n==\n \n'InvalidGroup.NotFound'\n:\n\n                \nlogger\n.\nwarning\n(\n\n                    \n\"Unable to delete Security group. (not found).\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ne\n)\n\n\n    \n# Given a list of dictionary items where each dictionary item contains a resource list,\n\n    \n# this function deletes all the resources given.\n\n    \n# Param:\n\n    \n#   list - List of dictionary items in the format shown below\n\n    \n#\n\n    \n#       [\n\n    \n#           {\n\n    \n#               'stackId': 'string',\n\n    \n#               'resources': [\n\n    \n#                   {\n\n    \n#                       'logicalId': 'string',\n\n    \n#                       'physicalId': 'string',\n\n    \n#                       'resourceType': 'String'\n\n    \n#                   },\n\n    \n#               ]\n\n    \n#           },\n\n    \n#       ]\n\n\n    \ndef\n \ndelete_all\n(\nself\n,\n \nstack_list\n):\n\n        \nlogger\n.\ninfo\n(\n\"Deleting all resources\"\n)\n\n        \nfor\n \nstack\n \nin\n \nstack_list\n:\n\n            \nfor\n \nresource\n \nin\n \nstack\n[\n'resources'\n]:\n\n                \nself\n.\n__delete_resource\n(\n\n                    \nresource\n[\n'logicalId'\n],\n \nresource\n[\n'resourceType'\n],\n \nresource\n[\n'physicalId'\n])\n\n\n    \n# Give a resource logical id and resource type, this function deletes the resource\n\n    \n# Param:\n\n    \n#   lid - logical id of the resource to be deleted\n\n    \n#   type - resource type\n\n\n    \ndef\n \n__delete_resource\n(\nself\n,\n \nlid\n,\n \nrtype\n,\n \npid\n):\n\n        \nif\n \nrtype\n \n==\n \n\"AWS::EC2::SecurityGroup\"\n:\n\n            \nlogger\n.\ndebug\n(\n\"Found Security Group resource\"\n)\n\n            \nself\n.\n__delete_sg\n(\nlid\n)\n\n        \nif\n \nrtype\n \n==\n \n\"AWS::EC2::Volume\"\n:\n\n            \nlogger\n.\ndebug\n(\n\"Found Volume resource\"\n)\n\n            \nself\n.\n__delete_volume\n(\nlid\n)\n\n        \nif\n \nrtype\n \n==\n \n\"AWS::S3::Bucket\"\n:\n\n            \nlogger\n.\ndebug\n(\n\"Found Bucket resource\"\n)\n\n            \nself\n.\n__delete_s3_bucket\n(\npid\n)\n\n\n    \n# Constructor\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nsession\n):\n\n        \nself\n.\nsession\n \n=\n \nsession\n\n\n\n\n  \n\n\n  \n\n\n  \n\n\n\n    \nClasses\n\n\n      \n\n      \nclass \nSweeper\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \nclass\n \nSweeper\n(\nobject\n):\n\n\n    \n# Given an s3 bucket name, this function deletes all the versions of the bucket\n\n    \n# Param:\n\n    \n#   bucket_name - Name of the bucket to delete\n\n\n    \ndef\n \n__delete_s3_bucket\n(\nself\n,\n \nbucket_name\n):\n\n        \ns3_resource\n \n=\n \nself\n.\nsession\n.\nresource\n(\n's3'\n)\n\n        \nlogger\n.\ninfo\n(\n'Working on bucket [\n%s\n]'\n,\n \nbucket_name\n)\n\n        \nbucket_resource\n \n=\n \ns3_resource\n.\nBucket\n(\nbucket_name\n)\n\n        \nlogger\n.\ninfo\n(\n\"Getting and deleting all object versions\"\n)\n\n        \ntry\n:\n\n            \nobject_versions\n \n=\n \nbucket_resource\n.\nobject_versions\n.\nall\n()\n\n            \nfor\n \nobject_version\n \nin\n \nobject_versions\n:\n\n                \n# TODO: Delete sets of 1000 object versions to reduce delete\n\n                \n# requests\n\n                \nobject_version\n.\ndelete\n()\n\n        \nexcept\n \nClientError\n \nas\n \ne\n:\n\n            \nif\n \ne\n.\nresponse\n[\n'Error'\n][\n'Code'\n]\n \n==\n \n'AccessDenied'\n:\n\n                \nlogger\n.\nwarning\n(\n\"Unable to delete object versions. (AccessDenied)\"\n)\n\n            \nif\n \ne\n.\nresponse\n[\n'Error'\n][\n'Code'\n]\n \n==\n \n'NoSuchBucket'\n:\n\n                \nlogger\n.\nwarning\n(\n\"Unable to get versions. (NoSuchBucket)\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ne\n)\n\n        \nlogger\n.\ninfo\n(\n'Deleting bucket [\n%s\n]'\n,\n \nbucket_name\n)\n\n        \ntry\n:\n\n            \nbucket_resource\n.\ndelete\n()\n\n        \nexcept\n \nbotocore\n.\nexceptions\n.\nClientError\n \nas\n \ne\n:\n\n            \nif\n \ne\n.\nresponse\n[\n'Error'\n][\n'Code'\n]\n \n==\n \n'NoSuchBucket'\n:\n\n                \nlogger\n.\nwarning\n(\n\"Bucket was already deleted. (NoSuchBucket)\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ne\n)\n\n\n    \n# Given a volume id, this function deletes the volume with given id\n\n    \n# Param:\n\n    \n#   volume_id - Id of the volume to be deleted\n\n\n    \ndef\n \n__delete_volume\n(\nself\n,\n \nvolume_id\n):\n\n        \nec2_client\n \n=\n \nself\n.\nsession\n.\nclient\n(\n'ec2'\n)\n\n        \nlogger\n.\ninfo\n(\n'Deleting EBS Volume [\n%s\n]'\n,\n \nvolume_id\n)\n\n        \ntry\n:\n\n            \nec2_client\n.\ndelete_volume\n(\nVolumeId\n=\nvolume_id\n)\n\n        \nexcept\n \nClientError\n \nas\n \ne\n:\n\n            \nif\n \ne\n.\nresponse\n[\n'Error'\n][\n'Code'\n]\n \n==\n \n'AccessDenied'\n:\n\n                \nlogger\n.\nwarning\n(\n\"Unable to delete volume. (AccessDenied)\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ne\n)\n\n\n    \n# Given a Security Group Id, this function deletes the security group with given Id.\n\n    \n# Param:\n\n    \n# sg_id - Id of the Security Group which needs to be deleted\n\n\n    \ndef\n \n__delete_sg\n(\nself\n,\n \nsg_id\n):\n\n        \nec2_client\n \n=\n \nself\n.\nsession\n.\nclient\n(\n'ec2'\n)\n\n        \nlogger\n.\ninfo\n(\n'Deleting Security Group [\n%s\n]'\n,\n \nsg_id\n)\n\n        \ntry\n:\n\n            \nec2_client\n.\ndelete_security_group\n(\nGroupId\n=\nsg_id\n)\n\n        \nexcept\n \nClientError\n \nas\n \ne\n:\n\n            \nif\n \ne\n.\nresponse\n[\n'Error'\n][\n'Code'\n]\n \n==\n \n'InvalidGroup.InUse'\n:\n\n                \nlogger\n.\nwarning\n(\n\"Unable to delete Security group. It is in-use.\"\n)\n\n            \nif\n \ne\n.\nresponse\n[\n'Error'\n][\n'Code'\n]\n \n==\n \n'InvalidGroup.NotFound'\n:\n\n                \nlogger\n.\nwarning\n(\n\n                    \n\"Unable to delete Security group. (not found).\"\n)\n\n            \nelse\n:\n\n                \nprint\n(\ne\n)\n\n\n    \n# Given a list of dictionary items where each dictionary item contains a resource list,\n\n    \n# this function deletes all the resources given.\n\n    \n# Param:\n\n    \n#   list - List of dictionary items in the format shown below\n\n    \n#\n\n    \n#       [\n\n    \n#           {\n\n    \n#               'stackId': 'string',\n\n    \n#               'resources': [\n\n    \n#                   {\n\n    \n#                       'logicalId': 'string',\n\n    \n#                       'physicalId': 'string',\n\n    \n#                       'resourceType': 'String'\n\n    \n#                   },\n\n    \n#               ]\n\n    \n#           },\n\n    \n#       ]\n\n\n    \ndef\n \ndelete_all\n(\nself\n,\n \nstack_list\n):\n\n        \nlogger\n.\ninfo\n(\n\"Deleting all resources\"\n)\n\n        \nfor\n \nstack\n \nin\n \nstack_list\n:\n\n            \nfor\n \nresource\n \nin\n \nstack\n[\n'resources'\n]:\n\n                \nself\n.\n__delete_resource\n(\n\n                    \nresource\n[\n'logicalId'\n],\n \nresource\n[\n'resourceType'\n],\n \nresource\n[\n'physicalId'\n])\n\n\n    \n# Give a resource logical id and resource type, this function deletes the resource\n\n    \n# Param:\n\n    \n#   lid - logical id of the resource to be deleted\n\n    \n#   type - resource type\n\n\n    \ndef\n \n__delete_resource\n(\nself\n,\n \nlid\n,\n \nrtype\n,\n \npid\n):\n\n        \nif\n \nrtype\n \n==\n \n\"AWS::EC2::SecurityGroup\"\n:\n\n            \nlogger\n.\ndebug\n(\n\"Found Security Group resource\"\n)\n\n            \nself\n.\n__delete_sg\n(\nlid\n)\n\n        \nif\n \nrtype\n \n==\n \n\"AWS::EC2::Volume\"\n:\n\n            \nlogger\n.\ndebug\n(\n\"Found Volume resource\"\n)\n\n            \nself\n.\n__delete_volume\n(\nlid\n)\n\n        \nif\n \nrtype\n \n==\n \n\"AWS::S3::Bucket\"\n:\n\n            \nlogger\n.\ndebug\n(\n\"Found Bucket resource\"\n)\n\n            \nself\n.\n__delete_s3_bucket\n(\npid\n)\n\n\n    \n# Constructor\n\n\n    \ndef\n \n__init__\n(\nself\n,\n \nsession\n):\n\n        \nself\n.\nsession\n \n=\n \nsession\n\n\n\n\n  \n\n\n\n\n\n      \n\n          \nAncestors (in MRO)\n\n          \n\n          \nSweeper\n\n          \nbuiltins.object\n\n          \n\n          \nStatic methods\n\n\n  \n\n    \n\n    \ndef \n__init__\n(\nself, session)\n\n    \n\n\n\n\n\n    \nInitialize self.  See help(type(self)) for accurate signature.\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \n__init__\n(\nself\n,\n \nsession\n):\n\n    \nself\n.\nsession\n \n=\n \nsession\n\n\n\n\n  \n\n\n\n\n  \n\n\n\n  \n\n    \n\n    \ndef \ndelete_all\n(\nself, stack_list)\n\n    \n\n\n\n\n\n  \n\n  \nShow source \u2261\n\n  \n\n    \ndef\n \ndelete_all\n(\nself\n,\n \nstack_list\n):\n\n    \nlogger\n.\ninfo\n(\n\"Deleting all resources\"\n)\n\n    \nfor\n \nstack\n \nin\n \nstack_list\n:\n\n        \nfor\n \nresource\n \nin\n \nstack\n[\n'resources'\n]:\n\n            \nself\n.\n__delete_resource\n(\n\n                \nresource\n[\n'logicalId'\n],\n \nresource\n[\n'resourceType'\n],\n \nresource\n[\n'physicalId'\n])\n\n\n\n\n  \n\n\n\n\n  \n\n\n          \nInstance variables\n\n            \n\n            \nvar \nsession\n\n\n\n\n\n  \n\n\n\n\n            \n\n      \n\n      \n\n\n  \n\n\n    \n\n  \n \n\n  \n\n    \n\n      Documentation generated by\n      \npdoc 0.3.2\n\n    \n\n\n    \npdoc is in the public domain with the\n      \nUNLICENSE\n\n\n    \nDesign by \nKailash Nadh",
            "title": "Sub Module (taskcat.sweeper)"
        }
    ]
}