{
  "name": "Taskcat",
  "tagline": "TaskCat ",
  "body": "#taskCat\r\n<img src=http://taskcat.io/images/tcat.png height=\"256\">\r\n### What is taskcat? \r\nTaskCat is a python Class that helps deploy your cloudformation templates in multiple regions. You can use TaskCat by importing the module and creating a TaskCat object. \r\n\r\n> This repo example code to help you get started.\r\n\r\n### Installing taskcat module via pip\r\nOn Amazon linux:\r\n```\r\nsudo pip install taskcat\r\n```\r\n\r\nOn OSX:\r\nInstall pip first via `sudo easy_install pip` if dev tools are not installed you will need to install them first\r\n```\r\npip install taskcat\r\n```\r\n\r\nOn Ubuntu:\r\n```\r\nsudo apt-get update\r\nsudo apt-get install python-pip\r\nsudo pip install taskcat\r\n```\r\n\r\n## taskcat documentation\r\n### Setting up Test Cases \r\nTo setup taskcat test tests is a two step process:\r\n* Step 1 Define your test in the config.ymal\r\n* Step 2 Build a json input file for your cloudformation template.\r\n\r\n#### Step 1 Creating a config.ymal\r\nYou can generate a sample config.ymal by running `./tcat.py -ey`\r\nThe followung command will create a sample config.ymal\r\n```\r\n./tcat.py -ey | egrep -v '#|^$'  >config.ymal\r\n```\r\nOpen the file with and editor and update the filenames to match your need. (See section on working with the ymal file)\r\n\r\n#### Step 2 Building a json input file\r\nThe example below shows an input file for a stack that requires two parms `KeyPair` and `InstanceType`\r\n```json\r\n\r\n    [{\r\n    \t\"ParameterKey\": \"KeyPair\",\r\n    \t\"ParameterValue\": \"mykey\"\r\n    }, {\r\n    \t\"ParameterKey\": \"InstanceType\",\r\n    \t\"ParameterValue\": \"t2.small\"\r\n    }]\r\n```\r\n\r\n#### Example code to instantiate TaskCat\r\n> In the repo you will find tcat.py (This file contain a example of how to create a taskcat object)\r\n> You can either download from the repo or copy and paste the following code to a file called `tcat.py`\r\n\r\n```\r\n#!/usr/bin/env python\r\n# authors:\r\n# avattathil@gmail.com\r\n# License Apaache 2.0\r\n#\r\n# Purpose: This program (tcat) is a caloudformation testing tool\r\n# Tests can defined in a configuration yaml (config.yml)\r\n# @TODO\r\n        # system level configuration (sys will override repo configs)\r\n        # if os.path.isfile(sys_yml):\r\n        # tcat.load_sysymal(sys_yml)\r\n\r\nfrom taskcat import TaskCat\r\nimport yaml\r\n\r\ndef main():\r\n    tcat_obj = TaskCat()\r\n    tcat_obj.welcome('taskcat.io')\r\n    # Initalize cli interface\r\n    # @TODO Add RestFull Interface\r\n    args = tcat_obj.interface\r\n    # Init aws api and set default auth method\r\n    tcat_obj.set_config(args.config_yml)\r\n    # tcat_obj.set_config('ci/config.yml')\r\n    # Get API Handle - Try all know auth\r\n    tcat_obj.aws_api_init(args)\r\n\r\n# Run in ymal mode (Batch Test execution)\r\n# --Begin\r\n# Check for valid ymal and required keys in config\r\n    if args.config_yml is not None:\r\n        print \"[TSKCAT] : Mode of operation: \\t [ymal-mode]\"\r\n        print \"[TSKCAT] : Configuration yml: \\t [%s]\" % args.config_yml\r\n\r\n\r\n        test_list = tcat_obj.validate_yaml(args.config_yml)\r\n\r\n# Load ymal into local tcat config\r\n        with open(tcat_obj.get_config(), 'r') as cfg:\r\n            tcat_cfg = yaml.safe_load(cfg.read())\r\n        cfg.close()\r\n\r\n        tcat_obj.s3upload(tcat_cfg)\r\n        tcat_obj.validate_template(tcat_cfg, test_list)\r\n        tcat_obj.validate_parameters(tcat_cfg, test_list)\r\n        stackinfo = tcat_obj.stackcreate(tcat_cfg, test_list, 'tonyv')\r\n        tcat_obj.get_stackstatus(stackinfo , 5)\r\n\r\n# --End\r\n# Finish run in ymal mode\r\n\r\nmain()\r\n```\r\n\r\n#### To run taskcat\r\n```\r\npython tcat.py \r\n```\r\n> See below for available flags (you need to pass as input -c at minimum)\r\n\r\n### TaskCat CLI Flags\r\n```\r\n  -h, --help   show this help message and exit\r\n  -c CONFIG_YML, --config_yml CONFIG_YML [Configuration yaml] Read configuration from config.yml\r\n  -P BOTO_PROFILE, --boto-profile BOTO_PROFILE Authenticate using boto profile\r\n  -A AWS_ACCESS_KEY, --aws_access_key AWS_ACCESS_KEY AWS Access Key\r\n  -S AWS_SECRET_KEY, --aws_secret_key AWS_SECRET_KEY AWS Secret Key\r\n  -ey, --example_yaml  Prints out example yaml\r\n  -v, --verbose  Enables verbosity\r\n```\r\n\r\n### Help\r\n\tIf you need help you can reach out to via [tonynv@amazon.com](tonynv@samazon.com)\r\n\r\n*Enjoy!* ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}